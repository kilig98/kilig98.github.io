<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java总结3</title>
      <link href="/2020/08/28/Java%E6%80%BB%E7%BB%933/"/>
      <url>/2020/08/28/Java%E6%80%BB%E7%BB%933/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-核心功能"><a href="#Spring-核心功能" class="headerlink" title="Spring 核心功能"></a>Spring 核心功能</h1><p>​        发展过程：</p><ol><li><p>Spring1.x</p><p>​        此版本为了解决企业应用程序复杂性而创建的，当时J2EE应用的经典架构为分层架构：表现层，业务层，持久层。最流行的组合是SSH（Structs，Spring，Hibernate）。</p><p>​        Spring1.x仅支持基于XML的配置。</p></li><li><p>Spring2.x</p><p>​            变化不大，主要增加几个新的模块。</p></li><li><p>Spring3.x</p><p>​            Spring3.x开始不仅支持XML配置，还扩展了基于Java类的配置，还增加了Tomcat等组件，同时将原来的Web细分为Portlet和Servlet。</p></li><li><p>Spring4.x</p><p>​            提供RestFul风格，全面支持Java8。</p></li><li><p>Spring5.x</p><p>​            不断适配Java的新版本，同时重构优化自身核心框架代码，支持函数式、响应式编程模型等。</p></li></ol><p><strong>Spring核心</strong></p><ul><li>控制反转IoC</li><li>依赖注入DI</li><li>面向切面编程AOP</li></ul><p><strong>控制反转</strong></p><p>​        顾名思义就是把创建对象的权利交给框架去控制，不需要人为的创建，这样实现了可插拔式的接口编程，有效地降低了代码耦合度，降低了扩展和维护的成本。</p><p><strong>依赖注入</strong></p><p>​        由容器动态的将某个依赖关系注入到组件中。依赖注入的目的并非为软件带来更多的功能，而是提升组件重用的频率，并为系统搭建一个灵活，可扩展的平台。只需通过简单的配置，就可以指定目标所用资源，完成自身业务逻辑。</p><p><strong>IoC和DI的关系</strong></p><p>​        IoC是Spring中的一个重要概念，DI则是实现IoC的方法和手段。依赖注入的常见方式：</p><ol><li>setter注入</li><li>构造方法注入</li><li>注解注入</li></ol><p><strong>Bean标签常用属性说明：</strong></p><ul><li>id：为实例对象起名称，不能包含特殊符号</li><li>name：功能跟id一样，但现在一般不用，可以包含特殊符号</li><li>class：创建对象所在类的全限定名</li><li>scope：一般最常用的有两个值，Singleton单例模式，整个应用程序只能创建一个Bean的实例；Prototype：原型模式，每次注入都创建一个新的实例。Spring默认创建的是单例模式。</li></ul><p><strong>AOP</strong></p><p>​    <strong>优点</strong></p><ul><li><p>集中处理一类问题，方便维护</p></li><li><p>逻辑更加清晰</p></li><li><p>降低模块间的耦合度</p><p><strong>AspectJ注解说明：</strong></p></li><li><p>@Before 前置通知</p></li><li><p>@Around 环绕通知</p></li><li><p>@After 后置通知</p></li><li><p>@AfterReturning 返回通知</p></li><li><p>@AfterThrowing 异常通知</p><p><strong>@Value注解的作用？</strong></p><p>​    可以读取properties配置文件</p><p>​    <code>@Value(&quot;#&#123;configProperties[&#39;jdbc.username&#39;]&#125;&quot;)</code></p></li></ul><p><strong>Spring 中 bean的作用域类型？</strong></p><ul><li><p>单例（Singleton）：整个应用程序，只会创建一个Bean的实例</p></li><li><p>原型（Prototype）：每次注入都会创建一个新的bean实例</p></li><li><p>会话（Session）：每个会话创建一个bean实例，只在Web系统中有效。</p></li><li><p>请求（Request）：每次请求创建一个bean实例，只在Web系统中有效。</p><p>Spring默认的是单例模式。</p></li></ul><p><strong>Spring中的JdbcTemplate对象</strong></p><p>​        用来操作数据库。比JDBC提供更多的功能和有利的操作。</p><ul><li>JdbcTemplate是线程安全的。</li><li>实例化操作比较简单，仅需要传递DataSourse</li><li>自动完成资源的创建和释放工作</li><li>创建一次，到处可用，避免重复开发</li></ul><p><strong>Spring实现事务的两种方式</strong></p><ol><li><p>编程式事务</p><p>​    使用TransactionTemplate 或PlatformTransactionManager 实现。</p></li><li><p>声明式事务</p><p>​    底层是建立在AOP上的，在方法执行前后进行拦截，方法执行前创建新事物，执行后根据情况提交或回滚事务。</p><p>​    不需要编程，减少代码的耦合，在配置文件中配置，在目标方法上添加@Transactional注解来实现。</p></li></ol><p><strong>Spring声明式事务无效的可能原因？</strong></p><ul><li>MySQL使用的是MyISAM引擎，MyISAM不支持事务</li><li>@Transactional使用在非public方法上</li><li>@Transactional 在同一个类中无事务方法 A() 内部调用有事务方法 B()，那么此时 B() 事物不会生效</li></ul><p><strong>Spring中的Bean是线程安全的吗？</strong></p><p>​        Bean默认是单例模式，Spring没有对单例Bean进行多线程的封装处理，因此默认情况下是不安全的。可以将作用域设置为Prototype模式。</p><p><strong>Spring优点</strong></p><ul><li>开源免费的热门框架，稳定性高、解决问题成本低；</li><li>方便集成各种优秀的框架；</li><li>降低了代码耦合性，通过 Spring 提供的 IoC 容器，我们可以将对象之间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度程序耦合；</li><li>方便程序测试，在 Spring 里，测试变得非常简单，例如：Spring 对 Junit 的支持，可以通过注解方便的测试 Spring 程序；</li><li>降低 Java EE API 的使用难度，Spring 对很多难用的 Java EE API（如 JDBC、JavaMail、远程调用等）提供了一层封装，通过 Spring 的简易封装，让这些 Java EE API 的使用难度大为降低。</li></ul><p><strong>Spring和Structs的区别</strong><br>       Spring 特性如下：</p><ul><li>具备 IOC/DI、AOP 等通用能力，提高研发效率</li><li>除了支持 Web 层建设以外，还提供了 J2EE 整体服务</li><li>方便与其他不同技术结合使用，如 Hibernate、MyBatis 等</li><li>Spring 拦截机制是方法级别</li></ul><p>​      Struts 特性如下：</p><ul><li>是一个基于 MVC 模式的一个 Web 层的处理</li><li>Struts 拦截机制是类级别</li></ul><p><strong>Spring，Spring Boot，Spring Cloud</strong></p><ul><li>Spring Framework 简称 Spring，是整个 Spring 生态的基础。</li><li>Spring Boot 是一个快速开发框架，让开发者可以迅速搭建一套基于 Spring 的应用程序，并且将常用的 Spring 模块以及第三方模块，如 MyBatis、Hibernate 等都做了很好的集成，只需要简单的配置即可使用，不需要任何的 XML 配置文件，真正做到了开箱即用，同时默认支持 JSON 格式的数据，使用 Spring Boot 进行前后端分离开发也非常便捷。</li><li>Spring Cloud 是一套整合了分布式应用常用模块的框架，使得开发者可以快速实现微服务应用。作为目前非常热门的技术，有关微服务的话题总是在各种场景下被大家讨论，企业的招聘信息中也越来越多地出现对于微服务架构能力的要求。</li></ul><p><strong>Spring中用到了哪些设计模式？</strong></p><ul><li>工厂模式：通过 BeanFactory、ApplicationContext 来创建 bean 都是属于工厂模式；</li><li>单例、原型模式：创建 bean 对象设置作用域时，就可以声明 Singleton（单例模式）、Prototype（原型模式）；</li><li>观察者模式：Spring 可以定义一下监听，如 ApplicationListener 当某个动作触发时就会发出通知；</li><li>责任链模式：AOP 拦截器的执行；</li><li>策略模式：在创建代理类时，如果代理的是接口使用的是 JDK 自身的动态代理，如果不是接口使用的是 CGLIB 实现动态代理。</li></ul><h1 id="SpringMVC核心组件"><a href="#SpringMVC核心组件" class="headerlink" title="SpringMVC核心组件"></a>SpringMVC核心组件</h1><p>​        SpringMVC是Spring框架提供的Web组件。</p><p>​        它的实现基于 MVC 的设计模式：Controller（控制层）、Model（模型层）、View（视图层），提供了前端路由映射、视图解析等功能，让 Java Web 开发变得更加简单，也属于 Java 开发中必须要掌握的热门框架。</p><p><strong>运行流程：</strong></p><ol><li>客户端发送请求至前端控制器（DispatcherServerlt）</li><li>前端控制器根据请求路径，进入对应的处理器</li><li>处理器调用相应的业务方法</li><li>处理器获取到相应的业务数据</li><li>处理器把组装好的数据交还给前端控制器</li><li>前端控制器将获取的ModelAndView对象传给视图解析器</li><li>前端控制器获取到解析好的页面数据</li><li>返回给客户端</li></ol><p><img src="/2020/08/28/Java%E6%80%BB%E7%BB%933/image-20200829150618282.png" alt="MCV运行流程"></p><p><strong>核心组件</strong></p><ol><li><p>DispacherServlet：核心处理器，负责调度其它组件的执行</p></li><li><p>Handler：处理器，完成具体的业务逻辑，相当于Servlet</p></li><li><p>HandlerMapping：DispacherServlet通过HandlerMapping将请求映射到不同的Handler</p></li><li><p>HandlerInterceptor：拦截器</p></li><li><p>HandlerExecutionChain：处理器执行链</p></li><li><p>HandlerAdapter：处理器适配器，Handler 执行业务方法之前，需要进行一系列的操作包括表单数据的验证、数据类型的转换、将表单数据封装到 POJO 等，这一系列的操作，都是由 HandlerAdapter 来完成，DispatcherServlet 通过 HandlerAdapter 执行不同的 Handler。</p></li><li><p>ModelAndView：返回结果</p></li><li><p>ViewResolver：视图解析器，DispacherServlet通过它将逻辑视图解析成物理视图，最终将渲染结果响应给客户端</p></li></ol><p><strong>自动类型转换</strong></p><p>​        MVC可以将表单的内容，自动装配到实体类的对应属性上。</p><p><strong>中文乱码处理</strong></p><ul><li>在web.xml中添加过滤器</li><li>设置RequestMapping的produces属性，指定返回类型和编码</li></ul><hr><p><strong>POJO类和JavaBean</strong></p><p>​        POJO类就是普通Java类，具有getter/setter方法。</p><p>​        当一个POJO类可序列化，有一个无参的构造方法，它就是一个JavaBean</p><p><strong>如何实现跨域访问？</strong></p><p>​        使用JSONP，或者在服务端设置运行跨域。</p><p><strong>@RequestMapping注解常用属性</strong></p><ul><li>value：指定 URL 请求的实际地址，用法：@RequestMapping(value=”/index”)；</li><li>method：指定请求的 method 类型，如 GET/POST/PUT/DELETE 等，用法：@RequestMapping(value=”/list”,method=RequestMethod.POST)；</li><li>params：指定请求参数中必须包含的参数名称，如果不存在该名称，则无法调用此方法，用法：@RequestMapping(value=”/list”,params={“name”,”age”})。</li></ul><p><strong>常见HTTP状态码</strong></p><ul><li>400：错误请求，服务器不理解请求的语法</li><li>401：未授权，请求要求身份验证</li><li>403：禁止访问，服务器拒绝请求</li><li>500：服务器内部错误</li><li>502：错误网关</li><li>504：网关超时</li></ul><p><strong>forward和redirect</strong></p><ul><li>forward 表示请求转发，请求转发是服务器的行为；redirect 表示重定向，重定向是客户端行为；</li><li>forward 是服务器请求资源，服务器直接访问把请求的资源转发给浏览器，浏览器根本不知道服务器的内容是从哪来的，因此它的地址栏还是原来的地址；redirect 是服务端发送一个状态码告诉浏览器重新请求新的地址，因此地址栏显示的是新的 URL；</li><li>forward 转发页面和转发到的页面可以共享 request 里面的数据；redirect 不能共享数据；</li><li>从效率来说，forward 比 redirect 效率更高。</li></ul><p><strong>Spring MVC的常用注解：</strong></p><ul><li>@Controller：用于标记某个类为控制器；</li><li>@ResponseBody ：标识返回的数据不是 html 标签的页面，而是某种格式的数据，如 JSON、XML 等；</li><li>@RestController：相当于 @Controller 加 @ResponseBody 的组合效果；</li><li>@Component：标识为 Spring 的组件；</li><li>@Configuration：用于定义配置类；</li><li>@RequestMapping：用于映射请求地址的注解；</li><li>@Autowired：自动装配对象；</li><li>@RequestHeader：可以把 Request 请求的 header 值绑定到方法的参数上。</li></ul><p><strong>拦截器的使用场景</strong></p><ul><li>日志记录</li><li>权限控制</li><li>统一安全处理</li></ul><p><strong>获取request的方式</strong></p><ol><li>从请求参数中获取</li><li>通过RequestContextHolder上下文获取request对象</li><li>通过自动注入的方式</li></ol><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><p>​        SpringBoot解决了Spring框架使用较为繁琐的问题。SpringBoot的核心思想是约定大于配置，让开发人员不需要任何XML文件，就可以像Maven整合Jar包一样，整合并使用所有框架。</p><p><strong>特性</strong></p><ul><li>秒级构建一个项目</li><li>便捷的对外输出格式</li><li>简介的安全集成策略</li><li>内嵌容器运行</li><li>强大的开发包，支持热启动</li><li>自动管理依赖</li><li>自带应用监控</li></ul><hr><p><strong>Spring、Spring Boot、Spring Cloud</strong></p><p>​        它们都是Spring里的东西。Spring Boot是在Spring框架的基础上开发而来，可以更加方便的使用Spring；Spring Cloud是依赖于Spring Boot而构建的一套微服务治理框架。</p><p><strong>Spring Boot的优势</strong></p><ul><li>开发变得简单，提供了丰富的解决方案，快速集成各种解决方案提升开发效率；</li><li>配置变得简单，提供了丰富的 Starters，集成主流开源产品往往只需要简单的配置即可；</li><li>部署变得简单，其本身内嵌启动容器，仅仅需要一个命令即可启动项目，结合 Jenkins、Docker 自动化运维非常容易实现；</li><li>监控变得简单，自带监控组件，使用 Actuator 轻松监控服务各项状态。</li></ul><p><strong>Ant、Maven、Gradle</strong></p><p>​        都是Java领域中的三大构建工具。</p><p>​        Ant是最早的工具，但是它操作复杂被淘汰、</p><p>​        Maven目的是为了解决Ant的问题，它的好处在于可以将项目过程规范化、自动化、高效化、强大的可扩展性。</p><p>​        Gradle结合了前两者的优点，但是相比Maven来讲行业使用率偏低。SpringBoot默认使用Maven。</p><p><strong>Spring Boot热部署的两种方式</strong></p><p>​        Spring Loaded、Spring-boot-devtools</p><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><p><strong>优点：</strong></p><ul><li>相比于 JDBC 需要编写的代码更少</li><li>使用灵活，支持动态 SQL</li><li>提供映射标签，支持对象与数据库的字段关系映射</li></ul><p><strong>缺点：</strong></p><ul><li>SQL 语句依赖于数据库，数据库移植性差</li><li>SQL 语句编写工作量大，尤其在表、字段比较多的情况下</li></ul><p><strong>执行流程：</strong></p><ol><li>首先加载 Mapper 配置的 SQL 映射文件，或者是注解的相关 SQL 内容。</li><li>创建会话工厂，MyBatis 通过读取配置文件的信息来构造出会话工厂（SqlSessionFactory）。</li><li>创建会话，根据会话工厂，MyBatis 就可以通过它来创建会话对象（SqlSession），会话对象是一个接口，该接口中包含了对数据库操作的增、删、改、查方法。</li><li>创建执行器，因为会话对象本身不能直接操作数据库，所以它使用了一个叫做数据库执行器（Executor）的接口来帮它执行操作。</li><li>封装 SQL 对象，在这一步，执行器将待处理的 SQL 信息封装到一个对象中（MappedStatement），该对象包括 SQL 语句、输入参数映射信息（Java 简单类型、HashMap 或 POJO）和输出结果映射信息（Java 简单类型、HashMap 或 POJO）。</li><li>操作数据库，拥有了执行器和 SQL 信息封装对象就使用它们访问数据库了，最后再返回操作结果，结束流程。</li></ol><hr><p><strong>MyBatis和Hibernate区别？</strong></p><p>​        它们都是ORM框架。</p><ul><li>灵活性：MyBatis更加灵活，可以自己写语句。</li><li>可移植性：Mybatis因为有很多自己写的SQL语句，所以可移植性较差。</li><li>开发效率：Hibernate对SQL语句进行了封装，让开发者直接使用，所以开发效率更高。</li><li>学习和使用门槛：Mybatis入门比较简单，门槛也低。</li></ul><p><strong>为什么不建议在程序中滥用事务？</strong></p><p>​        因为事务的滥用会影响数据的 QPS（每秒查询率），另外使用事务的地方还要考虑各方面回滚的方案，如缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</p><p><strong>Mybatis的一级缓存和二级缓存</strong></p><ul><li>一级缓存是 SqlSession 级别的，是 MyBatis 自带的缓存功能，并且无法关闭，因此当有两个 SqlSession 访问相同的 SQL 时，一级缓存也不会生效，需要查询两次数据库；</li><li>二级缓存是 Mapper 级别的，只要是同一个 Mapper，无论使用多少个 SqlSession 来操作，数据都是共享的，多个不同的 SqlSession 可以共用二级缓存，MyBatis 二级缓存默认是关闭的，需要使用时可手动开启，二级缓存也可以使用第三方的缓存，比如，使用 Ehcache 作为二级缓存。</li></ul><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><p><strong>应用场景？</strong></p><ul><li>应用解耦，比如，用户下单后，订单系统需要通知库存系统，假如库存系统无法访问，则订单减库存将失败，从而导致订单失败。订单系统与库存系统耦合，这个时候如果使用消息队列，可以返回给用户成功，先把消息持久化，等库存系统恢复后，就可以正常消费减去库存了。</li><li>削峰填谷，比如，秒杀活动，一般会因为流量过大，从而导致流量暴增，应用挂掉，这个时候加上消息队列，服务器接收到用户的请求后，首先写入消息队列，假如消息队列长度超过最大数量，则直接抛弃用户请求或跳转到错误页面。</li><li>日志系统，比如，客户端负责将日志采集，然后定时写入消息队列，消息队列再统一将日志数据存储和转发。</li></ul><p><strong>RabbitMQ是什么？</strong></p><p>​        高级消息队列协议，用于在分布式系统中存储转发消息。</p><p><strong>RabbitMQ的优点？</strong></p><ul><li>可靠性，RabbitMQ 的持久化支持，保证了消息的稳定性；</li><li>高并发，RabbitMQ 使用了 Erlang 开发语言，Erlang 是为电话交换机开发的语言，天生自带高并发光环和高可用特性；</li><li>集群部署简单，正是因为 Erlang 使得 RabbitMQ 集群部署变的非常简单；</li><li>社区活跃度高，因为 RabbitMQ 应用比较广泛，所以社区的活跃度也很高；</li><li>解决问题成本低，因为资料比较多，所以解决问题的成本也很低；</li><li>支持多种语言，主流的编程语言都支持，如 Java、.NET、PHP、Python、JavaScript、Ruby、Go 等；</li></ul><ul><li>插件多方便使用，如网页控制台消息管理插件、消息延迟插件等。</li></ul><p><strong>消息持久化：把消息保存到物理介质上，以防止消息的丢失。</strong></p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p><strong>MySQL执行流程</strong></p><ul><li>客户端通过连接器与MySQL服务器连接</li><li>连接成功后，先查有没有缓存，有的话直接返回缓存数据，没有的话进入分析器。</li><li>分析器对SQL语句进行分析，看SQL语句是否正确，如果错误就返回错误信息，如果正确就进入优化器。</li><li>优化器对查询语句进行优化处理，优化完成后进入执行器</li><li>执行器通过SQL语句查找数据，返回</li></ul><p><strong>查询缓存的优缺点</strong></p><p>​        优点：效率高</p><p>​        缺点：任何更新表的操作都会清空缓存，因此导致查询缓存非常容易失效</p><p><strong>InnoDB和MyISAM</strong></p><p>​        InnoDB是MySQL的默认存储引擎。</p><ul><li>InnoDB支持事务，MyISAM不支持事务</li></ul><ul><li>InnoDB 支持崩溃后安全恢复，MyISAM 不支持崩溃后安全恢复；</li><li>InnoDB 支持行级锁，MyISAM 不支持行级锁，只支持到表锁；</li><li>InnoDB 支持外键，MyISAM 不支持外键；</li><li>MyISAM 性能比 InnoDB 高；</li><li>MyISAM 支持 FULLTEXT 类型的全文索引，InnoDB 不支持 FULLTEXT 类型的全文索引，但是 InnoDB 可以使用 sphinx 插件支持全文索引，并且效果更好；</li><li>InnoDB 主键查询性能高于 MyISAM。</li></ul><p><strong>回表查询</strong></p><p>​        普通索引查询到主键索引后，回到主键索引树搜索的过程，称之为回表查询。</p><p><strong>InnoDB为什么使用B+树，而不使用B树、Hash、红黑树或二叉树？</strong></p><ul><li>B 树：不管叶子节点还是非叶子节点，都会保存数据，这样导致在非叶子节点中能保存的指针数量变少（有些资料也称为扇出），指针少的情况下要保存大量数据，只能增加树的高度，导致 IO 操作变多，查询性能变低。</li><li>Hash：虽然可以快速定位，但是没有顺序，IO 复杂度高。</li><li>二叉树：树的高度不均匀，不能自平衡，查找效率跟数据有关（树的高度），并且 IO 代价高。</li><li>红黑树：树的高度随着数据量增加而增加，IO 代价高。</li></ul><p><strong>MySQL如何处理死锁？</strong></p><ul><li>通过innodb lock wait timeout 来设置超时时间</li><li>发起死锁检测，发现死锁之后，主动回滚死锁中的某一个事务，让其他事务继续执行</li></ul><p><strong>全局锁</strong></p><p>​        全局锁就是对整个数据库实例加锁，它的典型使用场景就是做全量逻辑备份，这个时候整个库会处于完全的只读状态。</p><p><strong>全局锁的问题</strong></p><p>​        使用全局锁会使整个系统不能执行更新操作，所有的更新业务会出于等待状态；如果你是在从库进行备份，则会导致主从同步严重延迟。</p><p><strong>MySQL的性能指标</strong></p><p>​        每秒查询数，每秒处理事务数。   可以通过show status查询。</p><p><strong>表的优化策略</strong></p><ul><li>读写分离，主库负责写，从库负责读。</li><li>垂直分区，根据数据属性单独拆表甚至单独拆库。</li><li>水平分区，保持表结构不变，根据策略存储数据分片，这样每一片数据被分散到不同的表或者库中。水平拆分只是解决了单一表数据过大的问题，表数据还在同一台机器上，对于并发能力没有什么意义，因此水平拆分最好分库。另外分片事务难以解决，跨节点 join 性能较差</li></ul><p><strong>查询语句的优化</strong></p><ul><li>不做列运算，把计算都放入各个业务系统实现；</li><li>查询语句尽可能简单，大语句拆小语句，减少锁时间；</li><li>不使用 select * 查询；</li><li>or 查询改写成 in 查询；</li><li>不用函数和触发器；</li><li>避免 %xx 查询；</li><li>少用 join 查询；</li><li>使用同类型比较，比如 ‘123’ 和 ‘123’、123 和 123；</li><li>尽量避免在 where 子句中使用 != 或者 &lt;&gt; 操作符，查询引用会放弃索引而进行全表扫描；</li><li>列表数据使用分页查询，每页数据量不要太大。</li></ul><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>​        <strong>Redis就是内存型数据库，基于c语言。通过kv存储数据到内存中，读取速度很快。</strong></p><p><strong>应用场景</strong></p><ul><li>记录帖子点赞数、点击数、评论数</li><li>缓存近期热帖</li><li>缓存文章详情信息</li><li>记录用户会话信息</li></ul><p><strong>支持的数据类型</strong></p><p>​        String字符串，List列表，Set无序集合，ZSet有序集合，Hash哈希</p><p>​        <strong>Redis中的key最大容量是512MB</strong></p><p><strong>Redis的数据结构</strong></p><p>​        Redis的数据结构是跳跃表，跳跃表是基于链表的扩展，在普通链表的基础上增加了层的概念，层级越高元素越少，每次先从高层查找。</p><p><strong>缓存穿透</strong></p><p>​        缓存穿透是指查询一个一定不存在的数据，由于缓存中没有，因而每次需要从数据库中查询，但数据库也没有相应的数据，所以不会写入缓存，这就将导致每次请求都会去数据库查询，这种行为就叫缓存穿透。</p><p>​        解决方案：无论数据库是否能查到数据，都缓存起来。把没有数据的缓存结果的过期时间设置比较短的一个值。</p><p><strong>缓存雪崩</strong></p><p>​        指缓存由于某些原因，比如，宕机或者缓存大量过期等，从而导致大量请求到达后端数据库，进而导致数据库崩溃的情况。</p><p>​        解决方案：分析业务功能，把缓存的失效时间均匀分布。</p><p><strong>Redis切换数据库</strong></p><p>​        默认情况下客户端连接到数据库0，总共有16个，通过select 语句切换</p><p><strong>Redis的集群策略？</strong></p><p>​        增加 1 台机器作为哨兵，监控 3 台主从机器，当主节点挂机的时候，机器内部进行选举，从集群中从节点里指定一台机器升级为主节点，从而实现高可用。当主节点恢复的时候，加入到从节点中继续提供服务；</p><p><strong>Redis持久化的两种方式</strong></p><p>​        RDB，AOF</p><p>​        RDB：在指定时间间隔内，将内存中的数据集快照写入磁盘。它恢复是直接将快照读入内存。<strong>Redis会单独创建(fork)一个子进程来进行持久化，会先将数据写进一个临时文件中，等到持久化过程结束了，再用这个临时文件替换上次持久化好的文件。</strong></p><p><strong>优点：</strong></p><p> （1）如果要进行大规模数据的恢复，<strong>RDB方式要比AOF方式恢复速度要快。</strong></p><p>（2）<strong>RDB可以最大化Redis性能</strong>，父进程做的就是fork子进程，然后继续接受客户端请求，让子进程负责持久化操作，父进程无需进行IO操作。</p><p>RDB是一个非常紧凑(compact)的文件,它保存了某个时间点的数据集，非常适合用作备份，同时也非常适合用作灾难性恢复，它只有一个文件，内容紧凑，通过备份原文件到本机外的其他主机上，一旦本机发生宕机，就能将备份文件复制到redis安装目录下，通过启用服务就能完成数据的恢复。</p><p> 缺点：</p><p>  （1） RDB这种持久化方式不太适应对数据完整性要求严格的情况，因为，尽管我们可以用过修改快照实现持久化的频率，但是要持久化的数据是一段时间内的整个数据集的状态，<strong>如果在还没有触发快照时，本机就宕机了，</strong>那么对数据库所做的写操作就随之而消失了并没有持久化本地dump.rdb文件中。</p><p>（2）每次进行RDB时，父进程都会fork一个子进程，由子进程来进行实际的持久化操作，如<strong>果数据集庞大，那么fork出子进程的这个过程将是非常耗时的</strong>，就会出现服务器暂停客户端请求，将内存中的数据复制一份给子进程，让子进程进行持久化操作。</p><hr><p>​        AOF：以日志的形式记录Redis每一个写操作，将Redis执行过的所有写操作记录下来，只许追加不可以改写。</p><h4 id="Redis的AOF是如何做到持久化的呢？"><a href="#Redis的AOF是如何做到持久化的呢？" class="headerlink" title="Redis的AOF是如何做到持久化的呢？"></a>Redis的AOF是如何做到持久化的呢？</h4><p>从配置文件中，我们可以发现</p><p>appendfsync always:每修改同步，<strong>每一次发生数据变更都会持久化到磁盘上，性能较差，但数据完整性较好。</strong><br>appendfsync everysec: 每秒同步，<strong>每秒内记录操作，异步操作，如果一秒内宕机，有数据丢失。</strong><br>appendfsync no:<strong>不同步。</strong></p><h4 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h4><p>重启Redis时，如果dump.rdb与appendfsync.aof同时都存在时，Redis会自动读取appendfsync.aof文件，通过该文件中对数据库的日志操作，来实现数据的恢复。<strong>当然如果该文件被破坏</strong>，我们可以通过redis-check-aof工具来<strong>修复</strong>，如redis-check-aof –fix能修复破损的appendfsync.aof文件，<strong>当然如果dump.rdb文件有破损</strong>，我们也可以用redis-check-rdb工具来<strong>修复</strong>，如果appendfsync.aof文件破损了，是启动不客户端的，也就是无法完成数据的恢复。</p><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>当然如果AOF 文件一直被追加，这就可能导致AOF文件过于庞大。因此，为了避免这种状况，Redis新增了重写机制，<strong>当AOF文件的大小超过所指定的阈值时，Redis会自动启用AOF文件的内容压缩，只保留可以恢复数据的最小指令集，</strong>可以使用命令bgrewiteaof。</p><p>重写原理：AOF文件持续增长过大时，<strong>会fork出一条新进程</strong>来将文件重写（也是临时文件最后再rename）,遍历新进程的内存中的数据，每条记录都会有一条set语句，重写aof文件的操作，<strong>并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新aof文件</strong>，有点类似于快照。</p><p>触发机制：<strong>Redis会记录上一次重写时的AOF大小</strong>，默认配置是当AOF文件大小是<strong>上一次的一倍并且大于64m</strong>时，会触发重写机制。</p><p><strong>优点</strong><br>1  AOF有着多种持久化策略：</p><p>2AOF文件是一个只进行追加操作的日志文件，对文件写入不需要进行seek</p><p>3 <strong>Redis可以在AOF文件变得过大时，会自动地在后台对AOF进行重写</strong>：重写后的新的AOF文件包含了恢复当前数据集所需的最小命令集合。整个重写操作是绝对安全的，因为Redis在创建AOF文件的过程中，会继续将命令追加到现有的AOF文件中，即使在重写的过程中发生宕机，现有的AOF文件也不会丢失。一旦新AOF文件创建完毕，Redis就会从旧的AOF文件切换到新的AOF文见</p><p>4.AOF文件<strong>有序地保存了对数据库执行的所有写入操作</strong>。</p><p><strong>缺点</strong></p><p>1.对于相同的数据集来说，<strong>AOF文件要比RDB文件大</strong>。</p><p>2.根据所使用的持久化策略来说，<strong>一般AOF的速度要慢与RDB。</strong>一般情况下，每秒同步策略效果较好。不使用同步策略的情况下，AOF与RDB速度一样快。</p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>​        工厂模式，抽象工厂模式，单例模式，代理模式</p><h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><p><strong>什么是JVM，有什么作用？</strong></p><p>​        JVM是Java虚拟机的缩写，是Java程序可以跨平台的基础。它的作用是加载Java程序，把字节码翻译成机器码交给CPU执行。</p><p><strong>JVM的主要组成部分</strong></p><ul><li>类加载器</li><li>运行时数据区</li><li>执行引擎</li><li>本地库接口</li></ul><p><strong>工作流程</strong></p><p>​        首先程序在执行之前先要把 Java 代码（.java）转换成字节码（.class），JVM 通过类加载器（ClassLoader）把字节码加载到内存中，但字节码文件是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine） 将字节码翻译成底层机器码，再交由 CPU 去执行，CPU 执行的过程中需要调用本地库接口（Native Interface）来完成整个程序的运行。</p><p><img src="/2020/08/28/Java%E6%80%BB%E7%BB%933/image-20200909094609119.png" alt="JVM运行流程"></p><p><strong>JVM内存划分</strong></p><ul><li>堆</li><li>本地方法栈</li><li>JVM栈</li><li>本地方法区</li><li>程序计数器</li></ul><p><strong>CMS垃圾回收器</strong></p><p>​        CMS是一种以获得最短停顿时间为目标的收集器，非常实用B/S系统。</p><p><strong>CMS的优缺点</strong></p><p>​        优点：CMS垃圾回收器使用多线程，标记清除垃圾。</p><p>​        缺点：对CPU要求敏感；无法清除浮动垃圾；垃圾回收时会产生大量空间碎片。</p><h1 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h1><p><strong>什么是跨域问题？怎么解决？</strong></p><p>​        跨域问题指的是不同站点之间，使用ajax无法相互调用的问题。跨域问题是浏览器的行为，是为了保护用户信息安全，防止恶意网站窃取数据所做的限制，如果没有跨域限制就会导致信息被随意篡改和提交。</p><p>​        解决方案</p><ul><li>jsonp</li><li>nginx请求转发，把不同站点应用配置到同一个域名下</li><li>服务端设置运行跨域访问，如果使用的是Spring框架可通过@CrossOrigin注解配置跨域</li></ul><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><ol><li><p>二分查找</p><p>​    有序数组，每次从中间比较。</p></li><li><p>斐波那契数列</p><p>​    return Fib(n-1)+Fib(n-2);</p></li><li><h4 id="一般而言，兔子在出生两个月后，就有繁殖能力，一对兔子每个月能生出一对小兔子来。如果所有兔子都不死，那么一年以后可以繁殖多少对兔子？请使用代码实现。"><a href="#一般而言，兔子在出生两个月后，就有繁殖能力，一对兔子每个月能生出一对小兔子来。如果所有兔子都不死，那么一年以后可以繁殖多少对兔子？请使用代码实现。" class="headerlink" title="一般而言，兔子在出生两个月后，就有繁殖能力，一对兔子每个月能生出一对小兔子来。如果所有兔子都不死，那么一年以后可以繁殖多少对兔子？请使用代码实现。"></a>一般而言，兔子在出生两个月后，就有繁殖能力，一对兔子每个月能生出一对小兔子来。如果所有兔子都不死，那么一年以后可以繁殖多少对兔子？请使用代码实现。</h4><p>斐波那契数列</p></li><li><p>冒泡排序</p><p>​    两层循环（0-length，1-length），两个数比较</p></li><li><p>选择排序</p><p>​    两层循环（0-length，i+1 - length），找最小值的角标，和i交换</p></li><li><p>插入排序</p><p>​    把数组分为有序数组和无序数组。每一轮从无序数组中的第一个数，向有序数组中插入。</p></li></ol><pre class=" language-java"><code class="language-java">        <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> j <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>temp <span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="7"><li><p>快排</p><p>​    选择一个基准值，小于他的放左边，大于他的放右边。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">>=</span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">>=</span>a<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                flag <span class="token operator">=</span> right<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                flag <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> start<span class="token punctuation">,</span> left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="8"><li>堆排序</li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>length<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//和左孩子比较</span>                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//和右孩子比较</span>                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            length<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>​        定义对象间一对多的关系，当一个对象的状态改变时，所有依赖于它的对象都会得到通知自动更新。</p><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p>​        将一类的接口转换为客户需要的另外一个接口，适配器模式可以让原本接口不兼容导致不能一起工作的类一起工作。</p><h1 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h1><p><img src="/2020/08/28/Java%E6%80%BB%E7%BB%933/image-20200901155953489.png" alt="遍历"></p><p>abcdefghk  根左右</p><p>bdcaehgkf  左根右</p><p>dcbhkgfea   左右根</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BitTree</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    BitTree lchild<span class="token punctuation">;</span>    BitTree rchild<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BitTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        lchild <span class="token operator">=</span> rchild <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建二叉树</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> BitTree <span class="token function">createBitTree1</span><span class="token punctuation">(</span>Scanner reader<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        BitTree root <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>reader<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitTree</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token function">createBitTree1</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token function">createBitTree1</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//递归遍历</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>BitTree root<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//前序</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//中序</span>        <span class="token comment" spellcheck="true">//System.out.println(root.data);</span>        <span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//后序</span>        <span class="token comment" spellcheck="true">//System.out.println(root.data);</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//非递归遍历</span>    <span class="token comment" spellcheck="true">//前序</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printByPre</span><span class="token punctuation">(</span>BitTree root<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>BitTree<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>BitTree<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild <span class="token operator">!=</span> null<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild <span class="token operator">!=</span> null<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//中序</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printByMid</span><span class="token punctuation">(</span>BitTree root<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>BitTree<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>BitTree<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>rchild <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild <span class="token operator">!=</span>null<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//后序</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printByBack</span><span class="token punctuation">(</span>BitTree root<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>BitTree<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>BitTree<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        BitTree visited <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token operator">==</span>null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>rchild <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild <span class="token operator">==</span> visited <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>rchild <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild <span class="token operator">==</span> visited<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                visited <span class="token operator">=</span> root<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild <span class="token operator">!=</span> null<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild <span class="token operator">!=</span> null<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    Node next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> m<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//头插</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Node <span class="token function">createNodeByHead</span><span class="token punctuation">(</span>Scanner reader<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Node head <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Node p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> p<span class="token punctuation">;</span>            m <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//尾插</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Node <span class="token function">createNodeByTail</span><span class="token punctuation">(</span>Scanner reader<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Node head <span class="token operator">=</span> null<span class="token punctuation">;</span>        Node tail <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Node p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span>null<span class="token punctuation">)</span>    head<span class="token operator">=</span>tail<span class="token operator">=</span>p<span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                tail<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                tail <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            m <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA基本知识 </category>
          
          <category> JAVA学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> JAVA </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java总结2</title>
      <link href="/2020/08/24/Java%E6%80%BB%E7%BB%932/"/>
      <url>/2020/08/24/Java%E6%80%BB%E7%BB%932/</url>
      
        <content type="html"><![CDATA[<h1 id="IO，NIO，AIO"><a href="#IO，NIO，AIO" class="headerlink" title="IO，NIO，AIO"></a>IO，NIO，AIO</h1><p><strong>IO介绍</strong></p><p>​        IO是基于流模型出现的输入输出流，比如操作文件时用输入输出流读取文件和写入文件。</p><p>​        传统IO是BIO（Block-IO）传统阻塞IO。</p><ul><li>字节流：InputStream，OutputStream</li><li>字符流：Reader，Writer</li></ul><p><img src="/2020/08/24/Java%E6%80%BB%E7%BB%932/image-20200824125213180.png" alt="java流"></p><ol><li>Writer的使用</li></ol><pre class=" language-java"><code class="language-java">Writer writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D:\\培训\\test.txt"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//true表示追加，false表示覆盖</span>writer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"方芳芳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>Reader的使用</li></ol><pre class=" language-java"><code class="language-java">Reader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"D:\\\\培训\\\\test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>String str <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>InputStream的使用</li></ol><pre class=" language-java"><code class="language-java">InputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\培训\\test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="4"><li>OutputStream的使用</li></ol><pre class=" language-java"><code class="language-java">OutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\培训\\test.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"老王"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>NIO介绍</strong></p><p>​        Java1.4出现了java.nio包，NIO（Non-Blocking IO）同步非阻塞IO。它提供了Channel、Selector、Buffer等概念，可以实现多路复用和同步非阻塞IO操作，提高了IO操作的性能。</p><table><thead><tr><th align="center">组合方       式</th><th>性能分析</th></tr></thead><tbody><tr><td align="center">同步阻塞</td><td>最常用的一种用法，使用也是最简单的，但是 I/O 性能一般很差，CPU 大部分在空闲状态</td></tr><tr><td align="center">同步非阻塞</td><td>提升 I/O 性能的常用手段，就是将 I/O 的阻塞改成非阻塞方式，尤其在网络 I/O  是长连接，同时传输数据也不是很多的情况下，提升性能非常有效。 这种方式通常能提升 I/O 性能，但是会增加 CPU 消耗，要考虑增加的 I/O  性能能不能补偿 CPU 的消耗，也就是系统的瓶颈是在 I/O 还是在 CPU 上</td></tr><tr><td align="center">异步阻塞</td><td>这种方式在分布式数据库中经常用到。例如，在往一个分布式数据库中写一条记录，通常会有一份是同步阻塞的记录，而还有两至三份是备份记录会写到其他机器上，这些备份记录通常都是采用异步阻塞的方式写 I/O；异步阻塞对网络 I/O 能够提升效率，尤其像上面这种同时写多份相同数据的情况</td></tr><tr><td align="center">异步非阻塞</td><td>这种组合方式用起来比较复杂，只有在一些非常复杂的分布式情况下使用，像集群之间的消息同步机制一般用这种 I/O  组合方式。例如，Cassandra 的 Gossip  通信机制就是采用异步非阻塞的方式。它适合同时要传多份相同的数据到集群中不同的机器，同时数据的传输量虽然不大，但是却非常频繁。这种网络 I/O  用这个方式性能能达到最高</td></tr></tbody></table><p><strong>AIO介绍</strong></p><p>​        AIO是NIO的升级，称为异步非阻塞IO，异步IO的操作基于事件和回调机制。</p><hr><p><strong>IO，NIO，AIO的区别？</strong></p><ul><li>BIO 就是传统的 java.io  包，它是基于流模型实现的，交互的方式是同步、阻塞方式，也就是说在读入输入流或者输出流时，在读写动作完成之前，线程会一直阻塞在那里，它们之间的调用是可靠的线性顺序。它的优点就是代码比较简单、直观；缺点就是 IO 的效率和扩展性很低，容易成为应用性能瓶颈。</li><li>NIO 是 Java 1.4 引入的 java.nio 包，提供了 Channel、Selector、Buffer 等新的抽象，可以构建多路复用的、同步非阻塞 IO 程序，同时提供了更接近操作系统底层高性能的数据操作方式。</li><li>AIO 是 Java 1.7 之后引入的包，是 NIO 的升级版本，提供了异步非堵塞的 IO 操作方式，因此人们叫它  AIO（Asynchronous IO），异步 IO  是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</li></ul><p>​      简单来说 BIO 就是传统 IO 包，产生的最早；NIO 是对 BIO 的改进提供了多路复用的同步非阻塞 IO，而 AIO 是 NIO 的升级，提供了异步非阻塞 IO。</p><p><strong>文件的读写</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 读取文件</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\io.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写入文件</span>Files<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"d:\\io.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"追加内容"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> StandardOpenOption<span class="token punctuation">.</span>APPEND<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>Files的常见操作？</strong></p><p>​        Files是Java1.7提供的，使得文件和文件夹的操作更加方便。常用方法如下：</p><ul><li>Files. exists()：检测文件路径是否存在</li><li>Files. createFile()：创建文件</li><li>Files. createDirectory()：创建文件夹</li><li>Files. delete()：删除一个文件或目录</li><li>Files. copy()：复制文件</li><li>Files. move()：移动文件</li><li>Files. size()：查看文件个数</li><li>Files. read()：读取文件</li><li>Files. write()：写入文件</li></ul><p><strong>不定项选择：为了提高读写性能，可以采用什么流？</strong></p><p> A：InputStream<br> B：DataInputStream<br> C：BufferedReader<br> D：BufferedInputStream<br> E：OutputStream<br> F：BufferedOutputStream</p><p>答：D、F</p><p>​        题目解析：BufferedInputStream  是一种带缓存区的输入流，在读取字节数据时可以从底层流中一次性读取多个字节到缓存区，而不必每次都调用系统底层；同理，BufferedOutputStream  也是一种带缓冲区的输出流，通过缓冲区输出流，应用程序先把字节写入缓冲区，缓存区满后再调用操作系统底层，从而提高系统性能，而不必每次都去调用系统底层方法。</p><p><strong>FileInputStream和BufferedInputStream的区别？</strong></p><p>​        FileInputStream读小文件性能更好，BufferedInputStream进行大文件操作更有优势。</p><h1 id="反射和JDK动态代理技术"><a href="#反射和JDK动态代理技术" class="headerlink" title="反射和JDK动态代理技术"></a>反射和JDK动态代理技术</h1><p>​        <strong>反射</strong></p><p>​        通过反射，可以在程序运行期间获取，检测，调用对象的属性和方法。</p><p>反射的使用场景：</p><ol><li>框架</li><li>数据库连接池</li></ol><p>​        反射获取调用类可以通过 Class.forName()，反射获取类实例要通过 newInstance()，相当于  new 一个新对象，反射获取方法要通过 getMethod()，获取到类方法之后使用  invoke() 对类方法进行调用。如果是类方法为私有方法的话，则需要通过  setAccessible(true) 来修改方法的访问限制，以上的这些操作就是反射的基本使用。</p><p>​        <strong>动态代理技术</strong></p><p>​        动态代理技术可以理解为本可以自己做的事情，交给别人去做。</p><p>动态代理的使用场景：</p><ol><li>面向切面编程AOP</li><li>封装一些AOP调用，也可以通过代理实现一个全局拦截器。</li></ol><p><strong>JDK动态代理技术</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The dog is eating"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The cat is eating"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// JDK 代理类</span><span class="token keyword">class</span> <span class="token class-name">AnimalProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代理对象</span>    <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取得代理对象</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方法调用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// JDK 动态代理调用</span>    AnimalProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimalProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Animal dogProxy <span class="token operator">=</span> <span class="token punctuation">(</span>Animal<span class="token punctuation">)</span> proxy<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dogProxy<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>JKD动态代理技术只能代理实现接口的类。</p><p><strong>cglib字节码增强技术</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Panda</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The panda is eating"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CglibProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代理对象</span>    <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置父类为实例类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 回调方法</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建代理对象</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行方法调用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// cglib 动态代理调用</span>    CglibProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Panda panda <span class="token operator">=</span> <span class="token punctuation">(</span>Panda<span class="token punctuation">)</span>proxy<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Panda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    panda<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        由以上代码可以知道，cglib 的调用通过实现 MethodInterceptor 接口的 intercept 方法，调用  invokeSuper 进行动态代理的。它可以直接对普通类进行动态代理，并不需要像 JDK 代理那样，需要通过接口来完成，值得一提的是  Spring 的动态代理也是通过 cglib 实现的。</p><p>​        <strong>注意</strong>：cglib 底层是通过子类继承被代理对象的方式实现动态代理的，因此代理类不能是最终类（final），否则就会报错 java.lang.IllegalArgumentException: Cannot subclass final class xxx。</p><hr><p><strong>动态代理解决了什么问题？</strong></p><p>​        实现代码之间的解耦。</p><p><strong>动态代理技术和反射机制的联系？</strong></p><p>​        反射机制可以实现动态代理技术，但是动态代理技术不仅可以通过反射机制实现，也可以通过cglib字节码增强技术，ASM（一个短小精悍的字节码操作框架）等实现。</p><p><strong>以下描述错误的是？</strong></p><p>A：cglib 的性能更高<br>B：Spring 中有使用 cglib 来实现动态代理<br>C：Spring 中有使用 JDK 原生的动态代理<br>D：JDK 原生动态代理性能更高</p><p>选D。  JDK动态代理技术的性能比字节码增强技术的性能低，Spring动态代理的实现方式有两种：JDK动态代理技术和字节码增强技术。</p><p><strong>cglib可以代理所有类吗？</strong></p><p>​        cglib不能代理final修饰的类，因为cglib需要继承被代理类。</p><p><strong>JDK动态代理技术和cglib的区别？</strong></p><p>​        JDK动态代理技术：被代理类必须实现接口，不需要任何依赖，可以平滑的支持JDK版本的升级。</p><p>​        cglib：被代理类不需要实现接口，需要添加依赖，性能更高。</p><p><strong>为什么JDK动态代理技术必须实现接口？</strong></p><p>​        因为JDK动态代理技术的实现方法newProxyInstance()里有两个参数，一个是类加载器，另一个是实现的接口列表，所以必须实现接口才可以。</p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>​        <strong>线程</strong></p><p>​        线程是程序运行的执行单元，依托于进程存在。一个进程中可以包含多个线程，多线程可以共享一块内存空间和一组系统资源，因此线程之间的切换更加节省资源，更加轻量化。</p><p>​        <strong>进程</strong></p><p>​        进程是程序的一次动态执行，是系统进行资源分配和调度的基本单位，是操作系统运行的基础，通常每一个进程都拥有自己独立的内存空间和系统资源。简单来说，进程可以被当做是一个正在运行的程序。</p><p><strong>为什么需要线程？</strong></p><p>​        因为程序的运行必须依靠进程，线程又是进程的基本执行单元。</p><p><strong>多线程？</strong></p><p>​        提高程序的执行性能。</p><p><strong>线程的创建？</strong></p><ol><li>继承Thread，重写run()方法</li><li>实现Runnable，实现run()方法</li><li>实现Callable，实现run()方法</li></ol><pre class=" language-java"><code class="language-java">Callable<span class="token operator">:</span>        MyTaskByCallable task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTaskByCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FutureTask<span class="token operator">&lt;</span>String<span class="token operator">></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        FutureTask<span class="token operator">&lt;</span>String<span class="token operator">></span> futureTask1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask1<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>wait()</strong></p><p>​        使用wait()实现线程等待。</p><p>​        当使用wait()时，必须持有当前对象的锁，否则会返回异常。</p><p><strong>join()</strong></p><p>​        当前线程执行完成之后才能继续执行下面的语句。</p><p><strong>yiled()</strong></p><p>​        线程让步，交出CPU的执行权。yield 方法是让同优先级的线程有执行的机会，但不能保证自己会从正在运行的状态迅速转换到可运行的状态。</p><p><strong>interrupted()</strong></p><p>​        中断线程</p><p><strong>线程优先级</strong></p><p>​        setPriority()设置线程优先级，1—10。</p><p><strong>死锁</strong></p><p><img src="/2020/08/24/Java%E6%80%BB%E7%BB%932/image-20200824173526019.png" alt="死锁"></p><p>​        死锁是指两个或两个以上的线程，由于竞争资源或者由于彼此通信造成的一种阻塞现象，如果无外力介入，它们都无法推进下去。</p><p>​        线程A独占锁1，线程B独占锁2，当线程A尝试去获取锁2，线程B尝试去获取锁1时，由于两个线程各自占有对方的锁，就会一直阻塞下去。</p><hr><p><strong>线程和进程的区别？</strong></p><p>​        从本质上来说，线程是进程的实际执行单元，一个程序至少有一个进程，一个进程至少有一个线程，它们的区别主要体现在以下几个方面：</p><ul><li>进程间是独立的，不能共享内存空间和上下文，而线程可以；</li><li>进程是程序的一次执行，线程是进程中执行的一段程序片段；</li><li>线程占用的资源比进程少。</li></ul><p><strong>线程的常用方法？</strong></p><ul><li>currentThread()：返回当前正在执行的线程引用</li><li>getName()：返回此线程的名称</li><li>setPriority()/getPriority()：设置和返回此线程的优先级</li><li>isAlive()：检测此线程是否处于活动状态，活动状态指的是程序处于正在运行或准备运行的状态</li><li>sleep()：使线程休眠</li><li>join()：等待线程执行完成</li><li>yield()：让同优先级的线程有执行的机会，但不能保证自己会从正在运行的状态迅速转换到可运行的状态</li><li>interrupted()：是线程处于中断的状态，但不能真正中断线程</li></ul><p><strong>wait()和sleep()的区别？</strong></p><p>​        wait() 和 sleep() 的区别主要体现在以下三个方面。</p><ul><li>存在类的不同：sleep() 来自 Thread，wait() 来自 Object。</li><li>释放锁：sleep() 不释放锁；wait() 释放锁。</li><li>用法不同：sleep() 时间到会自动恢复；wait() 可以使用 notify()/notifyAll() 直接唤醒。</li></ul><p><strong>守护线程：</strong></p><p>​        守护线程的优先级是最低的，它通常为其他线程提供服务，通过setDaemon方法设置。例如JVM中的垃圾回线程。</p><p><strong>线程的状态？</strong></p><ul><li>NEW：尚未启动</li><li>RUNNABLE：正在执行中</li><li>BLOCKED：阻塞（被同步锁或者 IO 锁阻塞）</li><li>WAITING：永久等待状态</li><li>TIMED_WAITING：等待指定的时间重新被唤醒的状态</li><li>TERMINATED：执行完成</li></ul><p><strong>start()和run()的区别？</strong></p><p>​        start() 方法用于启动线程，run() 方法用于执行线程的运行时代码。run() 可以重复调用，而 start() 只能调用一次。</p><p><strong>产生死锁的条件？</strong></p><ul><li>互斥条件：一个资源每次只能被一个线程使用；</li><li>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放；</li><li>不剥夺条件：线程已获得的资源，在末使用完之前，不能强行剥夺；</li><li>循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系；</li></ul><p><strong>预防死锁？</strong></p><ul><li>尽量使用 tryLock(long timeout, TimeUnit unit) 的方法 (ReentrantLock、ReentrantReadWriteLock)，设置超时时间，超时可以退出防止死锁；</li><li>尽量使用 Java. util. concurrent 并发类代替自己手写锁；</li><li>尽量降低锁的使用粒度，尽量不要几个功能用同一把锁；</li><li>尽量减少同步的代码块。</li></ul><p><strong>thread.wait()和thread.wait(0)</strong></p><p>​        两个方法效果相同，但是wait()方法内部是调用wait(0)方法。wait()方法表示进入等待状态，让出当前的锁和CPU资源，并且只有其他线程执行notify()和notifyall()方法才能唤醒该线程。</p><p><strong>线程的调度策略？</strong></p><p>​        线程调度器选择优先级最高的线程运行，但是如果发生以下情况，就会终止线程的运行：</p><ul><li>线程体中调用了 yield() 方法，让出了对 CPU 的占用权；</li><li>线程体中调用了 sleep() 方法，使线程进入睡眠状态；</li><li>线程由于 I/O 操作而受阻塞；</li><li>另一个更高优先级的线程出现；</li><li>在支持时间片的系统中，该线程的时间片用完。</li></ul><p><strong>总结</strong></p><p>​        程序的运行依靠的是进程，而进程的执行依靠的是多个线程，多线程之间可以共享一块内存和一组系统资源，而多进程间通常是相互独立的。线程的创建有三种方式：继承 Thread 重写 run 方法，实现 Runnable 或 Callable 接口，其中 Callable  可以允许线程的执行有返回值，JDK 8 中也可以使用 Lambda 来更加方便的使用线程，线程是有优先级的，优先级从 1-10  ，数字越大优先级越高，也越早被执行。如果两个线程各自拥有一把锁的同时，又同时等待获取对方的锁，就会造成死锁。可以降低锁的粒度或减少同步代码块的范围或使用 Java 提供的安全类，来防止死锁的产生。</p><h1 id="线程池之ThreadPoolExecutor"><a href="#线程池之ThreadPoolExecutor" class="headerlink" title="线程池之ThreadPoolExecutor"></a>线程池之ThreadPoolExecutor</h1><p>​        线程池：把一个或多个线程通过统一的方式调度和重复使用的技术，减少性能的损耗。</p><p><strong>为什么使用线程池？</strong></p><ul><li><p>可重复使用已有线程，避免对象创建、消亡和过度切换的性能开销。</p></li><li><p>避免创建大量同类线程所导致的资源过度竞争和内存溢出的问题。</p></li><li><p>支持更多功能，比如延迟任务线程池（newScheduledThreadPool）和缓存线程池（newCachedThreadPool）等。</p><p>​    在Java中，线程池的概念是Executor这个接口，具体实现类为ThreadPoolExcutor。</p></li></ul><p><strong>ThreadPoolExecutor的参数？</strong></p><ol><li><p>int corePoolSize：该线程池中核心线程数的最大值</p><p>​    <strong>核心线程：</strong>线程池新建线程的时候，如果当前线程数小于核心线程数，那么会创建核心线程。如果超过corePoolSize，那么会创建非核心线程。核心线程默认情况下会一直存活在线程池中，即使它什么也不做。</p><p>​    如果指定allowCoreThreadTimeOut的属性为true，那么核心线程如果闲置状态的话，超过一定时间就会被销毁。</p></li><li><p>int maximamPoolSize：该线程池中线程总数的最大值。</p><p>​    线程总数=核心线程数+非核心线程数</p></li><li><p>long keepAliveTime：非核心线程的闲置存活时间</p><p>​    一个非核心线程，如果闲置超过该时间，该线程就会被销毁。如果allowCoreThreadTimeOut设置为true，那么该时间也会作用在核心线程上。</p></li><li><p>TimeUnit unit：闲置存活时间的单位</p><p>​    TimeUnit是一个枚举类型。微毫秒，微秒，毫秒，s，min，hour，days</p></li><li><p>BlockingQueue workQueueu：该线程池中的任务队列：维护着等待执行的Runnable对象</p><p>​    当所有的核心线程都在运作时，新添加的任务会添加到这个队列，如果队列满了，则新建非核心线程去执行任务。常见的workQueue类型：</p><p>​    <strong>SynchronousQueue：</strong>该队列会直接提交收到的任务，所以为了保证线程数不能达到maximumPoolSize，一般会将该属性设置为Integer.MAX_VALUE。</p><p>​    <strong>LinkedBlockingQueue：</strong>接受到任务时，先判断核心线程数，创建或者把任务放到队列中，因为该队列是无限大的，所以会导致maximumPoolSize失效。</p><p>​    <strong>ArrayBlockingQueue：</strong>可以限定队列的长度，当接受到任务时，判断核心线程数，创建，或者把任务放入队列，如果队列满了，创建非核心线程执行任务，如果队列满了，线程总数也满了，则会发生错误。</p><p>​    <strong>DelayQueue：</strong>队列内的元素必须实现Delay接口，所以当一个任务传入队列时，只有达到了指定的时间，才会被执行。</p></li><li><p>ThreadFactory：为线程池创建一个线程工厂。</p></li><li><p>rejectedExecutorHandler</p><p>​    线程池中任务队列超过最大值的拒绝策略，rejectedExecutorHandler是一个接口，它里面只有一个方法，可以在这个方法中添加超过队列最大值的处理事件。</p><p>​    ThreadPoolExecutor中提供了四种默认的拒绝策略：</p></li></ol><ul><li>new ThreadPoolExecutor.DiscardPolicy()：丢弃掉该任务，不进行处理</li><li>new ThreadPoolExecutor.DiscardOldestPolicy()：丢弃队列里最近的一个任务，并执行当前任务</li><li>new ThreadPoolExecutor.AbortPolicy()：直接抛出 RejectedExecutionException 异常</li><li>new ThreadPoolExecutor.CallerRunsPolicy()：既不抛弃任务也不抛出异常，直接使用主线程来执行此任务</li></ul><p><strong>向线程池添加任务</strong></p><p>​        ThreadPoolExecutor.execute(Runnable task)提交任务</p><p><strong>ThreadPoolExecutor的策略</strong></p><p>​        当一个任务被添加进线程池时：</p><ol><li>线程数量未达到核心线程数，创建核心线程执行任务。</li><li>达到核心线程数，添加进任务队列。</li><li>队列已满，新建线程（非核心线程）执行任务。</li><li>队列已满，线程数也满，根据拒绝策略调用逻辑。</li></ol><p><strong>常见的四种线程池？</strong></p><p>​        Java通过Executors提供了四种核心线程池，这四种线程池都是直接或间接配置ThreadPoolExecutor的参数实现的。</p><ul><li><strong>可缓存线程池CachedThreadPool()</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                      60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol><li>没有核心线程，线程数无限制。</li><li>在创建任务时，若有空闲线程，直接复用，若无，则创建线程。</li><li>闲置状态的线程超过60秒，就会被移除。</li></ol><ul><li><strong>定长线程池FixedThreadPool</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                  0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol><li>核心线程数等于总线程数，所以默认情况下，线程不会销毁。</li><li>提交了任务，如果有闲置线程，也不会复用，会创建一个新线程。之后会创建线程，添加任务到队列中。</li></ol><ul><li><strong>单线程池SingleThreadPool</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol><li>有且只有一个线程执行任务。</li><li>所有任务按照顺序执行，遵循队列的入队出队规则。</li></ol><ul><li><strong>延时线程池ScheduledThreadPool</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService <span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ScheduledThreadPoolExecutor():public ScheduledThreadPoolExecutor(int corePoolSize) &amp;#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>          DEFAULT_KEEPALIVE_MILLIS<span class="token punctuation">,</span> MILLISECONDS<span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        DEFAULT_KEEPALIVE_MILLIS默认为10秒。</p><ol><li>不仅设置了核心线程数，还设置了最大线程数为Integer.MAX_VALUE。</li><li>唯一一个可以延时执行和周期执行任务的线程池。</li></ol><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/*         * 延时3s后执行任务         */</span>        pool4<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 延时3s后执行任务，当任务开始执行的时候过7s再次执行         */</span>        pool4<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 延时3s后执行任务，当任务结束后，过7s再次执行         */</span>        pool4<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p><strong>单线程延时线程池SingleThreadScheduledExecutor</strong></p><p>​    其实就是一个单线程的延时线程池</p></li><li><p><strong>并行线程池WorkStealingPool</strong></p><p>​    Java8新增的线程池，如果不指定任</p><p>何参数，则以当前机器处理器个数作为线程个数，此线程池并行处理任务，不保证执行顺序。</p></li></ul><p><strong>ThreadFactory就是一个接口，用来创建线程。</strong></p><hr><p><strong>submit()和execute()</strong></p><ol><li>execute()传入的是Runnable，submit()传入的是Callable</li><li>execute不能接受返回值，submit可以接收返回值。</li></ol><p><strong>线程池关闭</strong></p><ul><li>shutdown()：不会立刻中止线程池，需要等所有任务队列中的任务都执行完才会中止。</li><li>shutdownNow()：立刻中止线程池，线程池的状态变为STOP状态，并停止所有正在执行的任务，返回未执行的任务。</li></ul><p><strong>ThreadPoolExecutor的方法</strong></p><ul><li>submit()/execute()：执行线程池</li><li>shutdown()/shutdownNow()：终止线程池</li><li>isShutdown()：判断线程是否终止</li><li>getActiveCount()：正在运行的线程数</li><li>getCorePoolSize()：获取核心线程数</li><li>getMaximumPoolSize()：获取最大线程数</li><li>getQueue()：获取线程池中的任务队列</li><li>allowCoreThreadTimeOut(boolean)：设置空闲时是否回收核心线程</li></ul><p><strong>ThreadPoolExecutor VS Executors</strong></p><p>​        ThreadPoolExecutor是传统的创建线程池的方式 ，Executors提供了更多类型的线程池类型。但是不推荐使用Executors创建线程池。</p><p>​        使用传统的方式可以让读者更加明确线程池的运行规则，规避资源耗尽的风险。</p><p>​        Executors的弊端如下：</p><ul><li>定长线程池和单线程线程池，它俩的队列长度为Integer.MAX_VALUE，可能会堆积大量的请求，从而导致OOM</li><li>可缓存线程池和延时线程池，它俩运行创建的线程数量为Integer.MAX_VALUE，可能会创建大量的线程，造成OOM</li></ul><p><strong>单线程池的意义？</strong></p><p>​        单线程线程池提供了队列功能，如果有多个任务会排队执行，可以保证任务执行的顺序性。单线程线程池也可以重复利用已有线程，减低系统创建和销毁线程的性能开销。</p><p><strong>总结</strong></p><p>​        Executors 可以创建 6 种不同类型的线程池，其中 newFixedThreadPool()  适合执行单位时间内固定的任务数，newCachedThreadPool()  适合短时间内处理大量任务，newSingleThreadExecutor() 和  newSingleThreadScheduledExecutor() 为单线程线程池，而  newSingleThreadScheduledExecutor() 可以执行周期性的任务，是  newScheduledThreadPool(n) 的单线程版本，而 newWorkStealingPool() 为 JDK 8  新增的并发线程池，可以根据当前电脑的 CPU 处理数量生成对比数量的线程池，但它的执行为并发执行不能保证任务的执行顺序。</p><h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>​        ThreadLocal用于解决多线程之间的数据隔离问题。也就是说ThreadLocal会为每一个线程创建一个单独的变量副本。</p><p><strong>ThreadLocal的应用场景</strong></p><ul><li><p>用来管理Session，因为每个人的信息是不一样的。</p></li><li><p>数据库连接，为每一个进程分配一个独立的资源。</p></li><li><p>还被用于Spring的事务管理器中</p></li></ul><p><strong>ThreadLocal的内存溢出原理</strong></p><p>​        ThreadLocal并不存储数据，而是依靠ThreadLocalMap存储数据，ThreadLocalMap中有一个Entry数组，数组通过KV的形式对数据进行存储，其中K就是ThreadLocal本身，V就是要存储的值。</p><p>​        如果 ThreadLocal 没有被直接引用（外部强引用），在 GC（垃圾回收）时，由于 ThreadLocalMap 中的 key  是弱引用，所以一定就会被回收，这样一来 ThreadLocalMap 中就会出现 key 为 null 的  Entry，并且没有办法访问这些数据，如果当前线程再迟迟不结束的话，这些 key 为 null 的 Entry 的 value  就会一直存在一条强引用链：Thread Ref -&gt; Thread -&gt; ThreaLocalMap -&gt; Entry  -&gt; value 并且永远无法回收，从而造成内存泄漏。</p><p>​        每次使用完ThreadLocal之后，调用remove方法移除无用的数据。</p><hr><p><strong>ThreadLocal为什么是线程安全的？</strong></p><p>​        ThreadLocal为每一个维护变量的副本，把共享数据的可见范围限制在同一个线程之内，因此ThreadLocal是线程安全的，每个线程都有属于自己的变量。</p><p><strong>如何共享数据？</strong></p><p>​        使用ThreadLocal的子类InheritableThreadLocal可以天然的支持多线程间的信息共享。</p><p><strong>ThreadLocal和Synchonized的区别？</strong></p><p>​        ThreadLocal 和 Synchonized 都用于解决多线程并发访问，防止任务在共享资源上产生冲突，但是 ThreadLocal 与  Synchronized 有本质的区别，Synchronized  用于实现同步机制，是利用锁的机制使变量或代码块在某一时刻只能被一个线程访问，是一种 “以时间换空间” 的方式；而 ThreadLocal  为每一个线程提供了独立的变量副本，这样每个线程的（变量）操作都是相互隔离的，这是一种 “以空间换时间” 的方式。</p><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><p><strong>synchronized</strong></p><p>​        synchronized是Java提供的同步机制，当一个线程正在执行synchronized修饰的代码块时，其他线程只能阻塞等待该线程执行完才能继续执行。</p><p>​        synchronized的使用：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 修饰代码块</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// do something</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修饰方法</span><span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// do something</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        实现原理：</p><p>​        本质是通过进入和退出的Monitor对象来实现线程安全的。</p><p>​        JVM采用monitorenter和monitorexit两个指令实现同步，一个加锁，一个释放锁。</p><p><strong>ReentrantLock使用</strong></p><pre class=" language-java"><code class="language-java">Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>尝试获取锁</strong></p><pre class=" language-java"><code class="language-java">lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回Boolean</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span>TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//尝试一段时间内获取锁</span></code></pre><p><strong>ReentrantLock的注意事项</strong></p><p>​        使用Lock必须记得释放锁，不然该锁会被永久占用。</p><hr><p><strong>ReentrantLock的常用方法</strong></p><ul><li>lock()：用于获取锁</li><li>unlock()：用于释放锁</li><li>tryLock()：尝试获取锁</li><li>getHoldCount()：查询当前线程执行 lock() 方法的次数</li><li>getQueueLength()：返回正在排队等待获取此锁的线程数</li><li>isFair()：该锁是否为公平锁</li></ul><p><strong>ReentrantLock的优势</strong></p><p>​        ReentrantLock具备非阻塞方式获取锁的特性，使用tryLock()方法，使用tryLock(Time,Unit)方法还可以获取一段时间内的锁。ReentrantLock还可以中断获得的锁，使用lockInterruptibly()方法，当获取锁之后，如果线程被中断，则会抛出异常并释放当前获得的锁。</p><p><strong>创建公平锁</strong></p><p>​        new ReentrantLock(true)</p><p><strong>公平锁和非公平锁</strong></p><p>​        公平锁指线程获取锁是按照加锁顺序来的，非公平锁指强锁机制，先lock()的线程不一定先获取锁。</p><p><strong>ReentrantLock 中 lock() 和 lockInterruptibly() 有什么区别？</strong></p><p>​        lock() 和 lockInterruptibly() 的区别在于获取线程的途中如果所在的线程中断，lock() 会忽略异常继续等待获取线程，而 lockInterruptibly() 则会抛出 InterruptedException 异常。</p><p><strong>synchronized和ReentrantLock的区别</strong></p><ul><li><p>ReentrantLock使用起来比较灵活，但是必须有释放锁的配合动作。</p></li><li><p>ReentrantLock必须手动加锁，释放锁。synchronized不需要手动开启和释放锁。</p></li><li><p>ReentrantLock只适用于代码块锁，而synchronized可用于修饰方法，代码块等；</p></li><li><p>ReentrantLock的性能略高于synchronized。</p></li></ul><p><strong>synchornized如何实现锁升级？</strong></p><p>​        在锁对象的对象头里面有一个 threadid 字段，在第一次访问的时候 threadid 为空，JVM（Java 虚拟机）让其持有偏向锁，并将  threadid 设置为其线程 id，再次进入的时候会先判断 threadid 是否尤其线程 id  一致，如果一致则可以直接使用，如果不一致，则升级偏向锁为轻量级锁，通过自旋循环一定次数来获取锁，不会阻塞，执行一定次数之后就会升级为重量级锁，进入阻塞，整个过程就是锁升级的过程。</p><h1 id="并发包中的高级同步工具"><a href="#并发包中的高级同步工具" class="headerlink" title="并发包中的高级同步工具"></a>并发包中的高级同步工具</h1><p>java.utils.concurrent (JUC)</p><ul><li>提供了线程池的创建类ThreadPoolExecutor，Executors等；</li><li>提供了各种锁，如Lock，ReentrantLock等；</li><li>提供了各种线程安全的数据结构，如ConcurrentHashMap，LinkedBlockingQueue等；</li><li>提供了更加高级的线程同步结构，如CountDownLatch、CyclicBarrier、Semaphore 等。</li></ul><p><strong>CountDownLatch</strong></p><p>​        CountDownLatch(闭锁)可以看作一个只能做减法的计数器，可以让一个或多个线程等待执行。</p><p>​        两个重要的方法：</p><ul><li>countDown()：使计数器减1；</li><li>await()：当计数器不为0时，则调用该方法的线程阻塞，当计数器为0时，唤醒等待的一个或多个线程。</li></ul><p><strong>CyclicBarrier</strong></p><p>​        CyclicBarrier（循环屏障）通过它可以实现一组线程等待满足某个条件后同时进行。</p><p>​        它的构造方法为 <code>CyclicBarrier(int parties,Runnable barrierAction)</code>  其中，parties 表示有几个线程来参与等待，barrierAction 表示满足条件之后触发的方法。CyclicBarrier 使用 await() 方法来标识当前线程已到达屏障点，然后被阻塞。</p><p>**Semaphore **</p><p>​        Semaphore （信号量）用于管理多线程中控制资源的访问与使用。</p><p>​        Semaphore 就好比停车场的门卫，可以控制车位的使用资源。比如来了 5 辆车，只有 2 个车位，门卫可以先放两辆车进去，等有车出来之后，再让后面的车进入。</p><p><strong>Phaser</strong></p><p>​        Phaser(移加器)是JDK 7 提供的，它的功能是等待所有线程到达之后，才继续或者开始进行新的一组任务。</p><h1 id="锁和CAS"><a href="#锁和CAS" class="headerlink" title="锁和CAS"></a>锁和CAS</h1><p>​        <strong>乐观锁和悲观锁</strong></p><p>​        乐观锁和悲观锁不是具体的“锁”，而是一种并发编程的基本概念。最早出现在数据库的设计中，后来逐渐倍Java的并发包所引入。</p><ul><li><p>悲观锁</p><p>​    悲观锁认为对于同一个数据的并发操作，一定会发生修改，哪怕没有被修改，也会认为被修改了。因此对于同一个数据的并发操作，悲观锁采取加锁的形式，悲观的认为，不加锁的并发操作一定会出问题。</p></li><li><p>乐观锁</p><p>​    乐观锁在获取数据时，并不担心数据被修改，每次获取数据时也不会加锁，只是在更新时，通过判断现有的数据是否和原数据一致来判断数据是否被其他线程操作，如果没被其他线程修改，则不进行数据更新，如果被其他线程修改则进行数据更新。</p></li></ul><p><strong>公平锁和非公平锁</strong></p><p>​        根据线程获取锁的抢占机制，分为公平锁和非公平锁。</p><ul><li><p>公平锁</p><p>​    公平锁是指多个线程按照申请锁的顺序来获取锁。</p></li><li><p>非公平锁</p><p>​    非公平锁是指多个线程获取锁的顺序并不是按照申请锁的顺序，而是通过抢占的方式去获取锁。</p><p>​    ReentrantLock提供了创建两种锁的方式：</p><p>new ReentrantLock(true/false);    // 公平锁/非公平锁</p><p>​    如果构造函数不传入参数，默认为非公平锁。</p></li></ul><p><strong>独占锁和共享锁</strong></p><p>​        根据锁能否被多个线程持有，可以分为独占锁和共享锁。</p><ul><li><p>独占锁</p><p>​    独占锁是指任何时候都只能有一个线程能执行资源操作。</p></li><li><p>共享锁</p><p>​    共享锁是指可以同时被多个线程读取，但只能被一个线程修改。比如ReentrantReadWriteLock就是共享锁的实现方式，它允许一个线程进行写操作，其他线程进行读操作。</p></li></ul><p><strong>可重入锁</strong></p><p>​        可重入锁指的是该线程获取了该锁之后，可以无限次的进入该锁锁住的代码。</p><p><strong>自旋锁</strong></p><p>​        自旋锁是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去获取锁，这样的好处是减少线程上下文切换的损耗，缺点是会消耗CPU。</p><p><strong>偏向锁</strong></p><p>​        偏向锁会偏向于第一个获得它的线程。为了让线程获得锁的代价更低。</p><p><strong>MySQL间隙锁</strong></p><p>​        间隙锁是一个在索引记录之间的间隙上的锁。是innodb在可重复度提交下为了解决幻读问题引入的锁机制。它是为了保证在某个间隙下的数据在锁定情况下不会发生任何变化。</p><p><strong>CAS和ABA</strong></p><p>​        CAS(Compare and Swap)比较并交换，是一种乐观锁的实现，是用非阻塞算法来代替锁定，java.utils.concurrent包下的AtomicInteger 就是借助CAS来实现的。</p><p>​        著名的ABA问题就是CAS引起的。</p><p>​        线程A查询过一个数据为100，线程B在线程A下一次查询之前+50 -50，线程A查询结果还是100，觉得数据没有改变。</p><p>​        ABA问题描述：</p><ul><li><p>线程一：取款，获取原值 200 元，与 200 元比对成功，减去 100 元，修改结果为 100 元。</p></li><li><p>线程二：取款，获取原值 200 元，阻塞等待修改。</p></li><li><p>线程三：转账，获取原值 100 元，与 100 元比对成功，加上 100 元，修改结果为 200 元。</p></li><li><p>线程二：取款，恢复执行，原值为 200 元，与 200 元对比成功，减去 100 元，修改结果为 100 元。</p><p>​    常见解决ABA的方式：加版本号，来区分值是否有变动。</p><p>​    Java 1.5 提供了AtomicStampedReference原子引用变量，通过添加版本号解决ABA问题。</p></li></ul><hr><p><strong>synchronized是哪种锁的实现？为什么？</strong></p><p>​        synchronized是悲观锁的实现。因为synchronized修饰的代码，每次执行时都会进行加锁操作，同时只允许一个线程进行操作。</p><p><strong>synchronized是公平锁还是非公平锁？</strong></p><p>​        synchronized使用的是非公平锁，并且不可设置。这是因为非公平锁的吞吐量大于公平锁，并且是主流操作系统线程调度的基本选择。</p><p><strong>为什么非公平锁的吞吐量大于公平锁？</strong></p><p>​        比如A占用锁，B等待被唤醒，这时C来申请锁，如果是公平锁C就要排在B后面，但是非公平锁可以让C先用，当B被唤醒之前C就已近使用完成了，从而减少了C等待和唤醒之间的消耗。</p><p><strong>volatile的作用？</strong></p><p>​        volatile是JVM提供的最轻量级同步机制。</p><p>​        当变量被定义成volatile之后，具备两种特性：</p><ul><li><p>保证此变量对所有线程的可见性，当一条线程修改了这个变量的值，改的新值对于其他线程是可见的。（可以立即得知）</p></li><li><p>禁止指令重排序优化，普通变量仅仅能保证在该方法执行过程中正确结果，但是不保证程序代码的执行顺序。</p></li></ul><p><strong>volatile和synchronized的区别</strong></p><p>​    synchronized既能保证可见性，又能保证原子性。而volatile只能保证可见性，无法保证原子性。比如i++是volatile修饰会有线程安全的问题。</p><p><strong>CAS如何实现？</strong></p><p>​        通过Java Native Interface的代码实现，比如在windows系统CAS就是借助C语言来调用CPU底层指令实现的。</p><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> JAVA基本知识 </category>
          
          <category> JAVA学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> JAVA </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java总结</title>
      <link href="/2020/08/18/Java%E6%80%BB%E7%BB%93/"/>
      <url>/2020/08/18/Java%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/08/18/Java%E6%80%BB%E7%BB%93/Fi8hRjU7MamV76mQsmGgPZLcmrqg" alt="框架"></p><h1 id="Java程序是怎么运行的？"><a href="#Java程序是怎么运行的？" class="headerlink" title="Java程序是怎么运行的？"></a>Java程序是怎么运行的？</h1><p><strong>Q/A:  JDK和Java的区别？</strong></p><p>​        JDK是Java开发工具包，里面包括：JRE（Java运行环境），JVM（Java虚拟机）等。</p><p>​        Java是一种开发语言。</p><p><strong>Q/A:  Java程序是怎么运行的？</strong></p><ol><li>先把Java代码编译成字节码，也就是.java编译成.class。这个过程的大致流程是：Java源代码–&gt;词法分析器–&gt;语法分析器–&gt;语义分析器–&gt;字节码生成器–&gt;字节码，其中任何一个节点执行失败就会造成编译失败。</li><li>把class文件放到Java虚拟机，这个虚拟机通常是Oracle自带的Hotspot JVM。</li><li>JVM通过类加载器（Class Loader）装载class文件。</li><li>类加载完成后，会进行字节码校验，字节码校验之后JVM解释器会把字节码翻译成机器码交给操作系统执行。但不是所有的代码都是解释执行的，JVM提供了动态编译器（JIT），它能够在运行时将热点代码编译成机器码，这个时候字节码就变成了编译执行。</li></ol><p><img src="/2020/08/18/Java%E6%80%BB%E7%BB%93/FvSP3G2xXR676FoIvsz-0naYLP2I" alt="Java程序运行过程"></p><p><strong>Q/A:  Java虚拟机是如何判定热点代码的？</strong></p><ul><li><p>基于采样的热点判定</p><p>​    虚拟机会周期性检查各个线程的栈顶，若某些方法经常出现在栈顶，那这些方法就是“热点方法”。优点：简单。缺点：容易收到外界因素的影响。</p></li><li><p>基于计数器的热点判定</p><p>​    给每个方法、代码块建立一个计数器，统计它们的执行次数。当执行次数超过一定的阀值，就会判定它们是热点方法。</p><p>​    JVM使用的是基于计数器的热点判定方法。它使用了两种技术器：方法调用计数器和回边计数器，当到达一定的阀值就会触发JIT编译。</p><p>​    方法调用计数器：在client的阀值是1500，Server是10000次，可以通过虚拟机参数设置。但是JVM还存在热度衰减，时间段内方法的调用次数减少，计数器就减小。</p><p>​    回边计数器：统计方法中循环体的执行次数。</p></li></ul><hr><p>相关面试题：</p><p><strong>Q/A： Java语言有哪些特点？</strong></p><ul><li>面向对象</li><li>跨平台</li><li>执行性能好，效率高</li><li>有大量API扩展</li><li>支持多线程</li><li>安全性高</li></ul><p><strong>Q/A：  Java为什么可以跨平台？</strong></p><p><img src="/2020/08/18/Java%E6%80%BB%E7%BB%93/bb3215b0-baa6-11e9-8bd3-43e1fddff917" alt="执行过程"></p><p>​        Java执行流程：Java源文件编译成字节码，通过JVM运行Java程序。</p><p>JVM底层屏蔽了不同服务器类型之间的差异。所以每个平台只要运行JVM就可以运行Java程序了。</p><p><strong>Q/A:  JDK、JRE、JVM的区别？</strong></p><p>​        JDK是Java开发工具包，提供了Java的开发环境和运行环境。</p><p>​        JRE是Java运行环境，为Java的运行提供所需环境。</p><p>​        JVM是Java虚拟机，所有的Java程序都是在JVM上运行的。</p><p><strong>Q/A: 获取明天的当前时间？</strong></p><p> 使用LocalDataTime获取。</p><pre class=" language-java"><code class="language-java">        LocalDateTime time <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        time <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        time <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>Q/A:  跳出循环</strong></p><p>​        可以在循环体前加一个唯一标识，然后break 唯一标识; </p><pre><code>aaa:for(int i=0;i....)    for(int j=0....)        break aaa;</code></pre><p><strong>Q/A:  char可以存一个数字吗？</strong></p><p>​        Java使用的是Unicode编码，无论是数字，符号，中文都占两个字节。一个char类型大小是两个字节，所以可以存储。</p><p><strong>Q/A:  内存泄漏</strong></p><p>​        一个不被使用的对象或变量，一直占据着内存就会造成内存泄漏。</p><pre class=" language-java"><code class="language-java">ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Object o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    o <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        此时，虽然释放了对象，但是ArrayList仍然引用着这个对象，所以不能被回收。</p><p>​        <code>list = null;</code>即可解决。</p><h1 id="基本数据类型和包装类"><a href="#基本数据类型和包装类" class="headerlink" title="基本数据类型和包装类"></a>基本数据类型和包装类</h1><p><strong>Q/A： 八种基本数据类型</strong></p><p>​        1字节：boolean，byte</p><p>​        2字节：char，short</p><p>​        4字节：int，float</p><p>​        8字节：long，double</p><p><img src="/2020/08/18/Java%E6%80%BB%E7%BB%93/image-20200820100605626.png" alt="取值"></p><p><strong>Q/A:  包装类的特性</strong></p><ol><li><p>功能丰富，有内置的方法。</p></li><li><p>可以用作泛型的参数。</p></li><li><p>序列化。</p></li><li><p>类型转换。Integer.parseInt();</p></li><li><p>高频区间的数据缓存。</p><p>​    <img src="/2020/08/18/Java%E6%80%BB%E7%BB%93/image-20200820101026027.png" alt="范围"></p></li></ol><pre class=" language-java"><code class="language-java">Integer a <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>Integer b <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a==b true</span>Integer a <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>Integer b <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a==b false</span></code></pre><p>​        int的默认值是0，Integer默认值是null；</p><p>​        Float和Double没有缓存。</p><pre class=" language-java"><code class="language-java">        Double a <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        Double b <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>        Float c <span class="token operator">=</span> <span class="token number">1f</span><span class="token punctuation">;</span>        Float d <span class="token operator">=</span> <span class="token number">1f</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token operator">==</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//false</span></code></pre><p>​        Integer是唯一可以修改缓存最大值的包装类。在VM OPTIONS 加入参数<code>-XX:AutoBoxCacheMax=666  即修改缓存最大值为 </code>666`</p><hr><p><strong>Q/A:  下面的程序输出什么？</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> iMax <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iMax <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>A:2147483648  B:-2147483648  C:程序报错        D:以上都不是</p><p>​    答案是B。整数在内存中是以补码的形式存在的，MAX_VALUE是2^31-1 = 2147483647</p><p>​    加1后最高位变成1，所以答案为-2^31。</p><p><strong>Q/A:  如下图输出什么?</strong></p><p><img src="/2020/08/18/Java%E6%80%BB%E7%BB%93/image-20200820103057214.png" alt="image-20200820103057214"></p><p>​        因为set里存储的是Short类型，（i-1）会将Short自动转换为Integer型。所以remove找不到Integer类型的数据，就一个也不删除。</p><p>​        自动转换，由下到上：byte–short–int—long—-float—double</p><p>​        强制转换，由上到下（必须手写，可能造成精度损失）：double–float–long—int—short–byte</p><p>**Q/A:  **</p><pre class=" language-java"><code class="language-java"><span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>s <span class="token operator">=</span> s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//报错</span>s <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//正常</span></code></pre><p>s = s-1 是先执行s-1，此时右边为int型，所以两边不匹配；</p><p>s -= 1 等效于 s = （short）s - 1；</p><p><strong>Q/A:  为什么需要包装类？</strong></p><ol><li>Java是面向对象的语言，万物皆对象。</li><li>包装类里有很多方法和属性。</li></ol><p><strong>Q/A:  泛型为什么不可以用基本数据类型？</strong></p><p>​        例如<code>List&lt;Integer&gt; list</code>，在JVM编译时会变为List list，泛型擦除是为了兼容以前的代码。</p><p>​        泛型擦除后就变成了Object对象，Object对象不包括基本数据类型。</p><p><strong>Q/A:  如何选择包装类和基本类？</strong></p><p>​        正确的使用包装类可以提高效率。</p><ol><li><p>所有PO类的对象都必须使用包装类。</p><ol start="2"><li>RPC技术的方法返回值和参数都必须使用包装类。</li><li>局部变量使用基本数据类型。</li></ol></li></ol><p><strong>Q/A:  基本数据类型一定存储在栈中吗？</strong></p><p>​        不一定。</p><p>​        局部变量存储在方法栈中。 全局变量存储在堆中。</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><strong>Q/A:  字符串的特性</strong></p><ul><li>String是标准的不可变类，对它的任何改动，其实就是创建一个新对象，然后引用指向该对象。</li><li>String对象赋值后会自动在常量池中缓存，下一次创建会先判断常量池是否有缓存对象，如果有，直接返回该引用给创建者。</li></ul><p><strong>Q/A: 字符串截取</strong></p><p>​        substring（int a，int b）</p><p>​        表示从a（包括a），到b（不包括b）的一段字符串</p><p><strong>Q/A: 字符串格式化输出</strong></p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"我是%s，今年%d岁"</span><span class="token punctuation">,</span> <span class="token string">"ff"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><p><strong>Q/A:  字符串比较</strong></p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"hello,world"</span><span class="token punctuation">;</span>String str1 <span class="token operator">=</span> <span class="token string">"HELLO,WORLD"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token operator">==</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true，忽略大小写比较</span></code></pre><hr><p><strong>Q/A:  String,StringBuffer,StringBuilder</strong></p><p>​        String,StringBuilder线程不安全，Buffer和Builder都是可变的字符串，有<code>append(),insert(),setCharAt()</code>。</p><p>​        String字符串拼接本质上就是生成一个新对象，效率低。</p><p>​        StringBuffer通过Synchroized保证线程安全。多线程下用StringBuffer，单线程Builder效率高一点。</p><p>​        StringBuffer和StringBuilder都继承AbstractStringBuilder。</p><p><strong>Q/A:  ==和equals的区别？</strong></p><p>​        == 当比较基本类型的时候，比较值，当比较引用类型的时候，比较地址。</p><p>​        equals默认是比较引用，但是很多类重写了这个方法，变成了比较值。</p><p>**Q/A:  **</p><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token string">"hi,"</span> <span class="token operator">+</span> <span class="token string">"lao"</span> <span class="token operator">+</span> <span class="token string">"wang"</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">"hi,"</span><span class="token punctuation">;</span>s2 <span class="token operator">+=</span> <span class="token string">"lao"</span><span class="token punctuation">;</span>s2 <span class="token operator">+=</span> <span class="token string">"wang"</span><span class="token punctuation">;</span>  String s3 <span class="token operator">=</span> <span class="token string">"hi,laowang"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//false</span></code></pre><p>​        s2使用了+=，指向新的地址，地址不一样。</p><p><strong>Q/A: String类中的intern()方法</strong></p><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sysout</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//true</span></code></pre><p>​        intern()就是判断字符串在常量池中是否有创建，如果不存在就先创建，存在就直接返回。</p><p><strong>Q/A: String s = new String(“hello”);会创建几个对象？</strong></p><p>​        一个或两个。如果hello在常量池中存在，那么就创建s去引用这个对象。如果不存在，就先在常量池创建一个，在创建s去引用。</p><p><strong>Q/A: 什么是字符串常量池？</strong></p><p>​        字符串常量池就是存储在堆空间的字符串池，为了防止每次创建字符串时间和空间过大。每当创建一个字符串时，JVM会先成字符串常量池找有没有该字符串，如果有，就将创建的字符串指向该地址，如果没有，就先创建一个字符串对象放到字符串常量池中，然后用新创建的对象指向该地址。</p><p><strong>Q/A:  字符串不可变的好处？</strong></p><ol><li>当字符串不可变时，字符串常量池才可以存在。它节省了很大的堆空间。</li><li>避免安全漏洞。在Socket编程中，套接字是String，它的值是不可变的，当黑客侵入也改变不了。</li><li>多线程安全。</li><li>当作缓存的key，它在创建时哈希值就被计算出来存到缓存里去了，速度更快。</li></ol><h1 id="运算符和流程控制"><a href="#运算符和流程控制" class="headerlink" title="运算符和流程控制"></a>运算符和流程控制</h1><p> <strong>Q/A:  ++和–怎么做到线程安全？</strong></p><ol><li>使用synchroized同步代码块</li><li>自己声明锁</li><li>使用AtomicInteger 代替 int</li></ol><p><strong>Q/A:  switch–case</strong></p><p>​        可以用在switch中的有：</p><ul><li>byte，char，short，int</li><li>enum（枚举）</li><li>字符串</li></ul><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p><strong>Q/A:  多catch块</strong></p><p>​        JVM从上到下匹配异常类型，所以Exception类型不能放在最前面。</p><p><strong>Q/A:  异常块对程序性能的影响</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用 com.alibaba.fastjson</span>JSONArray array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String jsonStr <span class="token operator">=</span> <span class="token string">"&amp;#123;'name':'laowang'&amp;#125;"</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    array <span class="token operator">=</span> JSONArray<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>JSONObject<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​        如上述代码，利用异常处理完成业务功能。会产生额外的性能开销。</p><p><strong>Q/A:  常见的运行时异常？</strong></p><p>​        NullPointerException 空指针异常</p><p>​        非运行时异常：ClassNotFoundException 找不到文件异常</p><p>​        IndexOutOfBoundsException 数组越界异常</p><p><strong>Q/A:  Exception 和 Error</strong></p><p>​        都是Throwable的子类。Error表示Java运行时程序内部出现错误，程序无法控制和解决。Exception分为运行时异常和非运行时异常，运行时异常编译可以通过，但是运行时出现这类未处理的异常，程序会中止运行。非运行时异常必须使用try–catch或者throws，否则编译不通过。</p><p><strong>Q/A:  throw和throws</strong></p><p>​        throw作用在方法体里面，表示抛出异常由方法体内的语句处理，执行throw一定会抛出某种异常。</p><p>​        throws作用在方法声明后面，方法的调用者必须处理这种异常，throws代表可能会抛出异常，并不一定会发生这种异常。</p><p>**Q/A:  **</p><p>​        Integer.parseInt(null);抛出NumberFormatException</p><p>​        Double.parseDouble(null);抛出NullPointerException</p><p><strong>Q/A: 为什么try-catch耗费性能？</strong></p><p>​        这个问题要从 JVM（Java 虚拟机）层面找答案了。首先 Java  虚拟机在构造异常实例的时候需要生成该异常的栈轨迹，这个操作会逐一访问当前线程的栈帧，并且记录下各种调试信息，包括栈帧所指向方法的名字，方法所在的类名、文件名，以及在代码中的第几行触发该异常等信息，这就是使用异常捕获耗时的主要原因了。</p><p><strong>Q/A: 常见的OOM</strong></p><ol><li>数据库资源没有关闭</li><li>加载特别大的照片</li><li>递归次数过多，一直使用未释放的变量</li></ol><p><strong>Q/A:  final,finally,finalize</strong></p><p>​        final:修饰变量时，这个变量一定需要初始化，并且不可修改，只可读</p><p>​                修饰方法时，这个方法不能被重写。</p><p>​                修饰类时，这个类不能被继承。</p><p>​        finally:异常处理中的关键词，用finally修饰的代码块一定会被执行。</p><p>​        finalize:Object类中的方法，子类可以重写这个方法完成垃圾清理工作，垃圾回收之前会调用这个方法。</p><p><strong>Q/A: 为什么finally代码块一定会被执行？</strong></p><p>​        由于编译器在编译Java代码时，会复制finally的代码块的内容，并把内容放在try-catch所有正常执行路径及异常执行路径的出口，所以一定会被执行。</p><h1 id="关于时间"><a href="#关于时间" class="headerlink" title="关于时间"></a>关于时间</h1><p>​        JDK8之前都是使用Date，Clander类来操作时间，但是它们线程不安全，并且API调用麻烦。</p><p>​        JDK8之后新增了LocalDateTime，LocalDate，LocalTime等类，线程安全，操作方便。</p><h1 id="数组和排序算法"><a href="#数组和排序算法" class="headerlink" title="数组和排序算法"></a>数组和排序算法</h1><p>​        使用for-each遍历数组</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>a<span class="token punctuation">)</span>    <span class="token function">sysout</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​        复制数组：<code>Arrays.copyOf(a,a.length())</code>，第二个参数可以超出原数组，超出的部分初始值为0；</p><p>​        数组转字符串：<code>Arrays.toString(a)</code>  输出为<code>[1,2,3,4,5]</code></p><p>​        数组填充：<code>Arrays.fill(a,6)</code>，将a数组值全部置为6</p><p>​        数组合并：<code>a = ArrayUtils.addAll(a,b);</code></p><p>​        数组排序：<code>Arrays.sort()</code></p><p>​        数组逆序：<code>ArrayUtils.reverse(a)</code></p><p>​        数组查找：<code>Arrays.binarySearch(a,3)</code>  使用二分查找的数组必须排序，找不到返回-1</p><p><strong>Q/A:  冒泡排序</strong>        </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>Q/A:  选择排序</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//每次选择排好的数组的后一个</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>Q/A:  字符串转数组</strong></p><p><code>String[] s = s1.split(String,Integer)</code>  第一个参数是以什么分隔，第二个参数是分成几个数组。</p><p><strong>Q/A: 数组转集合</strong></p><p><code>        List&lt;String&gt; list = Arrays.asList(res);</code></p><p><code>String[] aa = list.toArray(new String[list.size()]);         System.out.println(Arrays.toString(aa));</code></p><p><strong>Q/A:  集合和数组的区别？</strong></p><ul><li>集合可以存多种类型的数据，数组只能存单一类型。</li><li>集合长度会发生变化，数组长度固定</li><li>集合功能更多，数组效率高</li></ul><p><strong>Q/A:  数组的比较</strong></p><pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> strArr <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"pig"</span><span class="token punctuation">,</span> <span class="token string">"bird"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strArr2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"pig"</span><span class="token punctuation">,</span> <span class="token string">"bird"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>strArr<span class="token punctuation">,</span> strArr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strArr<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>strArr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strArr <span class="token operator">==</span> strArr2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//false</span></code></pre><p>​        Arrays中的equals被重写了，比较值。</p><p>​        数组没有重写，比较地址。</p><h1 id="类与Object的应用"><a href="#类与Object的应用" class="headerlink" title="类与Object的应用"></a>类与Object的应用</h1><p>​        import可以导入静态方法和静态域</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>四种修饰符：</strong></p><p>public   protected  默认  private</p><p><img src="/2020/08/18/Java%E6%80%BB%E7%BB%93/image-20200821101816240.png" alt="访问权限"></p><p><strong>构造方法五大原则：</strong></p><ol><li>构造方法名一定要与类名相同</li><li>参数可以没有，可以有多个</li><li>构造方法可以有一个或多个</li><li>不能有返回值</li><li>伴随new出现</li></ol><p>构造方法不能被继承，重写，直接调用，可以重载</p><p><strong>Object类</strong></p><p>​        它是所有类的父类。常用方法：</p><ul><li>equals()：对比两个对象是否相同</li><li>getClass()：返回一个对象的运行时类</li><li>hashCode()：返回该对象的哈希码值</li><li>toString()：返回该对象的字符串描述</li><li>wait()：使当前的线程等待</li><li>notify()：唤醒在此对象监视器上等待的单个线程</li><li>notifyAll()：唤醒在此对象监视器上等待的所有线程</li><li>clone()：克隆一个新对象</li></ul><p><strong>类的组成部分</strong></p><p>​        方法和变量</p><p><strong>为什么不能多继承？</strong></p><p>​        降低编程的复杂性。因为一个类同时继承类a，类b，但是类a和类b有相同的方法，子类重写时就会造成歧义。</p><p><strong>重写和重载</strong></p><p>​        重写：只能比父类抛出更少的异常，访问权限不能比父类方法低。</p><p>​        重载：一个类中有多个方法名相同的方法，但是参数不同。</p><p><strong>调用顺序</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ExecTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Son son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出:251346</p><p>加载顺序：</p><ul><li>执行父类的静态成员；</li><li>执行子类的静态成员；</li><li>父类的实例成员和实例初始化；</li><li>执行父类构造方法；</li><li>子类的实例成员和实例初始化；</li><li>子类构造方法。</li></ul><p><strong>重写：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        A myClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>myClass<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>myClass<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        myClass<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出：00B</p><p>在Java中，变量不能被重写。</p><p><strong>重写</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span>A a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span>D d<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span>A a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span>B b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        C c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        D d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//BA</span>        a<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//BA</span>        a<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//BA</span>        a<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//AD</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>this,super</strong></p><p>​        this和super都是关键字，起指代作用，在构造方法中必须出现在第一行。</p><ul><li>this是访问本类的属性和方法，super是访问父类的属性和方法</li><li>this先查本类，没有的话再查父类，super直接查父类</li><li>this单独使用时，表示当前对象，super在子类重写父类方法时，调用父类同名方法。</li></ul><p><strong>静态方法中为什么不可以使用this，super？</strong></p><p>​        因为this，super指代的都是被创建出来的对象，而静态方法在类被加载的时候就已经创建了，所以静态方法中没办法使用this，super。</p><p><strong>静态方法</strong></p><p>​        静态方法中不能使用实例变量和实例方法。</p><p>​        静态方法中不能使用this，super。</p><p><strong>重写equals()方法要遵循哪些规则？</strong></p><ul><li><p>自反性：对于任意非空的引用值 x，x.equals(x) 返回值为真。</p></li><li><p>对称性：对于任意非空的引用值 x 和 y，x.equals(y) 必须和 y.equals(x) 返回相同的结果。</p></li><li><p>传递性：对于任意的非空引用值 x、y 和 z，如果 x.equals(y) 返回值为真，y.equals(z) 返回值也为真，那么 x.equals(z) 也必须返回值为真。</p></li><li><p>一致性：对于任意非空的引用值 x 和 y，无论调用 x.equals(y) 多少次，都要返回相同的结果。在比较的过程中，对象中的数据不能被修改。</p></li><li><p>对于任意的非空引用值 x，x.equals(null) 必须返回假。</p></li></ul><p><strong>clone()方法</strong></p><p>​        如果是同一个类使用，只需实现Cloneable接口，处理CloneNotSupportedException异常就可以了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CloneTest</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        CloneTest ct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CloneTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ct<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ct<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        CloneTest ct2 <span class="token operator">=</span> <span class="token punctuation">(</span>CloneTest<span class="token punctuation">)</span> ct<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ct2<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        如果不在同一个类，需要重写clone方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CloneTest</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        CloneTest ct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CloneTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ct<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ct<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        CloneTest ct2 <span class="token operator">=</span> <span class="token punctuation">(</span>CloneTest<span class="token punctuation">)</span> ct<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ct2<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloneTest2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        CloneTest ct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CloneTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ct<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ct<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        CloneTest ct2 <span class="token operator">=</span> <span class="token punctuation">(</span>CloneTest<span class="token punctuation">)</span> ct<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ct2<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><h1 id="内部类和枚举类"><a href="#内部类和枚举类" class="headerlink" title="内部类和枚举类"></a>内部类和枚举类</h1><p>​        Java内部类可以分为四种：</p><p>​        成员内部类，静态成员内部类，局部内部类，匿名内部类</p><p>​        内部类的优点：</p><ol><li>内部类和外部类可以方便的访问彼此之间的私有域</li><li>内部类是另一种封装，对外部的其他类影藏。</li><li>解决单继承的局限。</li></ol><p><strong>1.成员内部类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outter11</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Outter11</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Inner</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1231234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>成员内部类的创建：<code>Inner inner = new Outter11().new Inner();</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string">"OuterClass"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi, Outer."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 内部类访问外部类</span>            Outer<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Outer<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi, Inner."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">InnerTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Outer<span class="token punctuation">.</span>Inner inner <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>内部类访问外部类：Outer.this.xxx;</p><p>外部类访问内部类：new Inner().xxx;    </p><p>小结：</p><ul><li>成员内部类可直接访问外部类（使用：外部类.this.xxx）；</li><li>外部成员类要访问内部类，必须先建立成员内部类对象；</li><li>成员内部类可使用任意作用域修饰（public、protected、默认、private）；</li><li>成员内部类可访问外部类任何作用域修饰的属性和方法；</li><li>外部类建立成员内部类对象之后，可以访问任何作用域修饰的内部类属性和方法。</li><li>成员内部类中不能有static修饰的变量或方法。</li></ul><p><strong>2.静态成员内部类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OuterClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OuterClass Init."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi, InnerClass."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">InnerClassTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        OuterClass<span class="token punctuation">.</span>InnerClass innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerClass<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        不能从静态内部类访问非静态外部类对象。</p><p><strong>3.局部内部类</strong></p><p>​        定义在一个类的局部（方法或者任何作用域）。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">OutClass</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">InnerClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InnerClass:"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token string">"Three"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi, OutClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>局部内部类特点：</p><p>​        不能使用任何访问修饰符。</p><p>​        如果在方法中，可以直接使用方法中的变量，不需要Outclass.this.xxx调用</p><p><strong>4.匿名内部类</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">AnonymityOuter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AnonymityTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        AnonymityOuter anonymityOuter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnonymityOuter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi, AnonymityOuter."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        anonymityOuter<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        没有名字的内部类就是匿名内部类。</p><ol><li>匿名内部类必须继承一个父类或者实现一个接口。</li><li>匿名内部类不能定义任何静态成员和方法。</li><li>匿名内部类的方法不能是抽象的。</li></ol><p><strong>枚举类：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> ColorEnum<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    RED<span class="token punctuation">,</span>BLANK<span class="token punctuation">,</span>WHITE<span class="token punctuation">,</span>YELLOW<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">enumTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ColorEnum colorEnum <span class="token operator">=</span> ColorEnum<span class="token punctuation">.</span>RED<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>colorEnum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        枚举类其实就是特殊的常量类，它的构造方法默认为私有。</p><p>​        枚举类不能被继承，可以被序列化，线程安全。</p><p><strong>扩展枚举类：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> ColorsEnum <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">RED</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">BLUE</span><span class="token punctuation">(</span><span class="token string">"蓝色"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">YELLOW</span><span class="token punctuation">(</span><span class="token string">"黄色"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">"绿色"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ColorsEnum</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EnumTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ColorsEnum<span class="token punctuation">.</span>RED<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ColorsEnum<span class="token punctuation">.</span>RED<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>使用静态内部类的好处？</strong></p><ol><li>可以直接通过“外部类.内部类”的方式直接访问。</li><li>内部类可以访问外部类的静态方法和变量。</li></ol><p><strong>为什么使用内部类？</strong></p><ol><li>解决无法多继承的问题。</li><li>可以将一些逻辑相似的类放在一起，对外界影藏。</li></ol><p><strong>为什么使用枚举类？</strong></p><ol><li>作为高级的常量类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Color <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">RED</span><span class="token punctuation">(</span><span class="token string">"#FF0000"</span><span class="token punctuation">,</span> <span class="token string">"255,0,0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">GREEN</span><span class="token punctuation">(</span><span class="token string">"#00FFFF"</span><span class="token punctuation">,</span> <span class="token string">"0,255,255"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">YELLOW</span><span class="token punctuation">(</span><span class="token string">"#FFFF00"</span><span class="token punctuation">,</span> <span class="token string">"255,255,0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String hex<span class="token punctuation">,</span> rgb<span class="token punctuation">;</span>    <span class="token function">Color</span><span class="token punctuation">(</span>String hex<span class="token punctuation">,</span> String rgb<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hex <span class="token operator">=</span> hex<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rgb <span class="token operator">=</span> rgb<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>方便switch的判断</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">case</span> RED<span class="token operator">:</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"红灯停"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> GREEN<span class="token operator">:</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绿灯行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> YELLOW<span class="token operator">:</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"看情况"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"灯坏了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>枚举类在JVM中是如何实现的？</strong></p><p>​        枚举类在编译后，它的属性会变成static final 修饰的常量。</p><h1 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h1><p>​        抽象类：</p><p>​        一个类中没有足够的信息描绘一个具体的对象，这样的类就是抽象类。</p><ul><li>抽象类不能被初始化</li><li>抽象类可以有构造方法</li><li>抽象类的子类如果为普通类，则必须重写抽象类中的所有抽象方法</li><li>抽象类中的方法可以是抽象方法或普通方法</li><li>一个类中如果包含了一个抽象方法，这个类必须是抽象类</li><li>子类中的抽象方法不能与父类中的抽象方法同名</li><li>抽象方法不能为 private、static、final 等关键字修饰</li><li>抽象类中可以包含普通成员变量，访问类型可以任意指定，也可以使用静态变量（static）</li></ul><p>​        接口：</p><p>​        接口是抽象类的延伸，弥补了不能多继承的问题。</p><p>Java8接口的改动：</p><ul><li>可以使用static，defult修饰方法，可以有方法体</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">School</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i am school"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i am eating"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>static可以直接调用School.say()，defult必须实例化才能调用。</p><ul><li>接口中的静态变量会被继承，静态方法不会被继承</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IAnimal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> String animalName <span class="token operator">=</span> <span class="token string">"Animal Name"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Male Dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AnimalImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAnimal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animalName<span class="token punctuation">)</span><span class="token punctuation">;</span>        IAnimal<span class="token punctuation">.</span><span class="token function">printSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>新增函数式接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">IAnimal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> String animalName <span class="token operator">=</span> <span class="token string">"Animal Name"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Male Dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">printAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FunctionInterfaceTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        IAnimal animal <span class="token operator">=</span> name <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">"WangWang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        使用 <code>@FunctionInterface</code> 声明的函数式接口，抽象方法必须有且仅有一个，但可以包含其他非抽象方法。</p><p>接口不是类，是对类的一组行为的描述。</p><p><strong>抽象类和接口的区别：</strong></p><ul><li>默认方法</li><li>抽象类可以有默认方法的实现</li><li>JDK 8 之前接口不能有默认方法的实现，JDK 8 之后接口可以有默认方法的实现</li><li>继承方式</li><li>子类使用 extends 关键字来继承抽象类</li><li>子类使用 implements 关键字类实现接口</li><li>构造器</li><li>抽象类可以有构造器</li><li>接口不能有构造器</li><li>方法访问修饰符</li><li>抽象方法可以用 public / protected / default 等修饰符</li><li>接口默认是 public 访问修饰符，并且不能使用其他修饰符</li><li>多继承</li><li>一个子类只能继承一个抽象类</li><li>一个子类可以实现多个接口</li></ul><h1 id="克隆和序列化"><a href="#克隆和序列化" class="headerlink" title="克隆和序列化"></a>克隆和序列化</h1><p>​        <strong>对象的克隆：</strong></p><ol><li><p>实现Cloneable接口</p><p>​    实现Cloneable接口，覆盖<code>public Object clone()</code>方法。若类中还有其他类的引用，则其他类中也必须覆盖clone方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Point</span>  <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setX</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> y<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setY</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Point [x="</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">", y="</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              Point p <span class="token operator">=</span> null<span class="token punctuation">;</span>              <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  p <span class="token operator">=</span> <span class="token punctuation">(</span>Point<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>CloneNotSupportedException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> p<span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> String add<span class="token punctuation">;</span>     Point center<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>add<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>center<span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Address</span><span class="token punctuation">(</span>String ss<span class="token punctuation">,</span>Point center<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>add<span class="token operator">=</span>ss<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>center<span class="token operator">=</span>center<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ol><pre><code>   public String getAdd() &amp;#123;         return add;     &amp;#125;     public void setAdd(String add) &amp;#123;         this.add = add;     &amp;#125;     @Override     public Object clone() &amp;#123;         Address addr = null;         try&amp;#123;             addr = (Address)super.clone();             addr.center=(Point)this.center.clone();       &amp;#125;catch(CloneNotSupportedException e) &amp;#123;             e.printStackTrace();         &amp;#125;         return addr;     &amp;#125;    public boolean test(Address o)    &amp;#123;        return this.add==o.add;    &amp;#125;   public boolean testCenter(Address o)    &amp;#123;        return this.center==o.center;    &amp;#125;   @Override   public String toString() &amp;#123;       return &quot;Address [add=&quot; + add + &quot;]&quot;;   &amp;#125;  </code></pre><p>   &#125;  </p><pre><code>```javapublic class AppAddress &amp;#123;    public static void main(String[] args) &amp;#123;        Address add=new Address(&quot;aaa&quot;,new Point(3,3));        Address add2=(Address)add.clone();        System.out.println(add.test(add2));    //true        add2.setAdd(&quot;bbb&quot;);        System.out.println(add.test(add2));    //false        System.out.println(add.getAdd());    //aaa        add2.center.x=9;        System.out.println(add.testCenter(add2));    //false        &amp;#125;&amp;#125;</code></pre><p>   ​        当add2=add.clone（）后，add2引用add的地址。当add2改变自己的属性值时，将不再引用add的地址，而是重新指向一块地址，为深拷贝。</p><hr><p>   <strong>clone方式深拷贝小结：</strong></p><p>   ​        1.如果有一个非原生成员，如自定义对象的成员，那么就需要：</p><ul><li><p>该成员实现Cloneable接口并覆盖clone()方法，不要忘记提升为public可见。</p></li><li><p>同时，修改被复制类的clone()方法，增加成员的克隆逻辑。</p><p>​      2. 如果被复制对象不是直接继承Object，中间还有其它继承层次，每一层super类都需要实现Cloneable接口并覆盖clone()方法。</p><p>​        与对象成员不同，继承关系中的clone不需要被复制类的clone()做多余的工作。</p><p>​      一句话来说，如果实现完整的深拷贝，需要被复制对象的继承链、引用链上的每一个对象都实现克隆机制。</p><p>​        前面的实例还可以接受，如果有N个对象成员，有M层继承关系，就会很麻烦。</p></li></ul><p><strong>2. BeanUtils</strong></p><p>​        BeanUtils是一个工具类，类中提供了cloneBean（Object object）方法。</p><p>自己实现BeanUtils（反射机制）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanUtils</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">copyObject</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span>   <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>       Class <span class="token class-name">clz</span><span class="token operator">=</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Object temp<span class="token operator">=</span>null<span class="token punctuation">;</span>       <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           temp<span class="token operator">=</span>clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields<span class="token operator">=</span>clz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               Object value<span class="token operator">=</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>               <span class="token keyword">else</span>               <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   Object t<span class="token operator">=</span><span class="token function">copyObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                   field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>       <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> temp<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span>Class <span class="token class-name">clz</span><span class="token punctuation">)</span>   <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>clz<span class="token operator">==</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">||</span>clz<span class="token operator">==</span>Integer<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>clz<span class="token operator">==</span>Double<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">||</span>clz<span class="token operator">==</span>Double<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>clz<span class="token operator">==</span>Float<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">||</span>clz<span class="token operator">==</span>Float<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>clz<span class="token operator">==</span>Boolean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">||</span>clz<span class="token operator">==</span>Boolean<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>clz<span class="token operator">==</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">||</span>clz<span class="token operator">==</span>Long<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>clz<span class="token operator">==</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> NoSuchMethodException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        Address add<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Address add2<span class="token operator">=</span><span class="token punctuation">(</span>Address<span class="token punctuation">)</span>BeanUtils<span class="token punctuation">.</span><span class="token function">copyObject</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">testCenter</span><span class="token punctuation">(</span>add2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//false</span>        Address add3  <span class="token operator">=</span><span class="token punctuation">(</span>Address<span class="token punctuation">)</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span>BeanUtils<span class="token punctuation">.</span><span class="token function">cloneBean</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>add3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">testCenter</span><span class="token punctuation">(</span>add3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//false</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>3. 序列化</strong>    </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Address address<span class="token punctuation">;</span>    <span class="token keyword">public</span> Person <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person p2<span class="token operator">=</span>null<span class="token punctuation">;</span>        Person p1<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>        PipedOutputStream out<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PipedOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PipedInputStream in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PipedInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            in<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>ObjectOutputStream bo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>                ObjectInputStream bi<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            bo<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>            p2<span class="token operator">=</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span> bi<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p2<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        clone机制不是强类型的限制，比如实现了Cloneable并没有强制继承链上的对象也实现；也没有强制要求覆盖clone()方法。因此编码过程中比较容易忽略其中一个环节，对于复杂的项目排查就是困难了。</p><p>​        要寻找可靠的，简单的方法，序列化就是一种途径。</p><ul><li>被复制对象的继承链、引用链上的每一个对象都实现java.io.Serializable接口。这个比较简单，不需要实现任何方法，serialVersionID的要求不强制，对深拷贝来说没毛病。</li><li>实现自己的deepClone方法，将this写入流，再读出来。俗称：冷冻-解冻。</li></ul><hr><p><strong>serialVersionUID的作用是什么？</strong></p><p>​        显示定义serialVersionUID之后，如果serialVersionUID 的值相同，那么就可以修改对象的字段，程序不会报错，之后给没有的字段赋值为null；没有显式定义的话，就不可以修改，程序会报错。</p><p><strong>可序列化接口Serializalbe的作用？</strong></p><p>​        它构成了序列化的核心，它本身并没有任何方法，它的作用就是标记某对象为可序列化对象，指示编译器用java序列化机制序列化该对象。</p><p><strong>序列化的三种方式？</strong></p><ol><li>原生序列化方式</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 序列化和反序列化</span><span class="token keyword">class</span> <span class="token class-name">SerializableTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对象赋值</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"老王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建输出流（序列化内容到磁盘）</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"test.out"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 序列化对象</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建输入流（从磁盘反序列化）</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.out"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 反序列化</span>        User user2 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 5132320539584511249L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"&amp;#123;name:"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">",age:"</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"&amp;#125;"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="2"><li><p>JSON格式</p><p>​        Json序列化的优点就是可读性比较高，易于调试。</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 序列化和反序列化</span><span class="token keyword">class</span> <span class="token class-name">SerializableTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对象赋值</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"老王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        String jsonSerialize <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        User user3 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonSerialize<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 5132320539584511249L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"&amp;#123;name:"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">",age:"</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"&amp;#125;"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="3"><li><p>Hessian方式</p><p>​    Hessian方式效率比原生方式效率更高，可以跨语言编程</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 序列化和反序列化</span><span class="token keyword">class</span> <span class="token class-name">SerializableTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 序列化</span>        ByteArrayOutputStream bo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HessianOutput hessianOutput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HessianOutput</span><span class="token punctuation">(</span>bo<span class="token punctuation">)</span><span class="token punctuation">;</span>        hessianOutput<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hessianBytes <span class="token operator">=</span> bo<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 反序列化</span>        ByteArrayInputStream bi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>hessianBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        HessianInput hessianInput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HessianInput</span><span class="token punctuation">(</span>bi<span class="token punctuation">)</span><span class="token punctuation">;</span>        User user4 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> hessianInput<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 5132320539584511249L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"&amp;#123;name:"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">",age:"</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"&amp;#125;"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>使用克隆的好处？</strong></p><ol><li>方便</li><li>性能高：因为clone()方法是native方法，native是原生函数，使用操作系统底层的语言实现的，所以效率更高。</li><li>隔离性</li></ol><p><strong>深克隆和浅克隆</strong></p><ul><li>浅克隆：只会复制对象的值类型，而不会复制对象的引用类型；</li><li>深克隆：复制整个对象，包含值类型和引用类型。</li></ul><p><strong>序列化时某些成员不需要序列化</strong></p><p>​        使用transient或者static修饰成员</p><p><strong>序列化和反序列化的过程？</strong></p><p>​        在 Java 中序列化由 java.io.ObjectOutputStream  类完成，该类是一个筛选器流，它封装在较低级别的字节流中，以处理序列化机制。要通过序列化机制存储任何对象，我们需要调用  ObjectOutputStream.writeObject(savethisobject) 方法，如果要反序列化该对象，我们需要调用  ObjectInputStream.readObject() 方法，readObject() 方法会读取字节，并把这些字节转换为对象再返回。</p><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p>​        <img src="/2020/08/18/Java%E6%80%BB%E7%BB%93/image-20200822092944530.png" alt="集合族谱"></p><p>​        List：元素可重复，有序，适用于增删改</p><p>​        Set：元素不重复，无序，适用于元素唯一的场景</p><ol><li><p>Vector</p><p>​    早期提供的线程安全的集合，但是效率很低。</p></li><li><p>ArrayList</p><p>​    最常见的线程不安全的集合，因为内部是数组存储的，所以随机访问效率很高，但是非尾部的插入和删除效率很低，会进行移位。</p></li><li><p>LinkedList</p><p>​    使用双向链表的集合，所以增加和删除效率高，但是随机访问不如ArrayList。提供了offer()和peek()</p><p>add和offer的区别：add用在list里，offer用在queue里。peek查看元素。</p></li><li><p>HashSet</p><p>​    没有重复元素的集合，它虽然是Set集合的子类，但是它内部是HashMap的实例。</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        HashSet默认容量是16，每次扩容1倍。</p><ol start="5"><li><p>TreeSet</p><p>​    TreeSet实现了自动排序。</p></li><li><p>LinkedHashSet</p><p>​    按照元素的hascode值决定存放位置，但同时又使用链表维护元素的次序。</p></li></ol><p><strong>数组与集合的转换：Arrays.asList()，xxx.toArray();</strong></p><p>l两种排序：</p><p>自然排序Comparable，定制排序Comparator</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        TreeSet set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//参数构造，默认采用自然排序</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//整数默认的自然排序规则</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeSet set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//字符串默认的自然排序规则</span>        set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存储自定义Student，采用自然排序规则，要让Student实现Comparable接口，制定排序规则</span>        TreeSet set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Jerry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"Tim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//采用定制排序，在构造TreeSet对象时将排序器传入</span>        TreeSet set3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        set3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        set3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">StudentComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        Student s1 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>o1<span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>o2<span class="token punctuation">;</span>        <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Student类重写Comparable接口：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        Student o1 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>o<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>List和Set的区别？</strong></p><ul><li>List可以有多个null值，Set只能有一个</li><li>List可以有重复元素，Set不能有重复元素</li><li>List有序，Set无序</li></ul><p><strong>Vector和ArrayList</strong></p><p>​        初始容量都是10，Vector扩容1倍，ArrayList扩容0.5倍+1。HashSet初始容量16，加载因子为0.75，就是长度超过0.75时，进行扩容，扩容1倍。</p><p><strong>Vector、ArrayList、LinkedList 有什么区别？</strong></p><p>​        这三者都是 List 的子类，因此功能比较相似，比如增加和删除操作、查找元素等，但在性能、线程安全等方面表现却又不相同，差异如下：</p><ul><li>Vector 是 Java 早期提供的动态数组，它使用 synchronized 来保证线程安全，如果非线程安全需要不建议使用，毕竟线程同步是有性能开销的；</li><li>ArrayList 是最常用的动态数组，本身并不是线程安全的，因此性能要好很多，与 Vector 类似，它也是动态调整容量的，只不过 Vector 扩容时会增加 1 倍，而 ArrayList 会增加 50%；</li><li>LinkedList 是双向链表集合，因此它不需要像上面两种那样调整容量，它也是非线程安全的集合。</li></ul><p><strong>Vector、ArrayList、LinkedList 使用场景有什么区别？</strong></p><p>​        Vector 和 ArrayList 的内部结构是以数组形式存储的，因此非常适合随机访问，但非尾部的删除或新增性能较差，比如我们在中间插入一个元素，就需要把后续的所有元素都进行移动。</p><p>​        LinkedList 插入和删除元素效率比较高，但随机访问性能会比以上两个动态数组慢。</p><p><strong>HashSet如何做到元素不重复？</strong></p><p>​        内部是HashMap，把要储存的数据当作key，value是一个相同的虚值PRESENT。用新的key覆盖旧的key，返回false。</p><p><strong>Comparable 和 Comparator 有哪些区别？</strong></p><p>​        Comparable 和 Comparator 的主要区别如下：</p><ul><li>Comparable 位于 java.lang 包下，而 Comparator 位于 java.util 包下；</li><li>Comparable 在排序类的内部实现，而 Comparator 在排序类的外部实现；</li><li>Comparable 需要重写 CompareTo() 方法，而 Comparator 需要重写 Compare() 方法；</li><li>Comparator 在类的外部实现，更加灵活和方便。</li></ul><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p><img src="/2020/08/18/Java%E6%80%BB%E7%BB%93/image-20200822101305769.png" alt="Map"></p><p>Map常用的类：</p><ul><li>HashTable：线程安全，不支持null键和值，性能不如ConcurrentHashMap，所以很少使用。</li><li>HashMap：支持null键和值，单线程用HashMap，多线程用ConcurrentHashMap。</li><li>TreeMap：基于红黑树，提供顺序访问的Map，自身实现了key的自然排序，也可以定制排序。</li><li>LinkedHashMap：HashMap的子类，保存了记录的插入顺序，可以在遍历时保持与插入一样的顺序。</li><li>ConcurrentHashMap：线程安全，不支持null作为键和值。</li></ul><p><strong>HashMap数据结构</strong></p><p>​        数组加链表。在JDK8后，当链表长度大于等于8，数组长度大于64时，会转为红黑树存储。</p><p><strong>使用HashMap可能会出现什么问题？如何避免？</strong></p><p>​        HashMap 在并发场景中可能出现死循环的问题，这是因为 HashMap  在扩容的时候会对链表进行一次倒序处理，假设两个线程同时执行扩容操作，第一个线程正在执行 B→A 的时候，第二个线程又执行了 A→B  ，这个时候就会出现 B→A→B 的问题，造成死循环。<br>​        解决的方法：升级 JDK 版本，在 JDK 8 之后扩容不会再进行倒序，因此死循环的问题得到了极大的改善，但这不是终极的方案，因为 HashMap 本来就不是用在多线程版本下的，如果是多线程可使用 ConcurrentHashMap 替代 HashMap。        </p><p><strong>TreeMap怎么实现value倒序？</strong></p><p>​        使用 <code>Collections.sort(list, new Comparator&lt;Map.Entry&lt;String, String&gt;&gt;()</code> 自定义比较器实现，先把 TreeMap 转换为 ArrayList，在使用 Collections.sort() 根据 value 进行倒序，完整的实现代码如下。</p><pre class=" language-java"><code class="language-java">TreeMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> treeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"camel"</span><span class="token punctuation">,</span> <span class="token string">"camel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ant"</span><span class="token punctuation">,</span> <span class="token string">"ant"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// map.entrySet() 转成 List</span>List<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>treeMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过比较器实现比较排序</span>Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> m1<span class="token punctuation">,</span> Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> m2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> m2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印结果</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> item <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> item<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>HashMap 和 Hashtable 有什么区别？</strong></p><p>​        HashMap 和 Hashtable 区别如下：</p><ul><li>Hashtable 使用了 synchronized 关键字来保障线程安全，而 HashMap 是非线程安全的；</li><li>HashMap 允许 K/V 都为 null，而 Hashtable K/V 都不允许 null；</li><li>HashMap 继承自 AbstractMap 类；而 Hashtable 继承自 Dictionary 类。</li></ul><p><strong>哈希冲突</strong></p><p>​        两个不同的值，计算出的哈希值相同，这就叫做哈希冲突。</p><p><strong>四种解决哈希冲突的方法</strong></p><ul><li>开放定址法：当关键字的哈希地址 p=H（key）出现冲突时，以 p 为基础，产生另一个哈希地址 p1，如果 p1 仍然冲突，再以 p 为基础，产生另一个哈希地址 p2，循环此过程直到找出一个不冲突的哈希地址，将相应元素存入其中。</li><li>再哈希法：这种方法是同时构造多个不同的哈希函数，当哈希地址 Hi=RH1（key）发生冲突时，再计算 Hi=RH2（key），循环此过程直到找到一个不冲突的哈希地址，这种方法唯一的缺点就是增加了计算时间。</li><li>链地址法：这种方法的基本思想是将所有哈希地址为 i 的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第 i 个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法适用于经常进行插入和删除的情况。</li><li>建立公共溢出区：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表。</li></ul><p>HashMap是用链表加红黑树解决哈希冲突的。</p><p><strong>HashMap为什么扩容2^n？</strong></p><p>​        让散列更加均匀，减少哈希碰撞，提高效率。</p><p><strong>JDK7  JDK8  HashMap的区别？</strong></p><ul><li>存储结构：JDK 7 使用的是数组 + 链表；JDK 8 使用的是数组 + 链表 + 红黑树。</li><li>存放数据的规则：JDK 7 无冲突时，存放数组；冲突时，存放链表；JDK 8 在没有冲突的情况下直接存放数组，有冲突时，当链表长度小于 8 时，存放在单链表结构中，当链表长度大于 8 时，树化并存放至红黑树的数据结构中。</li><li>插入数据方式：JDK 7 使用的是头插法（先将原位置的数据移到后 1 位，再插入数据到该位置）；JDK 8 使用的是尾插法（直接插入到链表尾部/红黑树）。</li></ul><p><strong>转红黑树的条件</strong></p><p>​        数组长度到64，链表长度到8</p><h1 id="泛型和迭代器"><a href="#泛型和迭代器" class="headerlink" title="泛型和迭代器"></a>泛型和迭代器</h1><p>​        泛型的优点：</p><ul><li><p>安全：不用担心程序运行过程中出现类型转换的错误。</p></li><li><p>避免了类型转换：如果是非泛型，获得的元素是Object类型的，需要强制类型转换。</p></li><li><p>可读性高：编码阶段就可以明确知道集合中元素的类型。</p><p>​    迭代器：</p><p>​        使用迭代器就可以不关注容器的内部细节，用同样的方法遍历不同的容器。</p><p>​    <strong>迭代器的next()方法返回的是Object，因为迭代器不关注内部细节。</strong></p><hr><p><strong>HashMap的四种遍历方式：</strong></p></li></ul><ol><li>EntrySet方式</li><li>迭代器</li><li>遍历key和value</li><li>通过key遍历</li></ol><p>以上方式的代码实现如下：</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"老王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token string">"你猜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方式一：entrySet 遍历</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry item <span class="token operator">:</span> hashMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> item<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方式二：iterator 遍历</span>Iterator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> iterator <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方式三：遍历所有的 key 和 value</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Object k <span class="token operator">:</span> hashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 循环所有的 key</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Object v <span class="token operator">:</span> hashMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 循环所有的值</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方式四：通过 key 值遍历</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Object k <span class="token operator">:</span> hashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>泛型可以修饰类，方法，接口，变量</strong></p><p><strong><code>List&lt;Object&gt;</code>和<code>List&lt;?&gt;</code>的区别？</strong></p><p>​        <code>        List&lt;?&gt;</code>可以容纳任何类型，只不过被赋值后，不能添加和修改。</p><p>​        <code>        List&lt;Object&gt;</code>也可以容纳所有类型，被赋值后，可以添加和修改。</p><p><img src="/2020/08/18/Java%E6%80%BB%E7%BB%93/image-20200822163943759.png" alt="image-20200822163943759"></p><p><strong><code>List</code> 和 <code>List&lt;Object&gt;</code> 的区别是什么？</strong></p><p>​         <code>List</code> 和 <code>List&lt;Object&gt;</code> 都能存储任意类型的数据，但 <code>List</code> 和 <code>List&lt;Object&gt;</code> 的唯一区别就是，<code>List</code> 不会触发编译器的类型安全检查，比如把 <code>List&lt;String&gt;</code> 赋值给 <code>List</code> 是没有任何问题的，但赋值给 <code>List&lt;Object&gt;</code> 就不行，如下图所示：</p><p><img src="/2020/08/18/Java%E6%80%BB%E7%BB%93/blog\source_posts\Java总结\image-20200822164110647.png" alt="image-20200822164110647"></p><p><strong>泛型的工作原理是什么？为什么要有类型擦除？</strong></p><p>​        泛型是通过类型擦除来实现的，类型擦除指的是编译器在编译时，会擦除了所有类型相关的信息，比如 <code>List&lt;String&gt;</code> 在编译后就会变成 <code>List</code> 类型，这样做的目的就是确保能和 Java 5 之前的版本（二进制类库）进行兼容。</p><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p><img src="/2020/08/18/Java%E6%80%BB%E7%BB%93/image-20200822194520862.png" alt="队列"></p><p><strong>队列分类：</strong></p><ol><li>双端队列（Deque）：头部和尾部都支持元素的插入和获取。</li><li>阻塞队列：阻塞队列是指在元素操作时（增加或删除），如果操作未成功，会阻塞等待执行。例如：当添加元素时，如果队列满了，队列会阻塞直到有新的空位生成插入。</li><li>非阻塞队列：非阻塞队列与阻塞队列相反，会直接返回操作的结果。双端队列也是非阻塞队列。</li></ol><p><strong>常见方法：</strong></p><ul><li>add(E)：添加元素到队列尾部，成功返回 true，队列超出时抛出异常；</li><li>offer(E)：添加元素到队列尾部，成功返回 true，队列超出时返回 false；</li><li>remove(Object)：删除元素，成功返回 true，失败返回 false；</li><li>poll()：获取并移除此队列的第一个元素，若队列为空，则返回 null；</li><li>peek()：获取但不移除此队列的第一个元素，若队列为空，则返回 null；</li><li>element()：获取但不移除此队列的第一个元素，若队列为空，则抛异常。</li></ul><p><strong>使用实例</strong></p><pre class=" language-javaj"><code class="language-javaj">Queue<String> queue = new LinkedList<String>();        queue.add("3");        queue.add("1");        queue.add("4");        queue.remove();        while(!queue.isEmpty())        &#123;            System.out.println(queue.poll());        &#125;</code></pre><p><strong>阻塞队列</strong></p><ol><li><p>BlockingQueue</p><p>​    BlockingQueue在java.util.concurrent包下，其他的阻塞队列都实现自BlockingQueue接口。BlockingQueue提供了线程安全的队列访问模式，当向队列中插入数据时，如果队列已满，线程会被阻塞，等待队列中元素被取出后在插入。当从队列中取出数据时，如果队列为空，线程会被阻塞，等待队列中有新元素倍插入后在获取。</p><p>新增的两个方法：</p><p>​    put()：当队列没位置，添加元素时会一直阻塞下去。</p><p>​    take()：获取并移除第一个元素，队列为空时会一直阻塞。</p></li><li><p>LinkedBolckingQueue</p><p>​    LinkedBolckingQueue是一个由链表实现的有界阻塞队列，默认容量是Integer.MAX_VALUE，也可以自定义容量。建议指定容量，因为默认大小时当添加速度大于删除速度时有内存溢出的风险。先进先出的方式。</p></li><li><p>ArrayBlockingQueue</p><p>​    ArrayBlockingQueue是一个由数组实现的有界阻塞队列，容量有限，初始化时必须指定容量大小，容量大小一旦被指定就不可改变。元素不允许为null。</p><p>​    ArrayBlockingQueue也是先进先出的方式，它的内部是由重入锁ReenterLock和Condition条件队列实现的。所以元素存在着公平访问和不公平访问的区别。对于公平的访问，会按照先阻塞的队列先访问的顺序。不公平访问就是所有阻塞的线程竞争，谁抢到就是谁的。</p></li></ol><p><code>ArrayBlockingQueue&lt;String&gt; queue3 = new ArrayBlockingQueue&lt;String&gt;(5);//默认不公平访问 ArrayBlockingQueue&lt;String&gt; queue4 = new ArrayBlockingQueue&lt;String&gt;(5, true);//公平访问</code></p><ol start="4"><li><p>DelayQueue</p><p>​    DelayQueue是一个支持延时获取元素的无界阻塞队列。队列中的元素必须实现Delayed接口，在创建元素时，指定延时的时间。只有经过延时时间后才能获取元素。</p><p>​    实现Delayed接口必须重写两个方法，getDelay（TimeUnit）和compareTo（Delay）。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DelayElement</span> <span class="token keyword">implements</span> <span class="token class-name">Delayed</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token comment" spellcheck="true">// 获取剩余时间</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// do something</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token comment" spellcheck="true">// 队列里元素的排序依据</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Delayed o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// do something</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>完整例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DelayQueue delayQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        delayQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayElement</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        delayQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayElement</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        delayQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayElement</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始时间："</span> <span class="token operator">+</span>  DateFormat<span class="token punctuation">.</span><span class="token function">getDateTimeInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>delayQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>delayQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束时间："</span> <span class="token operator">+</span>  DateFormat<span class="token punctuation">.</span><span class="token function">getDateTimeInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DelayElement</span> <span class="token keyword">implements</span> <span class="token class-name">Delayed</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 延迟截止时间（单面：毫秒）</span>        <span class="token keyword">long</span> delayTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DelayElement</span><span class="token punctuation">(</span><span class="token keyword">long</span> delayTime<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>delayTime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delayTime <span class="token operator">+</span> delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token comment" spellcheck="true">// 获取剩余时间</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> unit<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>delayTime <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token comment" spellcheck="true">// 队列里元素的排序依据</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Delayed o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span> <span class="token operator">></span> o<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span> <span class="token operator">&lt;</span> o<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> DateFormat<span class="token punctuation">.</span><span class="token function">getDateTimeInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>delayTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>结果：</p><pre class=" language-java"><code class="language-java">    开始时间：<span class="token number">2019</span><span class="token operator">-</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">38</span>    <span class="token number">2019</span><span class="token operator">-</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">39</span>    <span class="token number">2019</span><span class="token operator">-</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">41</span>    <span class="token number">2019</span><span class="token operator">-</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">43</span>    结束时间：<span class="token number">2019</span><span class="token operator">-</span><span class="token number">6</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">43</span></code></pre></li></ol><p><strong>非阻塞队列</strong></p><ol><li><p>ConcurrentLinkedQueue</p><p>​    ConcurrentLinkedQueue是一个基于链表的无界线程安全队列。它采用先进先出的规则对节点进行排序。它的出队入队操作都使用CAS（Compare And Swap）更新，这样允许多个线程并发执行，并且不会因为加锁而阻塞线程，使得并发性能更好。</p><pre class=" language-java"><code class="language-java">ConcurrentLinkedQueue concurrentLinkedQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentLinkedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>concurrentLinkedQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>concurrentLinkedQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>concurrentLinkedQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>concurrentLinkedQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   </code></pre></li></ol><p><strong>优先级队列</strong></p><p>​        <strong>PriorityQueue</strong> </p><p>​        它是一个基于优先级堆的无界优先级队列。优先级队列可以根据自然排序或定制排序。优先级队列不允许使用null元素。</p><pre class=" language-java"><code class="language-java">Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> priorityQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 非自然排序，数字倒序</span>        <span class="token keyword">return</span> o2 <span class="token operator">-</span> o1<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>priorityQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>priorityQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>priorityQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>priorityQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Integer i <span class="token operator">=</span> priorityQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>执行结果：3，2，1</p><p>​        PriorityQueue是线程不安全的，当多线程的情况下可以使用PriorityBlockingQueue替代。</p><p>​        PriorityQueue不允许插入null元素。</p><p>​        DelayQueue内部是基于PriorityQueue实现的。</p><hr><p><strong>ArrayBlockingQueue 和 LinkedBlockingQueue 的区别是什么？</strong></p><p>​        ArrayBlockingQueue 和 LinkedBlockingQueue 都实现自阻塞队列 BlockingQueue，它们的区别主要体现在以下几个方面：</p><ul><li>ArrayBlockingQueue 使用时必须指定容量值，LinkedBlockingQueue 可以不用指定；</li><li>ArrayBlockingQueue 的最大容量值是使用时指定的，并且指定之后就不允许修改；而 LinkedBlockingQueue 最大的容量为 Integer.MAX_VALUE；</li><li>ArrayBlockingQueue 数据存储容器是采用数组存储的；而 LinkedBlockingQueue 采用的是 Node 节点存储的。</li></ul><p><strong>LinkedList 中 add() 和 offer() 有什么关系？</strong></p><p>​        add()方法插入元素时，失败的话产生异常。</p><p>​        offer()方法插入元素时，失败的话返回false。</p><p><strong>常见的阻塞队列</strong></p><ul><li>ArrayBlockingQueue，由数组结构组成的有界阻塞队列；</li><li>PriorityBlockingQueue，支持优先级排序的无界阻塞队列；</li><li>SynchronousQueue，是一个不存储元素的阻塞队列，会直接将任务交给消费者，必须等队列中的添加元素被消费后才能继续添加新的元素；</li><li>LinkedBlockingQueue，由链表结构组成的阻塞队列；</li><li>DelayQueue，支持延时获取元素的无界阻塞队列。</li></ul><p><strong>有界队列和无界队列的区别</strong></p><p>有界队列和无界队列的区别如下。</p><ul><li>有界队列：有固定大小的队列叫做有界队列，比如：new ArrayBlockingQueue(6)，6 就是队列的大小。</li><li>无界队列：指的是没有设置固定大小的队列，这些队列的特点是可以直接入列，直到溢出。它们并不是真的无界，它们最大值通常为  Integer.MAX_VALUE，只是平常很少能用到这么大的容量（超过 Integer.MAX_VALUE），因此从使用者的体验上，就相当于  “无界”。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA基本知识 </category>
          
          <category> JAVA学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> JAVA </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL总结</title>
      <link href="/2020/08/18/MySQL%E6%80%BB%E7%BB%93/"/>
      <url>/2020/08/18/MySQL%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数据库三范式"><a href="#1-数据库三范式" class="headerlink" title="1. 数据库三范式"></a>1. 数据库三范式</h2><p>​        第一范式（1NF）：字段具有原子性，不可再分。</p><p>​        第二范式（2NF）：在第一范式的基础上，所有的非主属性依赖于主属性。</p><p>​        第三范式（3NF）：在第二范式的基础上，不存在非主属性传递依赖于主属性。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2020/08/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1、设计模式三大类"><a href="#1、设计模式三大类" class="headerlink" title="1、设计模式三大类"></a>1、设计模式三大类</h1><p>​        创建型模式： 工厂模式，单例模式。。。</p><p>​        结构型模式： 代理模式。。。</p><p>​        行为型模式： 观察者模式。。。</p><h1 id="2、设计模式六原则"><a href="#2、设计模式六原则" class="headerlink" title="2、设计模式六原则"></a>2、设计模式六原则</h1><p>​        <strong>总原则：开闭原则</strong></p><p>​        对拓展开放，对修改关闭。在程序需要扩展的时候，不能修改之前的代码。使用接口和抽象类等实现。</p><ol><li>单一职责原则</li></ol><p>​      一个类实现一个单一的职责，如果职责多，就分多个类写。</p><ol start="2"><li>里氏替换原则</li></ol><p>​      子类对父类的方法尽量不要重载或重写。</p><ol start="3"><li>依赖倒转原则</li></ol><p>​      面向接口编程。</p><ol start="4"><li>接口隔离原则</li></ol><p>​      每个接口中不存在子类必须实现却没有用的方法。如果有，就将接口拆分。</p><ol start="5"><li><p>迪米特法则（最少知道原则）</p><p>一个类对自己依赖的类知道的越少越好，不关心其他类的内部实现逻辑。</p></li><li><p>合成复用原则</p></li></ol><p>​      尽量使用合成/聚合方式，避免继承。</p><h1 id="3、三个基本设计模式"><a href="#3、三个基本设计模式" class="headerlink" title="3、三个基本设计模式"></a>3、三个基本设计模式</h1><h2 id="3-1-工厂模式"><a href="#3-1-工厂模式" class="headerlink" title="3.1 工厂模式"></a>3.1 工厂模式</h2><p>​        本质上就是创建对象，集中管理对象，代码解耦。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">fg</span> <span class="token keyword">implements</span> <span class="token class-name">Student</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i am fg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">fan</span> <span class="token keyword">implements</span> <span class="token class-name">Student</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i am fan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Provider</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Student <span class="token function">getSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">fgProvider</span> <span class="token keyword">implements</span> <span class="token class-name">Provider</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Student <span class="token function">getSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">fg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">fanProvider</span> <span class="token keyword">implements</span> <span class="token class-name">Provider</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Student <span class="token function">getSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">fan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Provider provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fgProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">getSay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        如果想要增加一个功能，就创建一个类实现Student接口，在创建一个类实现Provider。不用修改别的代码，扩展性好。</p><h2 id="3-2-单例模式"><a href="#3-2-单例模式" class="headerlink" title="3.2 单例模式"></a>3.2 单例模式</h2><p>​        某些类的创建会比较频繁，对于一些大型的对象，是很大的一笔开销。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Single1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Single1 single1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Single1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Single1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Single1 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> single1<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="3-3-代理模式"><a href="#3-3-代理模式" class="headerlink" title="3.3 代理模式"></a>3.3 代理模式</h2><p>​        增加代理类，处理额外的操作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Student</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Student student<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>student <span class="token operator">=</span> student<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"123123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>main<span class="token operator">:</span>        Student student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>        student2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p>​        就是将类的接口转化为用户期望的另一个接口，目的是为了消除接口不匹配的类的兼容性问题。  IO</p><h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><p>​        装饰器模式就是给一个对象增加额外的功能，动态的将功能增加到对象上。  IO</p><h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><p>​        将抽象化和实现化解耦，使得二者可以动态变化。  JDBC中的DriverManager</p><h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><p>​        主要目的是实现对象的共享，即共享池。当系统中对象多的时候可以减少系统开销，通常与工厂模式配合使用。</p><h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><p>​        很多个对象，每个对象都持有对下一个对象的引用。请求在这条链上传递，直到有一个对象决定处理这个请求。但是发出者不知道是哪个对象处理的。</p><p>​        应用场景：在隐瞒客户端的时候，对系统进行动态的调整。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2020/08/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2020/08/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/08/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image-20200812144117386.png" alt="数据结构"></p><h1 id="1、算法"><a href="#1、算法" class="headerlink" title="1、算法"></a>1、算法</h1><h1 id="1-1-二分搜索"><a href="#1-1-二分搜索" class="headerlink" title="1.1 二分搜索"></a>1.1 二分搜索</h1><p>​        binary search</p><p>​        有序数组，查一个数的角标。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">halfSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> l <span class="token operator">&lt;=</span> r <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> target <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token punctuation">)</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> target <span class="token operator">></span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token punctuation">)</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="1-2-分治"><a href="#1-2-分治" class="headerlink" title="1.2 分治"></a>1.2 分治</h2><h2 id="1-3-排序"><a href="#1-3-排序" class="headerlink" title="1.3 排序"></a>1.3 排序</h2><p><strong>冒泡排序：</strong> 最好O（n），最差O（n2），平均O（n2）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>选择排序：</strong> 一直都是O（n2），最稳定的算法之一</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><p>深度DFS配栈，广度BFS配队列</p><p>有项无环图</p><p>AOV，AOE</p><p>任务间有依赖关系，让你建任务表，就是拓扑排序</p><h1 id="动态路径规划"><a href="#动态路径规划" class="headerlink" title="动态路径规划"></a>动态路径规划</h1><p>Q1/A：有N*M个格子，从左上到右下，每个格子有数值，只能右，下，右下的走，怎么走总数最小？</p><ol><li><p>构造二维数组dp，填入第一行，第一列</p></li><li><p>填入所有的数据</p></li></ol><p><img src="/2020/08/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image-20200817181429330.png" alt="image-20200817181429330"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">selectPresent</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> presentNum<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>presentNum<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>presentNum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>presentNum<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>presentNum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> presentNum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化第0行</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>presentNum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> presentNum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化第0列</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>presentNum<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> presentNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//循环dp，填入数据</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>presentNum<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>presentNum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getMin</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>presentNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>presentNum<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>presentNum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;=</span>b <span class="token operator">&amp;&amp;</span> a<span class="token operator">&lt;=</span>c<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&lt;=</span>a <span class="token operator">&amp;&amp;</span> b<span class="token operator">&lt;=</span>c<span class="token punctuation">)</span> <span class="token keyword">return</span> b<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&lt;=</span>a <span class="token operator">&amp;&amp;</span> c<span class="token operator">&lt;=</span>b<span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Q2/A:</p><p><img src="/2020/08/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image-20200817183242246.png" alt="image-20200817183242246"></p><p>因为最后一天的面包数一定是1，根据1推出前面的面包数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cakeNumber</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dp<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Q3/A:</p><p><img src="/2020/08/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image-20200817215824562.png" alt="image-20200817215824562"></p><p>哥德巴赫猜想：</p><p>  可以理解为将一个非质数表示为最少的质数和，分情况讨论： </p><p>  1、当该非质数为偶数时，可以表示为两个质数的和（根据哥德巴赫猜想）； </p><p>  2、当该非质数为奇数时，分解为p=(p-2)+2： </p><p>​      若p-2为质数，则可表示为两个质数的和</p><p>​      若p-2为非质数，则可表示为三个质数的和</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">work</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> count <span class="token operator">=</span> n<span class="token punctuation">;</span>         <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             length  <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                 <span class="token keyword">continue</span><span class="token punctuation">;</span>             <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">continue</span><span class="token punctuation">;</span>             <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>             <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 count<span class="token operator">++</span><span class="token punctuation">;</span>                 <span class="token keyword">continue</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 count<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 count<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> count<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                 <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习笔记</title>
      <link href="/2020/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Session"><a href="#1、Session" class="headerlink" title="1、Session"></a>1、Session</h1><p>​    讲一讲session。</p><p>​    因为HTTP是无状态协议，当需要前面请求的信息时，必须重传。这时就引入了session。</p><p>​    session是服务端创建的一个容器。当请求过来时，如果请求没有sessionID，那么服务端就要创建一个新的session，并将sessionID返回给客户端。下一次请求就可以带上这个sessionID得到session里面的数据。</p><p><strong>cookie和session的区别？</strong></p><ol><li>存储位置：cookie的数据存放在浏览器中，session的数据存放在服务器中。</li><li>安全性：cookie不安全，考虑到安全应该使用session</li><li>存储大小：单个cookie的存储大小不能超过4K，并且一个站点最多保存20个cookie，session则没限制</li><li>性能：当访问增多，session会占用服务器的性能。</li></ol><h1 id="2、JAVA内存划分"><a href="#2、JAVA内存划分" class="headerlink" title="2、JAVA内存划分"></a>2、JAVA内存划分</h1><p>​        五大区：堆区，java栈区，本地方法栈区，方法区，程序寄存器区</p><p>​        <strong>堆区：</strong>都是new出来的对象，释放都由垃圾回收器回收。</p><p>​        <strong>java栈区：</strong>存放方法调用信息。</p><p>​        <strong>本地方法栈区：</strong>存放方法的局部变量。</p><p>​        <strong>方法区：</strong>存放静态变量和静态方法。</p><p>​        <strong>PC寄存器区：</strong>存储当前执行的指令。</p><p>Q/A：堆和栈有什么区别？</p><p>​        堆空间可以由程序员自己分配和释放，存放的都是new出来的对象。</p><p>​        栈空间是由编译器自动分配释放，存放的可以是方法信息和局部变量。</p><p>Q/A：类加载器是什么？</p><p>​        它可以把class文件加载到内存中，并生成相应的class对象。</p><p>​        分类：根类，扩展类，系统类，集成系统，自定义类加载器。</p><p>Q/A：什么是内存泄漏？怎么解决？</p><p>​        申请了内存空间而没有释放，比如一个不使用的对象一直占用着内存空间，但是这个对象存在着引用，所以垃圾回收器无法清理。</p><p>​        将不使用的对象置为null，当方法执行完毕后，垃圾回收器就会清理它们。但是只能解决一部分内存泄漏。有专业的工具，这些工具从JVM获取内存信息的方法有两种：JVM TI 和字节码技术。</p><h1 id="3、垃圾回收器"><a href="#3、垃圾回收器" class="headerlink" title="3、垃圾回收器"></a>3、垃圾回收器</h1><h2 id="3-1-要回收哪些区域？"><a href="#3-1-要回收哪些区域？" class="headerlink" title="3.1 要回收哪些区域？"></a>3.1 要回收哪些区域？</h2><p>​        堆区和方法区。</p><p>​        其他的区域它们的生命周期和线程是同步的，当线程销毁时，它们占用的内存也会自动销毁，所以不需要回收。</p><h2 id="3-2-如何判断对象存活？"><a href="#3-2-如何判断对象存活？" class="headerlink" title="3.2 如何判断对象存活？"></a>3.2 如何判断对象存活？</h2><ol><li><p>引用计数法</p><p>堆中的每一个对象都有一个引用计数。当该对象被引用一次，计数器+1，当计数器为0时，回收该对象。</p><p>优点：实现简单，效率高。</p><p>缺点：存在两个对象之间的相互引用。所以java语言没有用这个方法。</p></li><li><p>可达性分析算法</p><p>将所有的引用关系看作一张图，从一个节点GC ROOT开始向下寻找引用关系，当有对象不存在向下的引用关系是，判断为回收对象。</p><p><img src="/2020/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200806210911571.png" alt="可达性算法"></p><p>​    在Java语言中，可作为GC Roots的对象包括下面几种：<br> a) 虚拟机栈中引用的对象（栈帧中的本地变量表）；<br> b) 方法区中类静态属性引用的对象；<br> c) 方法区中常量引用的对象；<br> d) 本地方法栈中JNI（Native方法）引用的对象。</p><h2 id="3-3-最常用的垃圾回收算法"><a href="#3-3-最常用的垃圾回收算法" class="headerlink" title="3.3 最常用的垃圾回收算法"></a>3.3 最常用的垃圾回收算法</h2><p>​        分代收集算法：</p><p>​        分代收集算法是目前大部分JVM的垃圾收集器采用的算法。它的核心思想是根据对象存活的生命周期将内存划分为若干个不同的区域。一般情况下将堆区划分为老年代（Tenured Generation）和新生代（Young Generation）,在堆区之外还有一个代就是永久代（Permanet  Generation）。老年代的特点是每次垃圾收集时只有少量对象需要被回收，而新生代的特点是每次垃圾回收时都有大量的对象需要被回收，那么就可以根据不同代的特点采取最适合的收集算法。</p><p><img src="/2020/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200806211359658.png" alt="三个区域"></p><p>内存被分为下面三个区域：<br> ① 新生代：Enden、form survicor space、to survivor space。<br> ② 老年代 ：<br> ③ 永久代：方法区 </p></li></ol><p>   <strong>新生代的回收算法：</strong></p><p>   ​        包含有Enden、form survicor space、to survivor space三个区，绝大多数最新被创建的对象会被分配到这里，大部分对象在创建之后会变得很快不可达。<br>   ​         ① 所有新生成的对象首先都是放在年轻代的。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。<br>   ​         ② 新生代内存按照8:1:1的比例分为一个eden区和两个survivor(survivor0,survivor1)区。一个Eden区，两个  Survivor区(一般而言)。大部分对象在Eden区中生成。回收时先将eden区存活对象复制到一个survivor0区，然后清空eden区，当这个survivor0区也存放满了时，则将eden区和survivor0区存活对象复制到另一个survivor1区，然后清空eden和这个survivor0区，此时survivor0区是空的，然后将survivor0区和survivor1区交换，即保持survivor1区为空， 如此往复。<br>            ③ 当survivor1区不足以存放 eden和survivor0的存活对象时，就将存活对象直接存放到老年代。若是老年代也满了就会触发一次Full GC，也就是新生代、老年代都进行回收。<br>            ④ 新生代发生的GC也叫做Minor GC，Minor GC发生频率比较高(不一定等Eden区满了才触发)。 </p><p>   <strong>老年代的回收算法：</strong></p><p>   ​        ①  在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。<br>   ​         ② 内存比新生代也大很多(大概比例是1:2)，当老年代内存满时触发Major GC即Full GC，Full GC发生频率比较低，老年代对象存活时间比较长，存活率标记高。 </p><p>   <strong>永久代的回收算法：</strong></p><p>   ​        用于存放静态文件，如Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate 等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。持久代也称方法区。</p><h2 id="3-4-常见的垃圾回收器"><a href="#3-4-常见的垃圾回收器" class="headerlink" title="3.4 常见的垃圾回收器"></a>3.4 常见的垃圾回收器</h2><p>​        Serial收集器，Serial Old收集器，ParNew收集器，Parallel Scavenge收集器，Parallel Old收集器，CMS收集器</p><h2 id="3-5-GC是什么时候触发的？"><a href="#3-5-GC是什么时候触发的？" class="headerlink" title="3.5 GC是什么时候触发的？"></a>3.5 GC是什么时候触发的？</h2><p>​        GC有两种类型，Minor GC和Full GC。</p><ol><li><p>Minor GC：</p><p>​        一般情况下，当新对象生成，并且在Eden申请空间失败时，就会触发Minor  GC，对Eden区域进行GC，清除非存活对象，并且把尚且存活的对象移动到Survivor区。然后整理Survivor的两个区。这种方式的GC是对年轻代的Eden区进行，不会影响到年老代。因为大部分对象都是从Eden区开始的，同时Eden区不会分配的很大，所以Eden区的GC会频繁进行。因而，一般在这里需要使用速度快、效率高的算法，使Eden去能尽快空闲出来。</p></li><li><p>Full GC：</p><p>​        对整个堆进行整理，包括Young、Tenured和Perm。Full  GC因为需要对整个堆进行回收，所以比Scavenge GC要慢，因此应该尽可能减少Full  GC的次数。在对JVM调优的过程中，很大一部分工作就是对于Full GC的调节。有如下原因可能导致Full GC：<br> a) 年老代（Tenured）被写满；<br> b) 持久代（Perm）被写满；<br> c) System.gc()被显示调用；<br> d) 上一次GC之后Heap的各域分配策略动态变化； </p></li></ol><p>Q/A：jvm查看gc命令：</p><p>​    jstat -gc 12538 5000<br> 即会每5秒一次显示进程号为12538的java进成的GC情况，。</p><p>Q/A：如果老年代频繁回收怎么分析解决？</p><p>​        （个人理解）老年代是存放那些在程序中经历了好几次回收仍然还活着或者特别大的对象（这个大就要看你是否设置了-XX：PretenureSizeThreshold 参数了）。检查程序中是否有比较大的对象，或者这个参数设置是否合理。</p><h2 id="3-6-参考资料"><a href="#3-6-参考资料" class="headerlink" title="3.6 参考资料"></a>3.6 参考资料</h2><p><a href="https://blog.csdn.net/weixin_41835916/article/details/81530733">https://blog.csdn.net/weixin_41835916/article/details/81530733</a></p><h1 id="4、JAVA为什么可以跨平台？"><a href="#4、JAVA为什么可以跨平台？" class="headerlink" title="4、JAVA为什么可以跨平台？"></a>4、JAVA为什么可以跨平台？</h1><p>​        总的来说，java代码可以跨平台运行，主要是jvm是跨平台的。    </p><p>​        因为java编译后是字节码。每个系统平台都有自己的jvm。java代码不是直接在电脑上运行的，而是在jvm虚拟机上运行的。</p><h1 id="5、单例模式"><a href="#5、单例模式" class="headerlink" title="5、单例模式"></a>5、单例模式</h1><h2 id="5-1-什么是单例模式？"><a href="#5-1-什么是单例模式？" class="headerlink" title="5.1 什么是单例模式？"></a>5.1 什么是单例模式？</h2><p>​        单例模式就是一个类只能有一个实例化对象，适用那些创建比较频繁和只需一个对象的类。</p><h2 id="5-2-懒汉模式"><a href="#5-2-懒汉模式" class="headerlink" title="5.2 懒汉模式"></a>5.2 懒汉模式</h2><p>​        懒汉模式，顾名思义，就是实例在被用到的时候才去创建。用的时候检查有没有实例，没有的话就创建一个返回。分线程安全和线程不安全两种写法，区别就是用synchronized关键字。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lazy</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Lazy lazy <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Lazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Lazy <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lazy <span class="token operator">==</span> null<span class="token punctuation">)</span>            lazy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lazy<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="5-3-饿汉模式"><a href="#5-3-饿汉模式" class="headerlink" title="5.3 饿汉模式"></a>5.3 饿汉模式</h2><p>​        饿汉模式就是“积极”。实例在初始化的时候就创建好了。优点是线程安全，缺点是浪费内存空间。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hungry</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Hungry hungry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Hungry <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hungry<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="5-4-双检锁"><a href="#5-4-双检锁" class="headerlink" title="5.4 双检锁"></a>5.4 双检锁</h2><p>​        双检锁，又叫双重校验锁，综合了懒汉式和饿汉式两者的优缺点整合而成。看上面代码实现中，特点是在synchronized关键字内外都加了一层 if 条件判断，这样既保证了线程安全，又比直接上锁提高了执行效率，还节省了内存空间。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleCheck</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> DoubleCheck instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">DoubleCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> DoubleCheck <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>DoubleCheck<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="5-5-静态内部类"><a href="#5-5-静态内部类" class="headerlink" title="5.5 静态内部类"></a>5.5 静态内部类</h2><p>​        静态内部类的方式效果类似双检锁，但实现更简单。但这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleTon</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingleTonHolder</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SingleTon INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleTon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingleTon <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SingleTonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="5-6-枚举"><a href="#5-6-枚举" class="headerlink" title="5.6 枚举"></a>5.6 枚举</h2><p>​        枚举的方式是比较少见的一种实现方式，但是看上面的代码实现，却更简洁清晰。并且她还自动支持序列化机制，绝对防止多次实例化。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Single <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AnyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="5-7-小结"><a href="#5-7-小结" class="headerlink" title="5.7 小结"></a>5.7 小结</h2><p>​        一般情况下，懒汉式（包含线程安全和线程不安全两种方式）都比较少用；饿汉式和双检锁都可以使用，可根据具体情况自主选择；在要明确实现 lazy loading 效果时，可以考虑静态内部类的实现方式；若涉及到反序列化创建对象时，大家也可以尝试使用枚举方式。</p><p>​        (数据库连接池)适合单例模式</p><h1 id="6、SSM"><a href="#6、SSM" class="headerlink" title="6、SSM"></a>6、SSM</h1><p>​    SSM：Spring、SpringMVC、Mybatis</p><h2 id="6-1-Spring"><a href="#6-1-Spring" class="headerlink" title="6.1 Spring"></a>6.1 Spring</h2><p>​        内核：</p><ol><li><p>IoC/DI（控制反转/依赖注入）</p></li><li><p>AOP（面向切面编程）</p></li></ol><h3 id="6-1-1-讲一讲SpringIoC？"><a href="#6-1-1-讲一讲SpringIoC？" class="headerlink" title="6.1.1 讲一讲SpringIoC？"></a>6.1.1 讲一讲SpringIoC？</h3><p>​        SpringIoc的意思就是控制反转，它还可以叫做DI（依赖注入）。</p><p>​        所谓IoC，就是用Spring容器去管理对象的生命周期和对象之间的关系。</p><p>​        当我们在日常的编码中，常常会使用new来创建一个对象。但是这种做法会使代码的耦合度提高，不便于日后的维护，升级。所以提出了IoC技术，当我们需要一个对象时，Spring容器会读取配置文件，自动装配，然后直接给我们返回一个对象。通过这种技术，可以使代码解耦，解决了硬编码的问题。</p><p>​        这种技术使用十分简单，但是我自己有写过一个Spring内核，模拟了这个过程。</p><hr><p>​        首先，我用了两个HashMap，一个叫beanInfoMap，另一个叫activeBeanMap。</p><p>​        通过解析配置文件得到所有的bean对象，然后把对象的名字当作key，对象本身当作value存到beanInfoMap中。然后根据用户传入的name，去beanInfoMap中找到Bean对象，在通过这个Bean对象去activeBeanMap中找是否有创建好的Object对象。如果有的话就直接返回这个对象，没有的话则需要根据Bean对象里面的全限定名，得到字节码对象，实例化出一个空的Object对象，通过字节码对象，将类中的属性，参数类型，参数值装配到Object对象中。然后把name，Object对象放到activeBeanMap中，返回这个Object对象。</p><h3 id="6-1-2-讲讲AOP技术？"><a href="#6-1-2-讲讲AOP技术？" class="headerlink" title="6.1.2 讲讲AOP技术？"></a>6.1.2 讲讲AOP技术？</h3><p>​        AOP技术就是面向切面编程，是面向对象编程的补充和完善。</p><p>​        AOP技术就是给分散的对象引入公共行为。这种技术面向对象编程是做不到的，所以提出了AOP面向切面编程。通过AOP技术，减少了系统中的重复代码，降低了模块间的耦合度，有利于后期的维护和升级。</p><p>​        实现AOP的两种操作：</p><ol><li>JDK动态代理技术</li><li>字节码增强技术</li></ol><p>JDK动态代理技术：</p><p>​        被代理类必须实现了接口。</p><p>​        生成一个Proxy的子类，让这个子类实现接口，重写接口的方法，每个方法动态调用中间代理类的invoke方法。</p><p>字节码增强技术：</p><p>​        被代理类可以不实现接口。</p><p>​        生成一个子类去继承被代理类，然后重写父类的方法，增加切片。</p><p>AOP技术我在自己的项目中也使用过，用AOP做了个分页功能。</p><hr><p>​        首先，我用了两个HashMap。第一个叫queryMaps，把uuid当做key，查询出的所有数据当作value存进去。第二个叫queryMethodMaps，把方法原型和参数拼接后转为字符串当作key，uuid作为value。        </p><p>​        我的整体思路就是当一次查询请求发到后端时，先看这个请求里面有没有uuid，如果有uuid，就直接根据uuid从queryMap取出数据就行了。如果没有uuid，那么再判断一下这个方法之前有没有被调用过，如果被调用过，就根据这个方法的全限定名，方法原型和参数的拼接去queryMethodMaps中取出uuid，然后再取出数据。</p><p>​        当上面都不满足时，说明这个数据从未被查询过，所以需要执行这个查询方法。使用AOP代理这个方法，查询出所有数据后，随机生成uuid，把他们放到queryMaps中，然后把这个方法的原型和参数拼接成一个字符串，和uuid一起存到queryMethodMaps中去，最后返回出uuid。</p><h2 id="6-2-SpringMVC"><a href="#6-2-SpringMVC" class="headerlink" title="6.2 SpringMVC"></a>6.2 SpringMVC</h2><p>​        SpringMVC是一种软件体系架构，是MVC的一个实现版本，它把软件体系分为三部分：Model模型、View视图、Controller控制器。</p><p>​        SpringMVC的优点：</p><ol><li>分层设计，利于维护和升级，可重用。</li><li>天生与Spring框架集成。</li><li>让程序员可以更专注在业务层。</li></ol><hr><p>谈一谈SpringMVC？</p><p>​        流程：前端发出请求给Controller，Controller通过请求里的url到handlermapping中找handler，找到handler后发送给handleradpter执行，返回ModleAndView对象，然后交给视图解析器得到页面返回。但是现在我们都不走视图解析器这一套了，使用@Respnsebody注解，要求直接返回json或者基本数据类型。</p><hr><p>​        当前端发送一个请求给控制器时，控制器会根据请求来的URL到HandleMapping中查找。HandleMapping中有两种映射方式。</p><p>​        第一种是BeanNameMapping，一个URL对应一个类的全限定名。如果URL在这里查到的话，就可以根据全限定名得到字节码，实例化一个对象，然后用接口回调技术去调用doGet或doPost方法。</p><p>​        第二种是annotationMethodMapping，一个URL对应一个类中的一个方法。URL在这里查到，首先得到字节码，实例化一个对象。然后根据方法名，参数类型，获取method对象。当方法无参，直接动态调用invoke函数。有参的情况下，就需要从请求里获取实参，装配给方法的参数。调用invoke函数。</p><p>​        之后则需要看如何处理数据，如果要求的是json则需要返回json，jsp同理。</p><h2 id="6-3-Mybatis"><a href="#6-3-Mybatis" class="headerlink" title="6.3 Mybatis"></a>6.3 Mybatis</h2><p>​        Mybatis是一种持久层工具，它的底层是用反射机制实现的。</p><p>​        因为Mybatis的sql语句是写在xml配置文件中的，所以它比Hibernate更加灵活，但是它的可移植性不如Hibernate。</p><p>Q/A：#和$的区别？</p><p>​        #里传入的数据会被当成字符串，自动加上双引号。$里传入的数据是被直接拼接的。#可以防止注入攻击，$不能防止。</p><p>Q/A：常用的标签？</p><p>​        insert delete update select parameterType resultType include （foreach if where）动态sql 等</p><h1 id="7、异常"><a href="#7、异常" class="headerlink" title="7、异常"></a>7、异常</h1><p>​        异常是程序中发生的不可预料的错误，会影响程序的正常运行。</p><p>​        <img src="/2020/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200807195257989.png" alt="异常族谱"></p><p>​        Throwable是所有异常的父类。它有两个子类，Exception和Error。Error类表示Java运行是产生系统内部错误，是程序无法解决的。Exception分为运行时异常和非运行时异常。</p><p>​        Error错误有：链接错误，系统内部错误等。</p><p>​        运行时异常有：空指针异常，数组越界异常等。</p><p>​        非运行时异常：找不到文件异常，IO中断异常等。</p><p>​        Java中可以使用Trows抛出异常，但这种是消极做法。常用的是try-catch捕获异常。把可能发生异常的代码放到try中，当发送异常时，用catch捕获异常并进行处理。最后的finnaly是一定会被执行到的，所以通常把文件的关闭，释放空间放在这里面。</p><p><strong>（出现异常被catch捕获后就会进行捕获后的方法，try中不会执行下去）</strong></p><hr><p>​        我在自己的MVC中自己实现了自定义异常类，用来处理异常。</p><h1 id="8、final，finally，finalize"><a href="#8、final，finally，finalize" class="headerlink" title="8、final，finally，finalize"></a>8、final，finally，finalize</h1><p>​        final可以修饰属性，当修饰属性时这个属性就会变为常量，只可读，但不可修改。</p><p>​                可以修饰方法，表示该方法不可重写，但可以重载。</p><p>​                可以修饰类，表示这个类不可被继承。</p><p>​        finally：异常机制中使用finnaly修饰的代码块，finally代码块中的内容一定会被执行。</p><p>​        finalize：是方法名，它是由java提供的，在垃圾回收对象前执行的方法。它的作用是整理资源或执行其他清理操作。</p><h1 id="9、自我介绍"><a href="#9、自我介绍" class="headerlink" title="9、自我介绍"></a>9、自我介绍</h1><p>​        你好，我叫孔令航，是南京邮电大学2021届毕业生，专业是软件工程，非常高兴可以参加贵公司的面试。我在大学学习期间一直以项目为驱动进行学习，保证自己能够掌握前沿的技术。所以在大二的时候，我就加入了老师的项目组，到目前为止一共参与过两个大型项目，分别是中小学学生管理系统，学校固定资产管理系统，除了这些大项目，我在学习过程中也做过很多小工具，例如ORMapping，聊天室等等。在学习之外，我也有一些自己喜欢做的事情，平时放松的时候喜欢听听歌，看动漫，打游戏，能够保证自己在学习和娱乐之间的平衡。</p><p>​        Hello, my name is Kong linghang. I’m a 2021 graduate of Nanjing University of Posts and telecommunications. I majored in software engineering. I’m very glad to have an interview with your company. During my university study, I have been project driven to ensure that I can master the cutting-edge technology. So when I was a sophomore, I joined the teacher’s project team. So far, I have participated in two large projects, namely, primary and secondary school student management system and school fixed assets management system. In addition to these large projects, I have also made many small tools in the learning process, such as ormapping, chat room, etc. In addition to learning, I also have some things I like to do. When I relax, I like listening to songs, watching cartoons and playing games, which can ensure the balance between learning and entertainment.</p><h2 id="1-详细说说你的项目？"><a href="#1-详细说说你的项目？" class="headerlink" title="1.详细说说你的项目？"></a>1.详细说说你的项目？</h2><p>​        大二期间，我们开发了一个面向中小学的学生管理系统。我在里面的工作主要是学生注册模块，学生登录模块，学生选课模块。</p><p>​        学生注册模块我使用了一个帐号池来解决并发问题，重复刷号问题。学生登录模块做了一个帐号重复登录拦截的功能，还采用RSA加密算法保证帐号登录的安全性。学生选课模块我使用AOP技术做了个Application级别的分页，然后使用synchronized对选课操作加锁，解决并发问题。</p><p>​        大三期间又做了个固定资产管理的项目。我负责资产查询模块，资产调拨模块，用户登录模块。</p><p>​        在资产查询模块，因为数据库的数据量很大，读取速度很慢，所以为了提升速度，我让数据一部分一部分读，先读出一部分，当浏览到最后时，再继续读后面的数据。资产调拨模块就是员工申请一个资产的使用，这条记录就会被添加到调拨表里面，管理员那边可以看到调拨表里的请求，进行操作。用户登录模块跟之前那个项目差不多，都是做了个重复登录拦截的功能。</p><h1 id="10、优缺点"><a href="#10、优缺点" class="headerlink" title="10、优缺点"></a>10、优缺点</h1><p>​        优点：做事情认真，细心。比如我和朋友一起敲代码的时候，都是我帮他们改bug。做完一件事情也会反复检查有没有出错的地方。</p><p>​        缺点：性格有点腼腆，遇到不熟的人容易说不上话，但是混熟之后就好了。</p><h1 id="11、与别人相比，你的优势"><a href="#11、与别人相比，你的优势" class="headerlink" title="11、与别人相比，你的优势"></a>11、与别人相比，你的优势</h1><p>​        和本科生相比：我觉得我的优势在于技术更强，并且可以无缝进入企业中工作。</p><p>​        和研究生相比：我觉得我的技术也不输给它们，并且我还比他们更年轻。</p><h1 id="12、高并发的问题"><a href="#12、高并发的问题" class="headerlink" title="12、高并发的问题"></a>12、高并发的问题</h1><p>​        帐号池（开辟缓存区）线程回收学号，线程预防宕机。</p><h1 id="13、数据库的锁机制"><a href="#13、数据库的锁机制" class="headerlink" title="13、数据库的锁机制"></a>13、数据库的锁机制</h1><p>​        <img src="/2020/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200810135216504.png" alt="锁机制"></p><p>  悲观锁适用增删改操作多的数据库，乐观锁适用查询操作多的数据库。</p><p>  两种常用引擎：表级锁：MyISAM，行级锁：InnoDB</p><h1 id="14、Redis有没有使用过，怎么使用？"><a href="#14、Redis有没有使用过，怎么使用？" class="headerlink" title="14、Redis有没有使用过，怎么使用？"></a>14、Redis有没有使用过，怎么使用？</h1><p>​        当成缓存来用的。   自备份的两种方式RDB，AOF。</p><h1 id="15、常用的Linux命令"><a href="#15、常用的Linux命令" class="headerlink" title="15、常用的Linux命令"></a>15、常用的Linux命令</h1><p>​        cd：切换当前目录</p><p>​        pwd：显示当前目录</p><p>​        ls：查看当前目录下的文件</p><p>​        ping：测试网络是否连通</p><p>​        cat：查看文件内容</p><p>​        cp：复制文件</p><p>​        chmod：修改文件权限</p><p>​        rm -rf /……  删除文件夹</p><p>​        rm -f/…..  删除文件</p><p>​        tail -n 100 Config.log  查看日志的后一百行</p><h1 id="16、Spring常用注解"><a href="#16、Spring常用注解" class="headerlink" title="16、Spring常用注解"></a>16、Spring常用注解</h1><p>​        @Controller, @Service, @Repository,@Component，@Autowired，@Resource</p><p>​        @Autowired：Spring的注解，自动装配，默认按类型装配。</p><p>​        @Resoure：J2EE的注解，默认按name装配。</p><p>​        @Service（业务层），@Component，@Controller（表现层），@Responsitory（持久层）：把对象作为bean注册进容器。</p><h1 id="17、RPC"><a href="#17、RPC" class="headerlink" title="17、RPC"></a>17、RPC</h1><p>​        集群之间的服务通讯</p><h1 id="18、谈谈未来技术的发展趋势"><a href="#18、谈谈未来技术的发展趋势" class="headerlink" title="18、谈谈未来技术的发展趋势"></a>18、谈谈未来技术的发展趋势</h1><p>​        我目前了解到的知识</p><p>​        并不是所有项目适合前后端分离，web合适，别的不合适</p><h1 id="19、死锁，活锁，饥饿"><a href="#19、死锁，活锁，饥饿" class="headerlink" title="19、死锁，活锁，饥饿"></a>19、死锁，活锁，饥饿</h1><p>​            死锁是指两个或两个以上的线程，都持有自己的锁，并且都等对方释放锁资源，造成互相等待对方，如果没有外力推动，那么会一直等待下去。</p><p>​        活锁：两个线程都想获取一个锁资源，但是他俩都认为对方的优先级比他高，都在谦让对方，导致他俩都没办法进行下去。</p><p>​        饥饿：一个线程尽管能继续执行，但是被调度器一直忽视，导致一直无法运行。线程T1占用了资源R，T2请求封锁R，T3请求申请R，T1执行结束后调度器同意了T3的请求，T2一直被无视。</p><p>​        不公平锁可以提高吞吐量，但是会不可避免的造成某些线程的饥饿。</p><h1 id="20、SpringMVC，Boot，Cloud"><a href="#20、SpringMVC，Boot，Cloud" class="headerlink" title="20、SpringMVC，Boot，Cloud"></a>20、SpringMVC，Boot，Cloud</h1><p>SpringBoot：微服务，大量简化MVC的配置，约定大于配置。简化SpringMVC开发的部署。</p><p>SpringCloud：管理微服务，提供注册机制，别人从这里拿。</p><h1 id="21、Java基本数据类型和包装类"><a href="#21、Java基本数据类型和包装类" class="headerlink" title="21、Java基本数据类型和包装类"></a>21、Java基本数据类型和包装类</h1><p>​        1字节：byte，boolean</p><p>​        2字节：short，char</p><p>​        4字节：int float</p><p>​        8字节：long，double</p><p>包装类就是基本数据类型首字母为大写的类，包装类的取值范围[-128，127]</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//面试题：</span>        Integer x1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer x2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x1<span class="token operator">==</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//false ;双等号== 比较的是地址</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        Integer x3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer x4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x3<span class="token operator">==</span>x4<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        Integer x5 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        Integer x6 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x5<span class="token operator">==</span>x6<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x5<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        Integer x7 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        Integer x8 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x7<span class="token operator">==</span>x8<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//false ；Integer类中的享元模式，缓存里的最大值是127,所以超过最大值时就要创建对象了故比较返回false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x7<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        Integer x9 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        Integer x10 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x9<span class="token operator">==</span>x10<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x9<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x10<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><h1 id="22、重载和重写"><a href="#22、重载和重写" class="headerlink" title="22、重载和重写"></a>22、重载和重写</h1><p>​        重载就是在一个类中，几个方法，方法原型是一致的，但是参数的类型，或者参数的个数不一样，这就是重载，构造函数。</p><p>​        重写就是一个类继承或者实现一个接口，重写父类或者接口的方法。重写的方法必须与原方法完全一致，除了代码部分，重写的方法不能抛出比原方法更宽泛的异常，也不可以提升访问权限。</p><p>​        </p><h1 id="23、IP地址"><a href="#23、IP地址" class="headerlink" title="23、IP地址"></a>23、IP地址</h1><p>​        IP地址就是网络号+主机号：</p><p>​        A类地址：1-126</p><p>​        B类地址：128-191</p><p>​        C类地址：192-223</p><p>​        D类是广播地址</p><p>​        E类留给将来使用</p><p>​        网络号全0就是本网络</p><p>​        主机号全0为主机地址，全1为网络地址</p><p>​        保留地址：</p><p>​        A类：10.0.0.0-10.255.255.255</p><p>​        B类：172.16.0.0-172.31.255.255</p><p>​        C类：192.168.0.0-192.168.255.255</p><h1 id="24、JVM的参数"><a href="#24、JVM的参数" class="headerlink" title="24、JVM的参数"></a>24、JVM的参数</h1><p>Xms 初始堆大小，一般是物理地址的1/64</p><p>Xmx 最大堆大小，一般是物理地址的1/4</p><p>Xmn 年轻堆大小</p><p>​        默认空余堆在40%时，就会把堆的大小推到Xmx，在70%时，就会推到Xms。</p><p>​    </p><h1 id="25、集合"><a href="#25、集合" class="headerlink" title="25、集合"></a>25、集合</h1><p><img src="/2020/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200810193638584.png" alt="集合"></p><p>​        ConcurrentHashMap:线程安全，比hashmap更高效。内部使用了分段锁，主干是个SegMent数组。一个segment数组就是一个子哈希表，对不同的segment数组操作不用考虑锁竞争。</p><h1 id="26、线程"><a href="#26、线程" class="headerlink" title="26、线程"></a>26、线程</h1><p>线程的生命周期：创建、就绪、运行、阻塞、死亡。</p><p><img src="/2020/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200909094218700.png" alt="线程的生命周期"></p><p>同步代码块和同步方法：</p><p>​        同步方法会给类的所有方法加同一把锁，方法不能同时进行。</p><p>​        同步代码块给特定的方法加特定的锁，别的方法可以同时进行。</p><p>死锁：</p><p>​        两个线程都有自己的锁，都在等待对方释放自己的锁。</p><p>volatile和syn：</p><p>​    volatile作用在变量上，不能保证原子性。</p><p>​    syn作用在变量，方法，类上，可以保证原子性。</p><p>​    volatile不会引起线程阻塞，syn会引起线程阻塞。</p><p>Lock和syn的区别：</p><p>​        Lock更精细一点，可以给不同的方法加不同的锁。</p><p>​        syn只能给所有的方法上同一把锁。</p><p><strong>创建线程池的五个参数：</strong></p><p>​        核心线程数，最大线程数，非核心线程的闲置时间，时间的单位，任务队列。</p><p>ThreadPoolExecutor.execute(Runnable) 提交任务</p><p>执行过程：</p><ol><li>当核心线程数未满，就创建核心线程执行任务。</li><li>核心线程数满了，就把任务放到队列。</li><li>队列满了，就创建非核心线程执行任务。</li><li>队列满了，线程最大数也够了，就抛出异常。</li></ol><p><strong>常见的四种线程池：</strong></p><ol><li><p>可缓存线程池：没有核心线程，线程数量不限。在创建任务时，如果有空闲的线程就让它去做，没有就创建一个线程。当线程闲置60s就会被销毁。</p></li><li><p>定长线程池：线程数量就是核心线程的数量。如果当前线程数小于核心线程数，即使有闲置的线程，也会创建一个新的核心线程去执行任务。如果当前线程数大于核心线程数，就会用闲置的线程。</p></li><li><p>单线程池：就是一条线程，所有任务按照顺序执行。</p></li><li><p>延时线程池：不仅设置了核心线程数，总线程数也是这个。是唯一一种可以延时进行和周期执行任务的线程。</p></li></ol><p><strong>ThreadFactory就是一个线程接口，用来创建线程。</strong></p><h1 id="27、事务"><a href="#27、事务" class="headerlink" title="27、事务"></a>27、事务</h1><p>​        事务就是一组要执行的操作，这组操作要么全部执行完，要么一个都不执行。</p><p>​        四个特性：ACID原子性，一致性，永久性，隔离性。</p><p>​        三种并发问题：脏读，不可重复读，幻读。</p><p>​        脏读：事务A修改了一个数据，事务B读了这个数据，但是事务A进行回滚操作，那么事务B读的这个数据就是脏读。</p><p>​        不可重复读：事务A一直读一条数据，事务B在A读数据的时候修改了这条数据，那么事务A两次读取的数据不一样，这就是不可重复。</p><p>​        幻读：事务A修改了表中的所有数据，但是B添加了一条数据，事务A发现所有数据中仍有一条未修改的数据，好像出现了幻觉。</p><p>​        四种隔离级别：读未提交，读已提交，可重复读（默认），串行化。</p><hr><p>我还做过使用spring框架对事务的管理</p><p>​        编程式事务管理，声明式事务管理</p><p>​        编程式事务管理就是通过具体的代码实现，包括事务的开始，事务的完成，事务的回滚操作。</p><p>​        声明式事务管理就是通过AOP切片技术，把事务管理作为一个切面单独编写，移植到代码中，可以通过配置文件或者注解两种形式实现。</p><h1 id="28、触发器和存储过程"><a href="#28、触发器和存储过程" class="headerlink" title="28、触发器和存储过程"></a>28、触发器和存储过程</h1><p>​        触发器就是当用户对一张表做增删改的时候，可以同时对其他的表做操作。但是因为移植性太差，所以现在不使用。</p><p>​        存储过程就是数据库里的一段代码。需要调用才能使用。</p><h1 id="29、数据库连接池"><a href="#29、数据库连接池" class="headerlink" title="29、数据库连接池"></a>29、数据库连接池</h1><p>​        管理和释放数据库连接。它允许程序重复使用现有的数据库连接。常用的两个数据源：<strong>DB3P，C3P0</strong></p><p>​        我也自己做过一个数据库连接池，用的单例模式。</p><h1 id="30、union和union-all的区别"><a href="#30、union和union-all的区别" class="headerlink" title="30、union和union all的区别"></a>30、union和union all的区别</h1><p>​        都是合并两个查询结果。union会去掉重复记录，union all直接返回。</p><h1 id="31、ajax技术"><a href="#31、ajax技术" class="headerlink" title="31、ajax技术"></a>31、ajax技术</h1><p>​        ajax是一种前端框架，可以在不重新加载整个页面的情况下，实现页面的局部更新，用来实现前后端分离。</p><p>使用到的技术：</p><ol><li>使用xml和json进行数据交互。</li><li>XMLHttpRequest进行异步数据接受。</li><li>使用JS将前面的技术绑定在一起。</li></ol><p>请求参数：</p><ol><li>get，post，用来指定请求的类型。</li><li>url</li><li>同步还是异步，true表示异步</li></ol><p>使用步骤：</p><ol><li><p>创建ajax对象（new XMLHttpRequst）</p></li><li><p>设置open</p></li><li><p>设置onReadyStateChange</p></li><li><p>设置send</p></li></ol><h1 id="32、request和session的区别"><a href="#32、request和session的区别" class="headerlink" title="32、request和session的区别"></a>32、request和session的区别</h1><p>​        request用于提交表单数据，生命周期是http开始请求，服务端响应并返回数据的整个过程。</p><p>​        session用于存储数据，再整个会话期都有效，可以用来完成会话追踪。</p><p>​        request占用资源少，安全性高，但是缺乏持久性。session占用资源多，可以实现会话追踪。</p><h1 id="33、redirect和forward"><a href="#33、redirect和forward" class="headerlink" title="33、redirect和forward"></a>33、redirect和forward</h1><p>​        redirect是重定向，它会发送一个状态码给浏览器，让浏览器去请求新的url地址，会发送两次HTTP请求。</p><p>​        forward是请求转发，它会直接访问浏览器发过来的url，然后返回响应给浏览器，所以HTTP只用发送一次。</p><h1 id="34、前后端通信的方式"><a href="#34、前后端通信的方式" class="headerlink" title="34、前后端通信的方式"></a>34、前后端通信的方式</h1><p>​        根据HTTP协议通信，可以是浏览器发的请求，也可以使ajax发送的请求。</p><h1 id="35、J2EE基本组件：Servlet，Filter，Listener"><a href="#35、J2EE基本组件：Servlet，Filter，Listener" class="headerlink" title="35、J2EE基本组件：Servlet，Filter，Listener"></a>35、J2EE基本组件：Servlet，Filter，Listener</h1><p>​        Servlet：是服务端的应用程序，可以动态生成web页面，在客户端请求和服务端响应的中间层。继承HttpServlet类，重写doGet，doPost方法。</p><p>​        Filter：过滤器，主要的作用是做一些编码转换，作用在请求到servlet之前，对所有的请求都会进行过滤操作，并且没有响应。</p><p>​        Listener：监听器。常用监听session的创建和销毁，可以用作统计网站在线人数。</p><p>执行顺序：Linstener&gt;Filter&gt;Servlet</p><h1 id="36、Servlet的生命周期"><a href="#36、Servlet的生命周期" class="headerlink" title="36、Servlet的生命周期"></a>36、Servlet的生命周期</h1><p>​        加载并实例化，初始化，服务，销毁</p><p>​        当容器启动时，会加载servlet的class文件，实例化一个对象。</p><p>​        当第一个请求发给servlet时，调用init函数初始化。init函数在整个生命周期只能被调用一次。</p><p>​        然后调用service方法，用过这个方法调用doget和dopost方法。</p><p>​        如果长期不使用这个servlet，会自动销毁。</p><h1 id="37、过滤器和拦截器"><a href="#37、过滤器和拦截器" class="headerlink" title="37、过滤器和拦截器"></a>37、过滤器和拦截器</h1><p>​        过滤器是J2EE组件，作用所有的请求，没有响应，依赖于servlet。编码转换</p><p>​        拦截器是SpringMVC的组件，只作用一部分请求，会有响应，不依赖servlet。权限管理。</p><h1 id="38、NIO"><a href="#38、NIO" class="headerlink" title="38、NIO"></a>38、NIO</h1><h1 id="39、微信公众号开发"><a href="#39、微信公众号开发" class="headerlink" title="39、微信公众号开发"></a>39、微信公众号开发</h1><h1 id="40、-泛型擦除，上下限"><a href="#40、-泛型擦除，上下限" class="headerlink" title="40、 泛型擦除，上下限"></a>40、 泛型擦除，上下限</h1><p>​        <strong>泛型擦除：</strong></p><p>​        当指定泛型类型时：<code>ArrayQueueT&lt;String&gt; queue = new ArrayQueueT&lt;String&gt;();</code></p><p>​        编译器会报错<code>queue.inQueue(99)</code></p><p>​        但是在字节码世界中，内部还是Object。</p><pre class=" language-java"><code class="language-java">        Class <span class="token class-name">clz</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Method method <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"inQueue"</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Method method2 <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"outQueue"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​          上下限：</p><p>​        普通的泛型：<code>&lt;T&gt;</code></p><p>​        定义上限：<code>&lt;T extends Demo&gt;</code>，所有继承Demo的子类，包括Demo类，都可以作为T的参数。</p><p>​        定义下限：<code>&lt;T super SubDemo&gt;</code>，所有SubDemo的父类，包括SubDemo类，都可以作为T的参数。</p><h1 id="41、栈溢出，堆溢出"><a href="#41、栈溢出，堆溢出" class="headerlink" title="41、栈溢出，堆溢出"></a>41、栈溢出，堆溢出</h1><p>​        堆溢出：<strong>OutOfMemoryError</strong> ，创建对象时没有足够的堆空间分配内存</p><pre class=" language-java"><code class="language-java">        ArrayList<span class="token operator">&lt;</span>Byte<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Byte<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Byte</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        栈溢出：<strong>StackOverFlowError</strong> ，栈深度大于虚拟机提供的最大栈深度</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">digui</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">digui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">digui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="42、强引用，软引用，弱引用，虚引用"><a href="#42、强引用，软引用，弱引用，虚引用" class="headerlink" title="42、强引用，软引用，弱引用，虚引用"></a>42、强引用，软引用，弱引用，虚引用</h1><pre class=" language-java"><code class="language-java">        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"qq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//强引用</span>        SoftReference<span class="token operator">&lt;</span>String<span class="token operator">></span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//软引用</span>        WeakReference<span class="token operator">&lt;</span>String<span class="token operator">></span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//弱引用</span>        PhantomReference<span class="token operator">&lt;</span>String<span class="token operator">></span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//虚引用</span></code></pre><p>Q/A:为什么提出这些引用？</p><p>​        Java是由Jvm负责分配和释放内存，这是它的优点。但是这种方式不够灵活，所有提出了这四种引用。有些一直需要的对象就用强引用，有些不关键的对象就用其他引用。</p><ol><li><p><strong>强引用：</strong>永远不会回收，Jvm宁愿抛出OutOfMemoryError异常，也不会回收这一类对象。</p></li><li><p><strong>软引用：</strong>如果内存足够，就不会回收。当没位置了，就会回收它。软引用可以用来实现内存敏感的高速缓存。软引用可以用在浏览器的后退按钮。</p></li><li><p><strong>弱引用：</strong>不管内存有没有空位，只要扫描到它，就会回收。</p></li><li><p><strong>虚引用：</strong>就跟没有引用一样，在任何时候都会被回收。常用来跟踪对象被垃圾回收的活动。必须和引用队列联合使用。</p></li></ol><p><img src="/2020/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200815171303437.png" alt="四种引用"></p><h1 id="43、switch–case"><a href="#43、switch–case" class="headerlink" title="43、switch–case"></a>43、switch–case</h1><p>​        switch后的括号可以放哪些基本数据类型？</p><p>​        1字节：byte</p><p>​        2字节：short，char</p><p>​        4字节：int</p><p>​        8字节：</p><h1 id="44、二叉搜索树"><a href="#44、二叉搜索树" class="headerlink" title="44、二叉搜索树"></a>44、二叉搜索树</h1><p>​        左子树小于根节点</p><p>​        右子树大于根节点</p><p><img src="/2020/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200907154702586.png" alt="二叉搜索树"></p><p>​        查询复杂度：深度越低，复杂度越低  O（logn—n）（二分查找）</p><p><strong>Q/A：给定一颗二叉搜索树，给定树中的一个数，怎么查找它的上一个数？（非遍历）</strong></p><p>​        </p><h1 id="45、进程和线程之间的通讯"><a href="#45、进程和线程之间的通讯" class="headerlink" title="45、进程和线程之间的通讯"></a>45、进程和线程之间的通讯</h1><p>​        进程通讯：消息队列、套接字、共享内存。</p><p>​        线程通讯：wait和notify，定义一个volatile修饰的全局变量控制。</p><h1 id="46、两个项目的数据库设计"><a href="#46、两个项目的数据库设计" class="headerlink" title="46、两个项目的数据库设计"></a>46、两个项目的数据库设计</h1><pre><code>      1. 中小学学生管理系统   * studentInfo   * professionInfo   * courseInfo   * scInfo</code></pre><ol start="2"><li>固定资产管理<ul><li>userInfo</li><li>assetsInfo</li><li>user-assetsInfo</li><li>applyInfo</li></ul></li></ol><h1 id="47、Spring注解"><a href="#47、Spring注解" class="headerlink" title="47、Spring注解"></a>47、Spring注解</h1><p>​        @Controller（控制层）  @Service（业务层） @Repositony（持久层） @Component（中立的类）  都是注解在类上面，当扫描器扫到这些类时会将它们创建为Bean对象保存在容器中。</p><p>​        @Autowired  @Resource   注解在对象上面，自动为对象装配。</p><p>​        @Autowired 是Spring的注解，默认是按类型装配，想要使用名字装配可以配合@Qualifiter注解</p><p>​        @Resuorce 是J2EE的注解，默认按名字装配，其次是类型装配（推荐使用，解耦）</p><h1 id="48、MVC的注解"><a href="#48、MVC的注解" class="headerlink" title="48、MVC的注解"></a>48、MVC的注解</h1><p>​        @Controller注解表示扫描到这个类时，会自动把它加载到Spring的Bean工厂，并且对其实例化。</p><p>​        @RequestMapping就是一个映射路径，让我们访问到相应的方法。</p><p>​        @Response就是让返回的东西不走视图解析器，而是通过json或基本数据类型返回。</p><p><img src="/2020/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200909093952538.png" alt="Spring注解"></p><h1 id="49、XML解析"><a href="#49、XML解析" class="headerlink" title="49、XML解析"></a>49、XML解析</h1><pre><code> 四种解析方式：SAX，DOM，JDOM，DOM4J</code></pre><p><img src="/2020/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/blog\source_posts\学习笔记\image-20200909100751356.png" alt="SAX VS DOM"></p><p>​        流程：获取xml文件的位置，得到根节点，遍历子节点。</p><h1 id="50、-双亲委托机制"><a href="#50、-双亲委托机制" class="headerlink" title="50、 双亲委托机制"></a>50、 双亲委托机制</h1><p>​        核心思想：从底向上检查类是否被加载，从顶向下尝试加载类</p><p><img src="/2020/08/07/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200909101907095.png" alt="双亲委托机制"></p><p>具体加载过程：</p><ol><li>当APP ClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把请求委派给父类加载器Extension去完成。</li><li>Extension也不会尝试去加载，会委派给Bootstrap去完成。</li><li>如果Bootstrap加载失败，会让extension加载。</li><li>extension加载失败，会给app加载。app加载也失败，会报出异常ClassNotFountException</li></ol><h1 id="51、集合的扩容"><a href="#51、集合的扩容" class="headerlink" title="51、集合的扩容"></a>51、集合的扩容</h1><ol><li>ArrayList：默认容量为10，扩容1.5倍。   10  15  22  33 。。</li><li>Vector：默认容量为10，扩容2倍。10 20 40 80。。</li><li>Stack：继承于Vector，所以也是2倍速度扩容。</li></ol><hr><ol><li><p>HashMap：默认容量16，加载因子0.75，扩容2倍，最大容量2的30次方</p></li><li><p>HashTable：默认容量11，加载因子0.75，扩容2倍加1</p></li></ol><h1 id="52、JDK1-8特性"><a href="#52、JDK1-8特性" class="headerlink" title="52、JDK1.8特性"></a>52、JDK1.8特性</h1><ol><li><p>接口中可以使用关键字defult，static定义方法并实现方法</p></li><li><p>lambda表达式。（使用lambda表达式必须有接口，并且接口只能有一个抽象方法。必须具有上下文推断）</p></li><li><p>函数式接口@FunctionalInterface。当接口的上面有这个时，这个接口只能定义一个抽象方法。</p></li><li><p>增加了日期类，线程安全LocalDateTime</p></li><li><p>Stream API 。流是一个集合元素的函数模型，它并不是集合，也不是数据结构，其本身不存储任何值。可以传入集合数组等，不改变原值，返回出持有结果的新流。</p></li><li><p>HashMap。  采用数据加链表加红黑树的数据结构。采用尾插法。</p></li><li><p>ConcurrentHashMap。采用CAS算法解决并发问题，而不是锁分段。数据结构也变为数组加链表加红黑树。</p><p>​    CAS算法就是compare and swap 比较交换算法。是乐观锁的实现，可以使用非阻塞方式来代替锁。在并发包下常被用到。会造成ABA问题。通过本地接口实现。</p><p>​    循环时间长，开销很大。</p><p>​    只能保证一个共享变量的原子操作。</p><p>​    ABA问题：线程A查询过一个数据为100，线程B在线程A下一次查询之前把数据-50又+50，线程A查询还是100.但期间这个数据被修改过。</p><p>​    通过加版本号的方式解决。</p></li></ol><h1 id="53、Get和Post的区别"><a href="#53、Get和Post的区别" class="headerlink" title="53、Get和Post的区别"></a>53、Get和Post的区别</h1><p>​      他俩都是HTTP请求的方式。Http协议是基于TCP/IP协议的，所以这两种请求方式本质上是没有区别的。</p><p>​        网上的答案：</p><ol><li><p>Get的请求数据是拼接在URL后面的，Post的请求数据是放在请求体中的。</p></li><li><p>Get效率比Post高。</p></li><li><p>Post安全性高。</p></li><li><p>Get请求数据有限制，因为URL的长度，Post无限制</p></li><li><p>Get的参数的数据类型必须数ASCII字符，Post无限制</p><p>​    但是，Get和Post都是基于TCP链接传输的，所以本质上是没有区别的。</p><p>​    这些只是HTTP提出的行为准则。Get请求也可以在请求体放数据，Post也可以在url后拼接数据。但是这么做有的服务器会全部读出，有的服务器则会忽略。大多数浏览器都会限制url的长度，所以会出现请求参数的限制。</p></li></ol><p>​      Get和Post本质上都是TCP链接，并无差别。但是因为HTTP的规定和浏览器、服务器的限制，导致它们在实际过程中出现不同。</p><p>​        Get请求会产生一个TCP数据包，Post请求会产生两个TCP数据包。</p><p>​        Get会把header和data一起发送，返回数据浏览器会响应200.</p><p>​        Post会分两次发送，第一次header，响应100继续，第二次data，响应200</p><h1 id="54、HTTP响应码"><a href="#54、HTTP响应码" class="headerlink" title="54、HTTP响应码"></a>54、HTTP响应码</h1><ul><li>100：响应正常，可以继续发送请求</li><li>200：请求成功。</li><li>301：没有请求成功，必须采取进一步的动作。</li><li>404：请求资源不存在。</li><li>500：服务器内部错误，无法完成请求。</li></ul><h1 id="55、自定义注解"><a href="#55、自定义注解" class="headerlink" title="55、自定义注解"></a>55、自定义注解</h1><p>使用@interface声明一个注解。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"asd"</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>使用元注解规定范围。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Documented</span>            <span class="token comment" spellcheck="true">//该注解标记的元素可以被文档化</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//注解的生命周期</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//可以应用的Java元素类型</span><span class="token annotation punctuation">@Inherited</span>            <span class="token comment" spellcheck="true">//该类的子类同样有注解</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"asd"</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>写一个类，加注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Info</span><span class="token punctuation">(</span>isDelete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isDelete<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Main中通过反射测试注解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clz</span> <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>clz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"存在注解"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Info info <span class="token operator">=</span> <span class="token punctuation">(</span>Info<span class="token punctuation">)</span>clz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Info<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取该对象上Info类型的注解</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>info<span class="token punctuation">.</span><span class="token function">isDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="56、RPC负载均衡"><a href="#56、RPC负载均衡" class="headerlink" title="56、RPC负载均衡"></a>56、RPC负载均衡</h1><p>​        一个服务有多个请求地址的时候，会返回多个地址。RPC负载均衡就是我们要给哪台机器发出请求。</p><ul><li>随机挑选</li><li>轮询</li><li>LRU</li><li>LFU </li></ul><h1 id="57、数据库和缓存数据不一致"><a href="#57、数据库和缓存数据不一致" class="headerlink" title="57、数据库和缓存数据不一致"></a>57、数据库和缓存数据不一致</h1><p>​        并发量低的情况下：进行更新操作时，删缓存，再去改数据库，更新缓存，返回值。</p><p>​        并发量高的情况：</p><p>​        场景：有一个更新操作想要把商品数100改成99，先删除缓存，但是在没有更新好的情况下，另一个查询操作查数据，查缓存没有，再查数据库100，写入缓存，返回。但是更新好之后数据库是99，缓存是100.</p><p>​        解决方案：通过队列解决这个问题，创建任意个数的队列，如20个，然后将商品ID去hash值，向队列个数取模，将更新操作放入队列中，等更新操作完成后移除队列。此时来一个查询操作，可以先判断队列中有没有更新操作，如果有，就放到队列中，没有就直接查。</p><p>​        优化：如果有多个相同的查询操作，后面的操作就不用加到队列里，让他们循环读缓存，如果查询一段时间后缓存中还是没有，那就直接读数据库。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPC技术</title>
      <link href="/2020/08/07/RPC%E6%8A%80%E6%9C%AF/"/>
      <url>/2020/08/07/RPC%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="1、RPC技术介绍"><a href="#1、RPC技术介绍" class="headerlink" title="1、RPC技术介绍"></a>1、RPC技术介绍</h1><p>​        RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。</p><p>​        RPC采用客户机/服务器模式。请求程序就是一个客户机，而服务提供程序就是一个服务器。首先，客户机调用进程发送一个有进程参数的调用信息到服务进程， 然后等待应答信息。在服务器端，进程保持睡眠状态直到调用信息到达为止。当一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信息，获得进程结果，然后调用执行继续进行。</p><p><img src="/2020/08/07/RPC%E6%8A%80%E6%9C%AF/blog\source_posts\RPC技术\image-20200807140519348.png" alt="RPC流程图"></p><p>​        RPC 调用分类RPC 调用的分类方式有很多种。 </p><p>从通信协议层面可以分为： </p><p>​        基于 HTTP 协议的 RPC； </p><p>​        基于二进制协议的 RPC； </p><p>​        基于 TCP 协议的 RPC。 </p><p>从是否跨平台可分为： </p><p>​        单语言 RPC，如 RMI, Remoting； </p><p>​        跨平台 RPC，如 google protobuffer, restful json，http XML。 </p><p>从调用过程来看， 可以分为同步通信RPC和异步通信RPC： </p><p>​        同步 RPC：指的是客户端发起调用后，必须等待调用执行完成并返回结果； </p><p>​        异步 RPC：指客户方调用后不关心执行结果返回，如果客户端需要结果，可用 </p><p>​        通过提供异步 callback 回调获取返回信息。大部分 RPC 框架都同时支持这两种方式的 </p><p>调用。</p><h1 id="2、实现"><a href="#2、实现" class="headerlink" title="2、实现"></a>2、实现</h1><p>客户端的中间代理类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 客户端接口代理 * 当客户端接口方法被调用的时候，把方法名，方法参数作为参数。 * 传送给远程服务执行，然后获取返回值 *  *  DynDemo       $Proxy0 重新方法，方法里调用dynDemo.invoke */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">,</span>    Serializable<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String ip<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// private Class&lt;?> c;</span>    <span class="token keyword">private</span> String class4Name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RpcProxy</span><span class="token punctuation">(</span>String ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> String c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ip <span class="token operator">=</span> ip<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>class4Name <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 动态代理类，当调用接口方法的时候转为调用此方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args            <span class="token punctuation">)</span><span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用作返回值</span>        Object o <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 通过socket调用远程服务</span>        Socket s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 组装为一个保留了要调用的类，方法名及参数的对象，然后序列化之后传给远程</span>        RpcObject rpcObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcObject</span><span class="token punctuation">(</span>class4Name<span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream os <span class="token operator">=</span> null<span class="token punctuation">;</span>        ObjectInputStream is <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在socket输入流建立对象流</span>            os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>rpcObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把对象序列化，发送到服务端；</span>            os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 马上发送</span>            <span class="token comment" spellcheck="true">// 从远程得到返回结果</span>          <span class="token comment" spellcheck="true">//在socket输入流建立对象流</span>            is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            o <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 反序列化，获取结果</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>os<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>is<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> o<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>服务端线程：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Socket s<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RpcThread</span><span class="token punctuation">(</span>Socket s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ObjectInputStream is <span class="token operator">=</span> null<span class="token punctuation">;</span>        ObjectOutputStream os <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从TCP报文获取数据</span>            is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 得到远程调用参数，包含了接口名，调用方法，方法参数</span>            RpcObject rpcObject <span class="token operator">=</span> <span class="token punctuation">(</span>RpcObject<span class="token punctuation">)</span> is<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Method:"</span><span class="token operator">+</span>rpcObject<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 构建接口的实现类，然后通过反射调用方法</span>            Object o <span class="token operator">=</span> <span class="token function">getObject</span><span class="token punctuation">(</span>rpcObject<span class="token punctuation">.</span><span class="token function">getClass4Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"class:"</span><span class="token operator">+</span>rpcObject<span class="token punctuation">.</span><span class="token function">getClass4Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object reO <span class="token operator">=</span> <span class="token function">executeMethod</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> rpcObject<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rpcObject<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 输出返回值</span>            os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>reO<span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>is<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>os<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过反射技术执行方法，并返回返回值     * @param o  // 方法作用在该对象上的     * @param methodName     * @param args     * @return     */</span>    <span class="token keyword">private</span> Object <span class="token function">executeMethod</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> String methodName<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Object objR <span class="token operator">=</span> null<span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span>args<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Object arg <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            cs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arg<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取类的方法；</span>            Method m <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> cs<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//动态调用该方法</span>            objR <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> objR<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据接口名得到实例     * @param c     * @return     */</span>    <span class="token keyword">private</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span>String c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Object o <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Class <span class="token class-name">clz</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            o<span class="token operator">=</span>clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> o<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h1><p>​        RPC技术就是远程调用函数。</p><p>​        客户端首先把需要调用的函数信息发送给代理类，代理类序列化封装参数，通过Socket网络传输发送给服务端，服务端接收到信息后反序列化，调用函数。</p><p>​        然后再将结果序列化，发送给客户端，客户端反序列化网络数据，返回方法调用结果。</p><hr><p>​        客户端怎么进行工作的？</p><ul><li>把客户端接口代理。</li><li>当客户端接口方法被调用的时候，把方法名，方法参数作为参数。</li><li>调用中间代理类的invoke函数，序列化。</li><li>传送给远程服务执行，然后获取返回值。</li></ul><p>​        服务端怎么进行工作的？</p><ol><li>接受到网络数据后，先反序列化得到远程调用参数（类的全限定名，调用方法，请求参数）。</li><li>通过类的全限定名构建接口的实现类，然后反射机制调用方法。</li><li>输出返回值。</li></ol><h1 id="4、负载均衡"><a href="#4、负载均衡" class="headerlink" title="4、负载均衡"></a>4、负载均衡</h1><p>​        使用集群时，当一个服务有多个请求地址的时候，会返回多个地址。</p><p>​        所以需要负载均衡来控制我们想要请求哪台机器来获得请求。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA基本技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信 </tag>
            
            <tag> C/S </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于AOP实现分页</title>
      <link href="/2020/08/03/%E5%9F%BA%E4%BA%8EAOP%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5/"/>
      <url>/2020/08/03/%E5%9F%BA%E4%BA%8EAOP%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="1、实现思路"><a href="#1、实现思路" class="headerlink" title="1、实现思路"></a>1、实现思路</h1><p>​        之前做的分页只是session级别的，在同一个session中才可以取分页信息。</p><p>​        基于AOP技术实现的分页功能是application级别，所有访问web项目的请求，只要满足条件，就可以从session中取出分页信息。</p><p>​        完整的思路如下：</p><ol><li><p>定义两个HashMap。</p><ul><li>第一个的key是uuid，value是查询的所有数据。</li><li>第二个的key是一个全限定名+方法原型+参数拼接的字符串，value是对应的uuid。</li></ul></li><li><p>发出请求后：</p><ul><li>判断PageInfo中的uuid是否为空。若不为null，则直接从第一个HashMap中取数据。</li><li>若uuid=null，则继续判断：该请求的methodNameAndParams是否在第二个HashMap中，若存在，则根据key取出uuid，然后从第一个HashMap中取数据。</li><li>若不存在，则访问数据库，此时该方法被代理。</li><li>在切片类中，先调用原方法得到所有数据，然后随机生成uuid，将这两部分放入第一个HashMap中。除此之外，还会通过<code>proceedingJoinPoint</code>对象得到methodNameAndParams，把它和uuid放到第二个HashMap中。</li></ul></li><li><p>切片类会返回出uuid。在controller中通过得到的uuid取数据。</p></li></ol><h1 id="2、代码实现"><a href="#2、代码实现" class="headerlink" title="2、代码实现"></a>2、代码实现</h1><p>​        业务层的代码不加赘述。值得一提的是<strong>查询数据的方法返回类型应为Object。</strong></p><p>​        首先需要在配置文件中添加<code>&lt;aop:aspectj-autoproxy/&gt;</code></p><p>​        切片类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryAspectInfo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.studentinfo.service.impl.*.query*(..))"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 使用一个返回值为void、方法体为空的方法来命名切入点</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">myPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"myPointCut()"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> Object <span class="token function">myAround</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span>             <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"分页查询..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行当前目标方法</span>        Object resultData <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结束</span>      <span class="token comment" spellcheck="true">//拼接字符串</span>          String method<span class="token operator">=</span>proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>          proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           StringBuffer stf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           stf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>method<span class="token operator">+</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token operator">=</span>proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//joinPoint. </span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>Object object <span class="token operator">:</span> args<span class="token punctuation">)</span>           <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//System.out.println(object.getClass().getName()); </span>          <span class="token comment" spellcheck="true">//  System.out.println(object.toString());</span>              stf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> stf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              stf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//把查询记录放入mappers         </span>     String uuid<span class="token operator">=</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QueryPools<span class="token punctuation">.</span>queryMaps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span>resultData<span class="token punctuation">)</span><span class="token punctuation">;</span>     QueryPools<span class="token punctuation">.</span>queryMethodMaps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>stf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//System.out.println(stf.toString());</span>            <span class="token keyword">return</span> uuid<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        查询池：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryPools</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * key:uuid,每次查询都会给一个唯一值     * value： 查询的全部结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>ArrayList<span class="token operator">&lt;</span>Object<span class="token operator">>></span> queryMaps<span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>ArrayList<span class="token operator">&lt;</span>Object<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * key:由全限定名，方法原型，参数  拼接成的字符串     * value： uuid     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> queryMethodMaps<span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String uuid<span class="token punctuation">,</span>ArrayList<span class="token operator">&lt;</span>Object<span class="token operator">></span> rows<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        queryMaps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>uuid<span class="token punctuation">,</span> rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String methodName<span class="token punctuation">,</span>String uuid<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        queryMethodMaps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getQueryUUID</span><span class="token punctuation">(</span>String methodNameAndParams<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> queryMethodMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>methodNameAndParams<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     *  1：请求中是否有UUID，     *  2：有则去UUID去找拿数据     *  3: 从pageInfo 去当前页面页面数据；     *  比如： total=12, count=5  page=4       */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PageInfo <span class="token function">getPageInfo</span><span class="token punctuation">(</span>PageInfo pageInfo<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getUuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span> pageInfo<span class="token punctuation">.</span><span class="token function">setPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span> pageInfo<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Object<span class="token operator">></span> data<span class="token operator">=</span>queryMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getUuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//if(data==null) return null;</span>        <span class="token keyword">int</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> page<span class="token operator">=</span>pageInfo<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>page<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> page<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>page<span class="token operator">>=</span>data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>pageInfo<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>pageInfo<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                 page<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>pageInfo<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                  page<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>pageInfo<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        pageInfo<span class="token punctuation">.</span><span class="token function">setPage</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>        pageInfo<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        start<span class="token operator">=</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>pageInfo<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start= "</span><span class="token operator">+</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>         ArrayList<span class="token operator">&lt;</span>Object<span class="token operator">></span> rows<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>start<span class="token operator">+</span>pageInfo<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>             rows<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         pageInfo<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> pageInfo<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>控制处理层：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"viewAllStudentInfo.do"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> PageInfo <span class="token function">getAllStudentInfo</span><span class="token punctuation">(</span>PageInfo pageInfo<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">.</span><span class="token function">getUuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String methodNameAndParams <span class="token operator">=</span> <span class="token string">"com.studentinfo.service.impl-queryAllStudentInfo?"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>QueryPools<span class="token punctuation">.</span><span class="token function">getQueryUUID</span><span class="token punctuation">(</span>methodNameAndParams<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Object object <span class="token operator">=</span> teacherService<span class="token punctuation">.</span><span class="token function">queryAllStudentInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pageInfo<span class="token punctuation">.</span><span class="token function">setUuid</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                pageInfo<span class="token punctuation">.</span><span class="token function">setUuid</span><span class="token punctuation">(</span>QueryPools<span class="token punctuation">.</span><span class="token function">getQueryUUID</span><span class="token punctuation">(</span>methodNameAndParams<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> QueryPools<span class="token punctuation">.</span><span class="token function">getPageInfo</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h1><p>​        谈谈自己怎么在项目中使用AOP实现分页功能的。</p><p>​        我的整体思路是当一个查询请求发到后端后，先看有没有uuid，如果有的话就直接根据uuid取数据。没有uuid的话还需要看看这个请求对应的业务层查询方法之前有没有调用过，如果之前调用过，就可以通过这个方法原型得到uuid，然后取数据。如果这个方法还没有被调用过，那就只能去调用这个查询方法了。使用AOP技术对这个方法进行切片操作。在切片类中，除了调用原方法外，还需要将原方法返回的数据和一个随机的uuid放到一个HashMap中，除此之外还要通过切片方法的参数得到原方法的全限定名，原型，参数信息，把这些信息拼接后放到第二个HashMap中，value就放之前的uuid。这就是第一次查询。</p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> spring框架 </category>
          
          <category> web项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOP </tag>
            
            <tag> spring </tag>
            
            <tag> 框架 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP技术(3)</title>
      <link href="/2020/08/02/AOP%E6%8A%80%E6%9C%AF(3)/"/>
      <url>/2020/08/02/AOP%E6%8A%80%E6%9C%AF(3)/</url>
      
        <content type="html"><![CDATA[<h1 id="1、通过xml配置文件实现AOP"><a href="#1、通过xml配置文件实现AOP" class="headerlink" title="1、通过xml配置文件实现AOP"></a>1、通过xml配置文件实现AOP</h1><p>​    流程：</p><ol><li>将所有的切片操作放到一个类中。</li><li>在xml配置文件中，通过扫描器、手动配置两种方式，得到被代理类对象和切片类对象。</li><li>通过<code>&lt;aop:config&gt;</code>标签，配置切面，切入点以及增强哪些方法。</li><li>main函数中只需解析xml文件，得到返回的代理类对象，然后用接口或代理类去引用它。</li></ol><p>切片类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置扫描器别名</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"xmlAspect"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLAspectDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 前置通知</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mybefore</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"调用方法之前起作用..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"代理对象的对象："</span><span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">",被织入增强处理的目标方法为："</span>                            <span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"before 方法结束........"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后置通知</span>    <span class="token keyword">public</span> Object <span class="token function">myAfterReturn</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"调用方法之后...,"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被织入增强处理的目标方法为："</span>                          <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 环绕通知     * ProceedingJoinPoint 是JoinPoint子接口，表示可以执行目标方法     * 1.必须是Object类型的返回值     * 2.必须接收一个参数，类型为ProceedingJoinPoint     * 3.必须throws Throwable     */</span>    <span class="token keyword">public</span> Object <span class="token function">myAround</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span>              <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕开始：执行目标方法之前，模拟开启事务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行当前目标方法</span>        Object obj <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结束</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕结束：执行目标方法之后，模拟关闭事务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 异常通知</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfterThrowing</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Throwable e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知："</span> <span class="token operator">+</span> <span class="token string">"出错了"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最终通知</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知：模拟方法结束后的释放资源..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        <strong>JoinPoint是插入点。类似的还有PointCut,advice,advicer。</strong></p><p>xml配置文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop-4.3.xsd  http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token comment" spellcheck="true">&lt;!-- 使用扫描器创建对象 --></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.aspect<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 手动创建对象 --></span>    <span class="token comment" spellcheck="true">&lt;!--  &lt;bean id="myAspect" class="com.hugeyurt.aspect.XMLAspectDemo" />      &lt;bean id="serviceDemo2" class = "com.hugeyurt.aspect.ServiceDemo2" /> --></span>    <span class="token comment" spellcheck="true">&lt;!-- aop编程 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置切面 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xmlAspect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 3.1 配置切入点，通知最后增强哪些方法 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.hugeyurt.aspect.*.*(..))<span class="token punctuation">"</span></span>                                                      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointCut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 第一个*：所有该全限定名 。   第二个*：所有类。    第三个*：所有方法。        括号：所有形参 --></span>            <span class="token comment" spellcheck="true">&lt;!-- 3.2 关联通知Advice和切入点pointCut --></span>            <span class="token comment" spellcheck="true">&lt;!-- 3.2.1 前置通知 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mybefore<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myPointCut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 3.2.2 后置通知,在方法返回之后执行，就可以获得返回值             returning属性：用于设置后置通知的第二个参数的名称,类型是Object --></span>            <span class="token comment" spellcheck="true">&lt;!-- &lt;aop:after-returning method="myAfterReturning"                pointcut-ref="myPointCut" returning="point" /> --></span>            <span class="token comment" spellcheck="true">&lt;!-- 3.2.3 环绕通知 --></span>            <span class="token comment" spellcheck="true">&lt;!-- &lt;aop:around method="myAround" pointcut-ref="myPointCut" /> --></span>            <span class="token comment" spellcheck="true">&lt;!-- 3.2.4 抛出通知：用于处理程序发生异常--></span>            <span class="token comment" spellcheck="true">&lt;!-- * 注意：如果程序没有异常，将不会执行增强 --></span>            <span class="token comment" spellcheck="true">&lt;!-- * throwing属性：用于设置通知第二个参数的名称，类型Throwable --></span>            <span class="token comment" spellcheck="true">&lt;!-- &lt;aop:after-throwing method="myAfterThrowing"                pointcut-ref="myPointCut" throwing="e" /> --></span>            <span class="token comment" spellcheck="true">&lt;!-- 3.2.5 最终通知：无论程序发生任何事情，都将执行 --></span>            <span class="token comment" spellcheck="true">&lt;!-- &lt;aop:after method="myAfter" pointcut-ref="myPointCut" /> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>main函数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>          ApplicationContext appContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>                    <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"applicationContext.xml"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1 从spring容器获得内容</span>        IAopDemo demo <span class="token operator">=</span> <span class="token punctuation">(</span>IAopDemo<span class="token punctuation">)</span> appContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"serviceDemoOne"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//ServiceDemo2 demo = (ServiceDemo2) appContext.getBean("serviceDemo2");</span>        <span class="token comment" spellcheck="true">// 2 执行方法</span>         demo<span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//demo.printName();</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        这种方式比起上一个版本，将所有的切片方式放到一个类中，并且可以对被代理类的任意方法进行切片处理，在XML配置文件中也可以通过扫描器的方式获取所有对象，更加灵活。        </p><p>​        但是XML配置文件过于冗杂，繁琐。下个版本将会解决这个问题。</p><h1 id="2、简化xml，实现AOP"><a href="#2、简化xml，实现AOP" class="headerlink" title="2、简化xml，实现AOP"></a>2、简化xml，实现AOP</h1><p>​    流程：</p><ol><li>通过@Component注解获得切面类</li><li>通过@Aspect注解获得具体切面信息</li><li>通过@Before(“自己定义的方法”)等注解，决定使用哪个切片</li><li>main正常调用</li></ol><p>xml配置文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop-4.3.xsd  http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 指定需要扫描的包，使注解生效 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.aspect.annotation<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 启动基于注解的声明式AspectJ支持 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>切面类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 切面类，在此类中编写通知 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspectAnnotation</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义切入点表达式</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.hugeyurt.aspect.annotation.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 使用一个返回值为void、方法体为空的方法来命名切入点</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">myPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 前置通知</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"myPointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBeforeafdasf</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"前置通知 ：模拟执行权限检查...,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"目标类是："</span><span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">",被织入增强处理的目标方法为："</span>                       <span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String method<span class="token operator">=</span>joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>      Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token operator">=</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>Object object <span class="token operator">:</span> args<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 后置通知</span>    <span class="token comment" spellcheck="true">//@AfterReturning(value="myPointCut()")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfterReturning</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"后置通知：模拟记录日志...,"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被值入增强处理的目标方法为："</span>                      <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 环绕通知    </span>    <span class="token comment" spellcheck="true">//@Around("myPointCut()")</span>    <span class="token keyword">public</span> Object <span class="token function">myAround</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span>             <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开始</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕开始：执行目标方法之前，模拟开启事务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行当前目标方法</span>        Object obj <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结束</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕结束：执行目标方法之后，模拟关闭事务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 异常通知</span>    <span class="token comment" spellcheck="true">//@AfterThrowing(value="myPointCut()",throwing="e")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfterThrowing</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Throwable e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知："</span> <span class="token operator">+</span> <span class="token string">"出错了"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最终通知</span>    <span class="token comment" spellcheck="true">//@After("myPointCut()")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知：模拟方法结束后的释放资源..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>main函数：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>          ApplicationContext appContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>                    <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"beansAnnotation.xml"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1 从spring容器获得内容</span>          ServiceDemo demo <span class="token operator">=</span> <span class="token punctuation">(</span>ServiceDemo<span class="token punctuation">)</span> appContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"serviceDemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          IHello demo2 <span class="token operator">=</span> <span class="token punctuation">(</span>IHello<span class="token punctuation">)</span> appContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"serviceDemo2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2 执行方法</span>          demo<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token string">"kitty"</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          demo2<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        对比上个版本，这个版本更加简便。</p><p>​        通过三种注解，获得了切面类的所有信息，并通过spring容器实现了切片功能。通过正则表达式可以在任意方法处实现切片操作。</p>]]></content>
      
      
      <categories>
          
          <category> spring框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOP </tag>
            
            <tag> spring </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP技术(2)</title>
      <link href="/2020/08/01/AOP%E6%8A%80%E6%9C%AF(2)/"/>
      <url>/2020/08/01/AOP%E6%8A%80%E6%9C%AF(2)/</url>
      
        <content type="html"><![CDATA[<h1 id="1-通过自己的spring内核实现AOP"><a href="#1-通过自己的spring内核实现AOP" class="headerlink" title="1. 通过自己的spring内核实现AOP"></a>1. 通过自己的spring内核实现AOP</h1><p>配置文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.base.test.DemoBefore<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.base.test.DemoAfterMethod<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aobj<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.base.test.A<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>proxy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.base.test.ProxyHelloTwo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aobj<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span>   <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>​        通过解析这个配置文件，可以得到两个切片的对象，被代理的对象。然后使用接口对象去引用该中间代理类生成的对象，即可实现AOP功能。</p><p>实现接口的类A：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">IHello</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"my is A object..."</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"my is A object...bye byte"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>增加切片操作的类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoAfterMethod</span> <span class="token keyword">implements</span> <span class="token class-name">AfterMethod</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"just a test aftermethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>中间代理类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyHelloTwo</span> <span class="token keyword">implements</span> <span class="token class-name">IHello</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> IHello target<span class="token punctuation">;</span>    <span class="token keyword">private</span> BeforeMethod  before<span class="token punctuation">;</span>    <span class="token keyword">private</span> AfterMethod   after<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProxyHelloTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProxyHelloTwo</span><span class="token punctuation">(</span>IHello target<span class="token punctuation">,</span>BeforeMethod before<span class="token punctuation">,</span>            AfterMethod after<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token operator">=</span>target<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>before<span class="token operator">=</span>before<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>after<span class="token operator">=</span>after<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>before<span class="token operator">!=</span>null<span class="token punctuation">)</span> before<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用被代理对象的方法</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>after<span class="token operator">!=</span>null<span class="token punctuation">)</span>  after<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>main函数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyBySelfSpring</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        IHello target<span class="token operator">=</span><span class="token punctuation">(</span>IHello<span class="token punctuation">)</span>SpringCore<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"proxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"I like china!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="2、实现AOP的两种技术"><a href="#2、实现AOP的两种技术" class="headerlink" title="2、实现AOP的两种技术"></a>2、实现AOP的两种技术</h1><h2 id="2-1-三种切片类型"><a href="#2-1-三种切片类型" class="headerlink" title="2.1 三种切片类型"></a>2.1 三种切片类型</h2><ol><li>AfterAdvice</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AfterAdviceDemo</span> <span class="token keyword">implements</span> <span class="token class-name">AfterReturningAdvice</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span>Object arg0<span class="token punctuation">,</span> Method arg1<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arg2<span class="token punctuation">,</span>            Object arg3<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after advice demo....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>BeforeAdvice</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoBeforeAdvice</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> Object target<span class="token punctuation">)</span>        <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//if(method.getName().equals("printName")) return ;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********before****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">///method.invoke(target, args);</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BeforeMethod : Before method finished!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>RoundAdvice</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoundAdviceDemo</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>MethodInvocation arg0<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"round demo...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object object<span class="token operator">=</span> arg0<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用代理对象的方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after round demo...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> object<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="2-2-JDK动态代理技术"><a href="#2-2-JDK动态代理技术" class="headerlink" title="2.2 JDK动态代理技术"></a>2.2 JDK动态代理技术</h2><p>​        应用场景：实现了接口的类。</p><p>​        如何实现：定义Proxy类实现接口，重写接口的方法，从而增加切片。</p><p>实现了接口的类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceDemo</span> <span class="token keyword">implements</span> <span class="token class-name">IAopDemo</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token operator">=</span><span class="token string">"hzhqian"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUrl</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"company : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printThrowException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"interface A demo..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PrintB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"interface B demo..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>main函数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     ApplicationContext appContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"beans.xml"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     IAopDemo demo <span class="token operator">=</span><span class="token punctuation">(</span>IAopDemo<span class="token punctuation">)</span> appContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"serviceProxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo <span class="token keyword">instanceof</span> <span class="token class-name">IAopDemo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    demo<span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    demo<span class="token punctuation">.</span><span class="token function">PrintB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      System.out.println("subject中的属性有：");      Field[] field=demo.getClass().getDeclaredFields();     try&amp;#123;    for(Field f:field)    &amp;#123;          System.out.print(f.getName()+", "+f.getType()+" # ");        f.setAccessible(true);        System.out.println(f.get(demo)+"  #"+f.getModifiers());    &amp;#125;   &amp;#125;catch(Exception e)   &amp;#123;       e.printStackTrace();   &amp;#125;      */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>xml配置文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://www.springframework.org/schema/aop         http://www.springframework.org/schema/aop/spring-aop-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demoService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.springAOP.ServiceDemo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hugeyurt<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hugeyurt.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforeDemo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.springAOP.DemoBeforeAdvice<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterDemo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.springAOP.AfterAdviceDemo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roundDemo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.springAOP.RoundAdviceDemo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>serviceProxy<span class="token punctuation">"</span></span>      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.aop.framework.ProxyFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demoService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>interceptorNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--&lt;value>beforeDemo&lt;/value>   --></span>                 <span class="token comment" spellcheck="true">&lt;!--  &lt;value>afterDemo&lt;/value> --></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>roundDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>​        xml文件中为实现了接口的类创建了一个对象，然后通过Proxy类进行切片操作，生成了serviceProxy对象，使用接口的对象引用serviceProxy，即可实现JDK动态代理。</p><h2 id="2-3-字节码增强技术"><a href="#2-3-字节码增强技术" class="headerlink" title="2.3 字节码增强技术"></a>2.3 字节码增强技术</h2><p>​        应用场景：没有实现接口的类。</p><p>​        如何实现：定义一个子类继承被代理类，重写接口的方法，增加切片。</p><p>未实现接口的类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token operator">=</span><span class="token string">"hzhqian"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">protected</span>  <span class="token keyword">int</span>  myName<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUrl</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"company : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>xml配置文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://www.springframework.org/schema/aop         http://www.springframework.org/schema/aop/spring-aop-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demoService2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.springAOP.ServiceDemo2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforeDemo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.springAOP.DemoBeforeAdvice<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterDemo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.springAOP.AfterAdviceDemo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roundDemo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.springAOP.RoundAdviceDemo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>serviceProxy1<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.aop.framework.ProxyFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demoService2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>interceptorNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>beforeDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">&lt;!--  &lt;value>afterDemo&lt;/value>              &lt;value>roundDemo&lt;/value>  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>main函数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        ApplicationContext appContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"beans.xml"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServiceDemo2 demo2 <span class="token operator">=</span><span class="token punctuation">(</span>ServiceDemo2<span class="token punctuation">)</span> appContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"serviceProxy1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo2 <span class="token keyword">instanceof</span> <span class="token class-name">IAopDemo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo2<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo2<span class="token punctuation">.</span><span class="token function">printURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        根据生成的字节码对象，调用<code>getInterface()</code>函数判断该类是否实现了接口，若实现了，则使用JDK动态代理技术，反之，则创建一个类继承被代理类，完成切片操作。</p><h1 id="3、-小结"><a href="#3、-小结" class="headerlink" title="3、 小结"></a>3、 小结</h1><p>​        上述两种技术的原理都是重写被代理类的方法，在上一节中的中间代理类Dyn被写到了配置文件中。通过解析配置文件这一方法，更加体现了可维护性。</p><p>​        这个版本仍然存在问题，当被代理类中有多个方法时，每个方法都会被进行切片操作。</p>]]></content>
      
      
      <categories>
          
          <category> spring框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOP </tag>
            
            <tag> spring </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP技术(1)</title>
      <link href="/2020/07/31/AOP%E6%8A%80%E6%9C%AF(1)/"/>
      <url>/2020/07/31/AOP%E6%8A%80%E6%9C%AF(1)/</url>
      
        <content type="html"><![CDATA[<h1 id="1、AOP介绍"><a href="#1、AOP介绍" class="headerlink" title="1、AOP介绍"></a>1、AOP介绍</h1><p>​        AOP（Aspect-Oriented Programming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p><p>​        而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，<strong>利用了jdk动态代理技术，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性</strong>。AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。</p><h1 id="2、静态代理模式实现AOP"><a href="#2、静态代理模式实现AOP" class="headerlink" title="2、静态代理模式实现AOP"></a>2、静态代理模式实现AOP</h1><ol><li>接口类IHello：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IHello</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>实现类Hello：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">implements</span> <span class="token class-name">IHello</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello : "</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bye bye"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>代理类ProxyHello：</li></ol><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/*   * 静态代理模式实现AOP  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyHello</span> <span class="token keyword">implements</span> <span class="token class-name">IHello</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> IHello target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProxyHello</span><span class="token punctuation">(</span>IHello target<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token operator">=</span>target<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>          Logger<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Logger类，打印日志信息</span>          target<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用被代理对象的方法</span>          Logger<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="4"><li>main函数：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStaticProxy</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        IHello target<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//target.sayHello("just a demo");</span>        target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyHello</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">" kitty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        target<span class="token punctuation">.</span><span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="/2020/07/31/AOP%E6%8A%80%E6%9C%AF(1)/image-20200731170017987.png" alt="静态代理AOP输出结果"></p><h1 id="3、动态代理模式实现AOP"><a href="#3、动态代理模式实现AOP" class="headerlink" title="3、动态代理模式实现AOP"></a>3、动态代理模式实现AOP</h1><p><img src="/2020/07/31/AOP%E6%8A%80%E6%9C%AF(1)/image-20200731190947540.png" alt="动态代理模式实现AOP"></p><p>代理类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynDemo</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> Object obj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 此时OBJ是要被代理的对象</span>    <span class="token keyword">private</span> BeforeMethod befor<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DynDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 此时参数obj是要被代理的对象</span>    <span class="token keyword">public</span> <span class="token function">DynDemo</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 此时参数obj是要被代理的对象</span>    <span class="token keyword">public</span> <span class="token function">DynDemo</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span>BeforeMethod befor<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>befor<span class="token operator">=</span>befor<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//这个方法不是我们显示的去调用  </span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>            <span class="token keyword">throws</span> Throwable      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//真正的调用它原对象</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// System.out.println("before calling " + method);  </span>          <span class="token keyword">if</span><span class="token punctuation">(</span>befor<span class="token operator">!=</span>null<span class="token punctuation">)</span>               befor<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//System.out.println(this.obj);</span>        Object result<span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 执行被代理对象的切入点</span>                        <span class="token comment" spellcheck="true">// obj.say(args);</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after calling "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">getObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setObj</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> BeforeMethod <span class="token function">getBefor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> befor<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBefor</span><span class="token punctuation">(</span>BeforeMethod befor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>befor <span class="token operator">=</span> befor<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><p>​        该代理类的作用：通过被代理的对象，确认切入点，增加额外的操作。</p><p>客户端：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//客户端：生成代理实例，并调用了say()方法  </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// TODO Auto-generated method stub  </span>      Demo target<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里指定被代理类  </span>      InvocationHandler ds<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DynDemo</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>     Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls<span class="token operator">=</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取target对象类的字节码  </span>     <span class="token comment" spellcheck="true">//以下是一次性生成代理  </span>      IDemo subject<span class="token operator">=</span><span class="token punctuation">(</span>IDemo<span class="token punctuation">)</span>Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>                  cls<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cls<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ds<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//这里可以通过运行结果证明subject是Proxy的一个实例，这个实例实现了IDemo接口  </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subject <span class="token keyword">instanceof</span> <span class="token class-name">Proxy</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//这里可以看出subject的Class类是$Proxy0,这个$Proxy0类继承了Proxy，实现了IDemo接口  </span>     <span class="token comment" spellcheck="true">//  System.out.println("subject的Class类是："+subject.getClass().getName());  </span>     <span class="token comment" spellcheck="true">//  System.out.println("subject的Class父类是："+subject.getClass().getSuperclass()</span>    <span class="token comment" spellcheck="true">//           .getName());  </span>     <span class="token comment" spellcheck="true">/*  System.out.println("\n"+"subject实现的接口是：");          Class&lt;?>[] interfaces=subject.getClass().getInterfaces();         for(Class&lt;?> i:interfaces)&amp;#123;             System.out.println(i.getName());         &amp;#125;        System.out.println("subject中的属性有：");          Field[] field=subject.getClass().getSuperclass().getDeclaredFields();          for(Field f:field)        &amp;#123;              System.out.print(f.getName()+", "+f.getType()+" # ");            f.setAccessible(true);            System.out.println(f.get(subject)+"  #"+f.getModifiers());        &amp;#125; */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"subject中的方法有："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Method<span class="token punctuation">[</span><span class="token punctuation">]</span> method<span class="token operator">=</span>subject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>Method m<span class="token operator">:</span>method<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/*   */</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token operator">+</span><span class="token string">"运行结果为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         subject<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         subject<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><p>​        通过<code>    Proxy.newProxyInstance(cls.getClassLoader(),cls.getInterfaces(), ds)</code>方法，一次性生成代理，并通过返回的对象调用重写的方法。</p><p><code>Proxy.newProxyInstance()</code>的具体实现逻辑：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IDemo</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> DynDemo target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyProxy</span><span class="token punctuation">(</span>DynDemo target<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token operator">=</span>target<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         Method method<span class="token operator">=</span>target<span class="token punctuation">.</span><span class="token function">getObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"say"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>           target<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> method<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="4、小结"><a href="#4、小结" class="headerlink" title="4、小结"></a>4、小结</h1><h2 id="4-1-静态代理模式下的AOP实现"><a href="#4-1-静态代理模式下的AOP实现" class="headerlink" title="4.1 静态代理模式下的AOP实现"></a>4.1 静态代理模式下的AOP实现</h2><p>​        通过一个实现接口的代理类，可以在不影响用户操作的时候添加其它功能，如记录日志等。</p><h2 id="4-2-动态代理模式下的AOP实现"><a href="#4-2-动态代理模式下的AOP实现" class="headerlink" title="4.2 动态代理模式下的AOP实现"></a>4.2 动态代理模式下的AOP实现</h2><p>​        代理类可以动态地获取被代理的对象，通过该对象获取切入点，并添加操作。然后通过客户端实现被代理类的接口，调用<code>Proxy.newProxyInstance()</code>方法获取代理实例，并通过该方法返回的实例对象调用重写后的方法。</p><p><code>Proxy.newProxyInstance()</code>完成的功能：</p><ol><li><p>生成一个类（Proxy的子类）；Proxy$0</p></li><li><p>Proxy$0类会重写被代理类的接口。</p></li><li><p>每个方法调用中间代理类的invoke。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> spring框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOP </tag>
            
            <tag> spring </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIO</title>
      <link href="/2020/07/22/Java-NIO/"/>
      <url>/2020/07/22/Java-NIO/</url>
      
        <content type="html"><![CDATA[<h1 id="1、NIO概念"><a href="#1、NIO概念" class="headerlink" title="1、NIO概念"></a>1、NIO概念</h1><h2 id="1-1-Unix定义了五种-I-O-模型"><a href="#1-1-Unix定义了五种-I-O-模型" class="headerlink" title="1.1 Unix定义了五种 I/O 模型"></a>1.1 Unix定义了五种 I/O 模型</h2><ul><li>阻塞 I/O</li><li>非阻塞 I/O</li><li>I/O 复用</li><li>信号驱动 I/O</li><li>异步 I/O</li></ul><h3 id="1-1-1-阻塞（Block）和非阻塞（NonBlock）"><a href="#1-1-1-阻塞（Block）和非阻塞（NonBlock）" class="headerlink" title="1.1.1 阻塞（Block）和非阻塞（NonBlock）"></a>1.1.1 阻塞（Block）和非阻塞（NonBlock）</h3><p>阻塞和非阻塞是进程在访问数据的时候，数据是否准备就绪的一种处理方式：<br>阻塞：需要等待缓冲区中的数据准备好过后才处理其他的事情，否則一直等待在那里。<br>非阻塞：进程访问数据缓冲区的时候，如果数据没有准备好则直接返回，不会等待。</p><h3 id="1-1-2-同步与异步"><a href="#1-1-2-同步与异步" class="headerlink" title="1.1.2 同步与异步"></a>1.1.2 同步与异步</h3><p>一个进程的IO调用步骤大致如下：</p><p>1、进程向操作系统请求数据</p><p>2、操作系统把外部数据加载到内核的缓冲区中</p><p>3、操作系统把内核的缓冲区拷贝到进程的缓冲区 </p><p>4、进程获得数据完成自己的功能</p><p>当操作系统在把外部数据放到进程缓冲区的这段时间（即上述的第二，三步），如果应用进程是挂起等待的，那么就是同步IO，反之，就是异步IO</p><p>Java中IO分为：<br>BIO （Blocking  IO）<br>NIO （Non-blocking  IO/New IO）<br>AIO （Asynchronous IO/NIO2）</p><h2 id="1-2-NIO模型图"><a href="#1-2-NIO模型图" class="headerlink" title="1.2 NIO模型图"></a>1.2 NIO模型图</h2><p><img src="/2020/07/22/Java-NIO/image-20200730202046654.png" alt="image-20200730202046654"></p><h1 id="2、-NIO与传统IO的区别"><a href="#2、-NIO与传统IO的区别" class="headerlink" title="2、 NIO与传统IO的区别"></a>2、 NIO与传统IO的区别</h1><p><img src="/2020/07/22/Java-NIO/image-20200730202205711.png" alt="image-20200730202205711"></p><table><thead><tr><th align="center">IO</th><th align="center">NIO</th></tr></thead><tbody><tr><td align="center">面向流</td><td align="center">面向缓冲</td></tr><tr><td align="center">阻塞IO</td><td align="center">非阻塞IO</td></tr><tr><td align="center">无</td><td align="center">selector</td></tr></tbody></table><h2 id="2-1-面向流与缓冲"><a href="#2-1-面向流与缓冲" class="headerlink" title="2.1 面向流与缓冲"></a>2.1 面向流与缓冲</h2><p>​        IO是面向流的，NIO是面向缓冲区的。 Java IO面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。 Java NIO的缓冲导向方法略有不同。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性</p><h2 id="2-2-阻塞与非阻塞"><a href="#2-2-阻塞与非阻塞" class="headerlink" title="2.2 阻塞与非阻塞"></a>2.2 阻塞与非阻塞</h2><p>​        Java IO的各种流是阻塞的。这意味着，当一个线程调用read() 或 write()时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 Java NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。</p><h2 id="2-3-选择器（Selector）"><a href="#2-3-选择器（Selector）" class="headerlink" title="2.3 选择器（Selector）"></a>2.3 选择器（Selector）</h2><p>​        Java NIO的选择器允许一个单独的线程来监视多个输入通道，你可以注册多个通道使用一个选择器，然后使用一个单独的线程来“选择”通道：这些通道里已经有可以处理的输入，或者选择已准备写入的通道。这种选择机制，使得一个单独的线程很容易来管理多个通道。</p><h1 id="3、NIO构成组件"><a href="#3、NIO构成组件" class="headerlink" title="3、NIO构成组件"></a>3、NIO构成组件</h1><p>Java NIO Channel通道和流非常相似，主要有以下几点区别：<br>a.通道可以读也可以写，多功能高速通道，流一般来说是单向的（只能读或者写,如输入流与输出流）；<br>b.通道可以异步读写；<br>c.通道总是基于缓冲区Buffer来读写；<br>正如上面提到的，我们可以从通道中读取数据，写入到buffer，也可以中buffer内读数据，写入到通道中；下面有个示意图：</p><p><img src="/2020/07/22/Java-NIO/image-20200730202755347.png" alt="image-20200730202755347"></p><p>Channel的实现：</p><ul><li><p>FileChannel   </p></li><li><p>DatagramChannel </p></li><li><p>SocketChannel  </p></li><li><p>ServerSocketChannel</p></li></ul><p>FileChannel用于文件的数据读写。 </p><p>DatagramChannel用于UDP的数据读写。 </p><p>SocketChannel用于TCP的数据读写。 </p><p>ServerSocketChannel允许我们监听TCP链接请求，每个请求会创建会一个SocketChannel.</p><p>Buffer用于和Channel交互。我们从channel中读取数据到buffers里，从buffer把数据写入到channel，Buffer本质上就是一块内存区，可以用来写入数据，并在稍后读取出来。这块内存被NIO Buffer包裹起来，对外提供一系列的读写方便开发的接口。</p><h2 id="3-1-Buffer基本用法"><a href="#3-1-Buffer基本用法" class="headerlink" title="3.1 Buffer基本用法"></a>3.1 Buffer基本用法</h2><p>利用Buffer读写数据，通常遵循四个步骤：</p><ol><li>把数据写入buffer；</li><li>调用flip；</li><li>从Buffer中读取数据；</li><li>调用buffer.clear()或者buffer.compact()</li></ol><p>当写入数据到buffer中时，buffer会记录已经写入的数据大小。当需要读数据时，通过flip()方法把buffer从写模式调整为读模式；在读模式下，可以读取所有已经写入的数据。</p><p>当读取完数据后，需要清空buffer，以满足后续写入操作。清空buffer有两种方式：调用clear()或compact()方法。clear会清空整个buffer，compact则只清空已读取的数据，未被读取的数据会被移动到buffer的开始位置，写入位置则近跟着未读数据之后。</p><p>Buffer有三个属性:<br>容量，位置，上限（capacity, position , limit）<br>buffer缓冲区实质上就是一块内存，用于写入数据，也供后续再次读取数据。这块内存被NIO Buffer管理，并提供一系列的方法用于更简单的操作这块内存。</p><h2 id="3-2-Java-NIO-Selector"><a href="#3-2-Java-NIO-Selector" class="headerlink" title="3.2 Java NIO Selector"></a>3.2 Java NIO Selector</h2><p>​        Selector是Java NIO中的一个组件，用于检查一个或多个NIO Channel的状态是否处于可读、可写。因此此可以实现单线程管理多个channels，也就是可以管理多个网络连接。</p><p>1.创建<br>        要使用必须先创建一个：<br>        创建一个selector可以通过selector.open()方法</p><p>2.注册<br>        如果要监测channel,必须先把channel注册到Selector上，这个操作使用channel.register(),</p><p>3.监测<br>        我们关注的channel状态，有四种基础类型可供监听：（观察客人发来的需求）<br> Connect,  Accept, Read ,Write 通过selectedKeys()，可以获取所有channel的相关信息，包括channel本身，以及channel的状态等信息，知道了channel的状态，我们就可以对channel进行相应的操作。</p><h1 id="4、基于NIO实现的多人聊天"><a href="#4、基于NIO实现的多人聊天" class="headerlink" title="4、基于NIO实现的多人聊天"></a>4、基于NIO实现的多人聊天</h1><h2 id="4-1-服务端"><a href="#4-1-服务端" class="headerlink" title="4.1 服务端"></a>4.1 服务端</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NIOSelectorDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建ServerSocketChannel</span>        ServerSocketChannel server <span class="token operator">=</span> ServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//绑定9090端口</span>        server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置为非阻塞</span>        server<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建Selector</span>        Selector selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当serversocket有连接请求时，监控这个事件</span>        server<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建SocketChannel的ArrayList用于管理客户端与服务端的连接</span>        ArrayList<span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span> clients <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//阻塞，当至少有一个channel上有事件发生时，返回</span>            <span class="token comment" spellcheck="true">//selector.select()返回了，意味着channel发生可处理事件</span>            selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获得可处理的事件selectionKeys（包含目标channel）</span>            Set<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> keys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Iterator<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> it <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                SelectionKey key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//表示可接收请求</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    ServerSocketChannel socket <span class="token operator">=</span> <span class="token punctuation">(</span>ServerSocketChannel<span class="token punctuation">)</span>key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//接收到客户端请求时生成SocketChannel对象，用于和客户的数据传输</span>                    SocketChannel client <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//设置为非阻塞</span>                    client<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//注册进Selector</span>                    client<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//向客户端发送消息“hello”</span>                    ByteBuffer buf <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    client<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//将新客户端添加到客户列表里</span>                    clients<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    SocketChannel client <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span>key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//接收来自客户端的数据，组装成msg</span>                    ByteBuffer buf <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    client<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                    buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String msg <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"==>"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//将msg发送给所有客户端</span>                    buf<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    buf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> clients<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        SocketChannel c <span class="token operator">=</span> clients<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        c<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                        buf<span class="token punctuation">.</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="4-2-客户端"><a href="#4-2-客户端" class="headerlink" title="4.2 客户端"></a>4.2 客户端</h2><h3 id="4-2-1-读线程"><a href="#4-2-1-读线程" class="headerlink" title="4.2.1 读线程"></a>4.2.1 读线程</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ReadThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> SocketChannel socket <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ReadThread</span><span class="token punctuation">(</span>SocketChannel socket<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> ret <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="4-2-2-写线程"><a href="#4-2-2-写线程" class="headerlink" title="4.2.2 写线程"></a>4.2.2 写线程</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">WriteThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> SocketChannel socket <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WriteThread</span><span class="token punctuation">(</span>SocketChannel socket<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String msg <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            msg <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA基本知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2020/07/21/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/07/21/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>​         Java语言作为最流行的网络编程语言，提供了强大的网络编程功能。</p><p>​        使用Java语言可以编写底层的网络通信程序，这是通过java.net包中提供的InetAddress类、URL类、Socket类以及ServerSocket等类实现的。</p><h1 id="1、网络地址类InetAddress"><a href="#1、网络地址类InetAddress" class="headerlink" title="1、网络地址类InetAddress"></a>1、网络地址类InetAddress</h1><p>​        要实现网络通信，首先需要知道计算机的地址。连接到Internet上的计算机使用IP地址或域名来唯一标识，在局域网上的计算机则可以使用名称标识。在java.net包中提供了InetAddress类来表示计算机地址。<br>​        InetAddress类没有提供构造方法，要得到一个InetAddress类对象，需要使用该类的静态方法。</p><p>eg：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InetAddressDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            InetAddress addr <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>addr<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>addr<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>addr<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            InetAddress addr2 <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"www.acfun.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>addr2<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>addr2<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>addr2<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="2、-URL编程"><a href="#2、-URL编程" class="headerlink" title="2、 URL编程"></a>2、 URL编程</h1><h2 id="2-1-URL与URL类"><a href="#2-1-URL与URL类" class="headerlink" title="2.1 URL与URL类"></a>2.1 URL与URL类</h2><p>​        URL是统一资源定位器（Uniform Resource Locator）的简写，它是WWW中网络资源定位的表示方法。<br>​        URL的基本格式为：</p><ul><li><code>&lt;协议名://&gt;&lt;主机名&gt;[&lt;:端口号&gt;]&lt;/资源名&gt;</code></li><li>协议名表示资源使用的协议，如http、ftp、telnet、mailto或file等。</li><li>主机名为任何合法的主机域名，如<a href="http://www.njupt.edu.cn./">www.njupt.edu.cn。</a></li><li>端口号是可选的，如果使用熟知端口号，则可以省略。</li><li>资源名一般用来指定远程主机上文件系统中文件的完整路径，如/index.html。</li></ul><hr><p>​        URL类的实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Url1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String s <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">;</span>            URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Protocol:"</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取协议名</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Host:"</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取主机号</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Port:"</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取端口号，若没有指定端口号则返回-1</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DefaultPort:"</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getDefaultPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取默认端口号</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"File:"</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回URL的文件名及路径</span>            InputStream is <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            InputStreamReader isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> c <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="2-2-URL的Connection类"><a href="#2-2-URL的Connection类" class="headerlink" title="2.2 URL的Connection类"></a>2.2 URL的Connection类</h2><ul><li>​    通过URL的openStream()方法，只能获得InputStream对象。使用该对象只能从网络上读取数据。</li><li>​    如果希望不仅要从URL读取内容，还要向URL对象发送服务请求及参数，可以使用URLConnection类。   </li><li>​    利用URL类提供的openConnection()方法，可以建立一个URLConnection对象。可以调用其getInputStream()方法和getOutputStream()方法得到输入流和输出流对象。</li></ul><p>eg：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Url2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String surl <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>surl<span class="token punctuation">)</span><span class="token punctuation">;</span>            HttpURLConnection conn <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span>url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设置允许上传</span>            <span class="token comment" spellcheck="true">//http请求的一些属性</span>            conn<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"ContentType"</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//打开连接输出流，输出数据</span>            OutputStream os <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>c<span class="token operator">=</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当打开输入流的时候，请求发出，并得到响应</span>            InputStream is <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            InputStreamReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>c<span class="token operator">=</span>reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read finish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="3、Java套接字编程"><a href="#3、Java套接字编程" class="headerlink" title="3、Java套接字编程"></a>3、Java套接字编程</h1><h2 id="3-1-端口号和套接字"><a href="#3-1-端口号和套接字" class="headerlink" title="3.1 端口号和套接字"></a>3.1 端口号和套接字</h2><p>​        在网络上，很多应用都是采用客户/服务器（C/S）结构的。实现网络通信必须将两台机器连接起来建立一个双向通信链路，这个双向通信链路的每一端称为一个套接字（Socket）。</p><p>​        在Internet上使用IP地址唯一标识一台主机。<br>​        一台主机可能提供多种服务，仅用IP地址不能唯一标识一个服务。通常使用一个整数来标识该机器上的某个服务，这个整数就是端口号（Port）。<br>​        端口号是用16位整数标识，共有65536个端口号。端口号并不是机器上实际存在的物理位置，而是一种软件上的抽象。</p><p>​        一个TCP连接由它的两个端点来标识，而每一个端点又是由IP地址和端口号决定的。TCP连接的端点称为套接字，套接字是由IP地址和端口号构成的，如下图所示。</p><p><img src="/2020/07/21/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200730200111257.png" alt="套接字的构成"></p><p>​        这里，131.6.23.13为IP地址，1500为端口号，因此套接字为131.6.23.13，1500。 </p><h2 id="3-2-套接字通信"><a href="#3-2-套接字通信" class="headerlink" title="3.2 套接字通信"></a>3.2 套接字通信</h2><p>​        运行在一台特定机器上的某个服务器（如HTTP服务器）都有一个套接字绑定到该服务器上。服务器只是等待、监听客户的连接请求。<br>​        在客户端，客户机需要知道服务器的主机名和端口号。为了建立连接请求，客户机试图与服务器机上的指定端口号上的服务连接，这个请求过程如下图所示。</p><p><img src="/2020/07/21/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200730200255360.png" alt="Client与Server连接过程"></p><p>​        如果正常，服务器将接受连接请求。一旦接受了请求，服务器将创建一个新的绑定到另一个端口号的套接字，然后使用该套接字与客户通信。这样，服务器可以使用原来的套接字继续监听连接请求，如图所示。</p><p><img src="/2020/07/21/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200730200448790.png" alt="连接成功后的状态"></p><p>​        在客户端，如果连接被接受，就会创建一个套接字，客户就可以使用该套接字与服务器通信。注意，客户端的套接字并没有绑定到与服务器连接的端口号上，相反客户被指定客户程序所在机器上的一个端口号上。现在客户与服务器就可以读写套接字进行通信了。</p><h2 id="3-3-套接字类"><a href="#3-3-套接字类" class="headerlink" title="3.3 套接字类"></a>3.3 套接字类</h2><p>​        为了实现套接字通信，在java.net包中提供了两个类：Socket和ServerSocket。它们分别实现连接的客户端和服务器端的套接字。</p><h3 id="3-3-1-Socket类"><a href="#3-3-1-Socket类" class="headerlink" title="3.3.1 Socket类"></a>3.3.1 Socket类</h3><p>Client和Server都需定义出该类的对象。创建对象时，端口号必须对应。</p><p><code>public InputStrean getInputStream() throws IOException </code></p><p>获得套接字绑定的数据输入流。<br><code>    public OutputStream getOutputStream() throws IOException</code> </p><p>获得套接字绑定的数据输出流。</p><h3 id="3-3-2-ServerSocket类"><a href="#3-3-2-ServerSocket类" class="headerlink" title="3.3.2 ServerSocket类"></a>3.3.2 ServerSocket类</h3><p>​        用在服务器端。客户与服务器通信，客户向服务器提出请求，服务器监听请求，一旦监听到客户请求，服务器也要建立一个套接字。</p><h3 id="3-3-3-客户和服务器通信的实例"><a href="#3-3-3-客户和服务器通信的实例" class="headerlink" title="3.3.3 客户和服务器通信的实例"></a>3.3.3 客户和服务器通信的实例</h3><p>包括以下4个基本步骤：<br>（1）创建套接字对象。<br>（2）打开连接到套接字的输入输出流。<br>（3）按照一定协议对套接字进行读写操作。<br>（4）关闭套接字对象。</p><p><img src="/2020/07/21/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200730202513980.png" alt="通信示意图"></p><p>eg:</p><p>服务器代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//服务器监听在本机的8000端口</span>            ServerSocket server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server start.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当接受到客户端请求后，生成一个socket，用于和客户端的数据传输</span>            Socket socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//阻塞，等待客户端连接请求</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getRemoteSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到Client的Socket地址</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getLocalSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到Server的Socket地址</span>            InputStream is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            OutputStream os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//采用的是阻塞IO（若没有数据，就一直等待）</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bts<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bts<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client say:"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                str <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server stop.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>客户端代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//参数是要连接的服务器地址和端口，发出连接请求，建立连接</span>            Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            InputStream is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            OutputStream os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bts<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server say:"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bts<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                str <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bts<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bts<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server say:"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="3-3-4-多个客户端和服务器通信实例"><a href="#3-3-4-多个客户端和服务器通信实例" class="headerlink" title="3.3.4 多个客户端和服务器通信实例"></a>3.3.4 多个客户端和服务器通信实例</h3><p>Server：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ServerSocket server <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Socket socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//启动客户端线程，独立完成通信</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClientThreadDemo</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server start fail.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>server <span class="token operator">!=</span>null<span class="token punctuation">)</span>                    server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Client:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//参数是要连接的服务器地址和端口，发出连接请求，建立连接</span>            Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            InputStream is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            OutputStream os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bts<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server say:"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bts<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                str <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bts<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bts<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server say:"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>ClientThread:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientThreadDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Socket socket<span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token function">ClientThreadDemo</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        InputStream is <span class="token operator">=</span> null<span class="token punctuation">;</span>        OutputStream os <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//采用的是阻塞IO（若没有数据，就一直等待）</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            count <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bts<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bts<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client say:"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            str <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bye"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>is <span class="token operator">!=</span> null<span class="token punctuation">)</span> is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>os <span class="token operator">!=</span> null<span class="token punctuation">)</span> os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>socket <span class="token operator">!=</span> null<span class="token punctuation">)</span> socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="4、数据报通信"><a href="#4、数据报通信" class="headerlink" title="4、数据报通信"></a>4、数据报通信</h1><h2 id="4-1-流式通信和数据报通信"><a href="#4-1-流式通信和数据报通信" class="headerlink" title="4.1 流式通信和数据报通信"></a>4.1 流式通信和数据报通信</h2><p>​        <strong>当编写网络程序时，有两种通信可供选择：流式通信和数据报通信。</strong></p><table><thead><tr><th align="center">流式通信</th><th align="center">数据报通信</th></tr></thead><tbody><tr><td align="center">流式通信使用TCP协议，该协议是面向连接的协议。使用这种协议要求发送方和接收方都要建立套接字，一旦两个套接字建立起来，它们就可以进行双向通信，双方都可以发送和接收数据。</td><td align="center">数据报通信使用UDP协议，该协议是一种无连接的协议。使用这种协议通信，每个数据报都是一个独立的信息单元，它包括完整的目的地址，数据报在网络上以任何可能的路径传往目的地，因此数据能否到达目的地、到达的时间以及内容的正确性都是不能保证，该协议提供的是不可靠的服务。</td></tr><tr><td align="center">对于TCP，是一个面向连接的协议，在通信之前必须建立双方的连接，因此在TCP中多了一个建立连接的时间。</td><td align="center">使用UDP时，每个数据报都给出了完整的地址信息，无需建立发送方和接收方的连接。</td></tr><tr><td align="center">使用TCP就没有大小限制，一旦连接建立，就可以传输大量数据。</td><td align="center">使用UDP传输数据时有大小限制，每个数据报必须不大于64KB。</td></tr><tr><td align="center">TCP是可靠协议，确保接收方完全正确地获取发送方发送的数据。</td><td align="center">UDP是不可靠协议，发送方发送的数据不一定以相同的次序到达接收方。</td></tr><tr><td align="center">TCP使用较广泛，如TELNET远程登录、FTP文件传输都需要不定长度的数据可靠地传输，因此使用TCP协议。</td><td align="center">UDP比较简单，需要较少的监护，因此常用于局域网分散系统中的客户/服务器应用程序。</td></tr></tbody></table><h2 id="4-2-DatagramSocket和DatagramPacket"><a href="#4-2-DatagramSocket和DatagramPacket" class="headerlink" title="4.2 DatagramSocket和DatagramPacket"></a>4.2 DatagramSocket和DatagramPacket</h2><p>​        用UDP编写客户/服务器程序时，无论是客户方还是服务器方，首先都要建立一个DatagramSocket对象用来接收或发送数据报，然后使用DatagramPacket类对象作为传输数据的载体。</p><h3 id="4-2-1-数据报通信实例"><a href="#4-2-1-数据报通信实例" class="headerlink" title="4.2.1 数据报通信实例"></a>4.2.1 数据报通信实例</h3><p>Server:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPServerDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            DatagramSocket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            DatagramPacket packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//阻塞</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client address:"</span><span class="token operator">+</span>packet<span class="token punctuation">.</span><span class="token function">getSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client data:"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token string">"welcome"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从接收到的数据报取得对方的地址和端口</span>            DatagramPacket spacket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>spacket<span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Client:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPClientDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            DatagramSocket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">9091</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String str <span class="token operator">=</span> <span class="token string">"hello server"</span><span class="token punctuation">;</span>            DatagramPacket spacket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>spacket<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            DatagramPacket packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//阻塞</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getSocketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="4-2-2-基于线程实现一对一通信"><a href="#4-2-2-基于线程实现一对一通信" class="headerlink" title="4.2.2 基于线程实现一对一通信"></a>4.2.2 基于线程实现一对一通信</h3><p>UDPPeerDemo:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">UDPReceiveThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> DatagramSocket socket<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UDPReceiveThread</span><span class="token punctuation">(</span>DatagramSocket socket<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        DatagramPacket p <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Data: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPPeerDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> DatagramSocket socket<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rport<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UDPPeerDemo</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span><span class="token keyword">int</span> rport<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rport <span class="token operator">=</span> rport<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SocketException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"套接字创建失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UDPReceiveThread</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//启动接收线程</span>        String s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        DatagramPacket packet <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            s <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>                        InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rport<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>UDPDemo:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UDPPeerDemo</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">,</span> <span class="token number">9091</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>UDPDemo2:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPDemo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UDPPeerDemo</span><span class="token punctuation">(</span><span class="token number">9091</span><span class="token punctuation">,</span> <span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="5、小结"><a href="#5、小结" class="headerlink" title="5、小结"></a>5、小结</h1><p>​        通过网络资源定位器可以指向并获取网络上丰富的资源。基于TCP的网络数据传输是一种可靠的有连接的网络数据传输。这种传输方式是目前最常用的网络数据传输方式。在基于TCP的网络程序中，服务器端与客户端的程序编写稍有些不同。<br>​        基于UDP的网络数据传输是一种可靠的无连接的网络数据传输。在基于UDP的网络程序设计中，服务器端与客户端的程序编写基本上是相类似的。在Java的包java.net还含有很多用于网络数据传输的类和接口，为网络编程提供了方便。 </p>]]></content>
      
      
      <categories>
          
          <category> JAVA基本知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>io流</title>
      <link href="/2020/07/20/io%E6%B5%81/"/>
      <url>/2020/07/20/io%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="1、流的概念"><a href="#1、流的概念" class="headerlink" title="1、流的概念"></a>1、流的概念</h1><h2 id="1-1流"><a href="#1-1流" class="headerlink" title="1.1流"></a>1.1流</h2><p>（1）流是一个无结构化的数据组成的序列，流中的数据没有任何格式和含义，只是以字节或字符形式进行流入或流出。</p><p>（2）数据流的流入和流出都是以程序本身作为核心，流入是指数据从外部数据源流入到程序内部；流出是指数据从程序内部向外部流出到数据的目的地。 </p><p>（3）不管是流入还是流出，其数据的流动都是通过一个管道进行的，管道两端分别连接数据源和数据目的地。</p><p>（4）流的本质就是进行数据传输，因此Java根据数据传输的特性将流抽象成各种类，以方便进行数据操作。</p><p><img src="/2020/07/20/io%E6%B5%81/1_1.png" alt="图1.1"></p><h2 id="1-2流的分类"><a href="#1-2流的分类" class="headerlink" title="1.2流的分类"></a>1.2流的分类</h2><ul><li>根据处理数据类型，可以分为字节流和字符流。</li><li>根据数据的流向可以分为输入流和输出流。</li><li>根据处理数据功能，可以分为实体流和装饰流。</li><li>实体流对数据不做任何处理，只完成基本的读写操作。</li><li>装饰流是在实体流的基础上，提供更高级的功能。</li><li>这些流都在java.io包中。</li></ul><h3 id="1-2-1字节流"><a href="#1-2-1字节流" class="headerlink" title="1.2.1字节流"></a>1.2.1字节流</h3><ul><li>在数据传输过程中以字节为单位进行输入和输出。</li><li>适用于传输各种类型的文件或数据。</li><li>在字节输入流中，InputStream 类是所有的输入字节流的父类，它是一个抽象类。</li><li>其子类中的ByteArrayInputStream、FileInputStream 是两种基本的实体流。</li><li>ObjectInputStream 和所有FilterInputStream 的子类都是装饰流。</li><li>在字节输出流中，OutputStream 是所有的输出字节流的父类，它是一个抽象类。</li><li>ByteArrayOutputStream、FileOutputStream 是两种基本的实体流。</li><li>ObjectOutputStream 和所有FilterOutputStream 的子类都是装饰流。</li></ul><p><img src="/2020/07/20/io%E6%B5%81/1_2.png" alt="图1.2"></p><h3 id="1-2-2字符流"><a href="#1-2-2字符流" class="headerlink" title="1.2.2字符流"></a>1.2.2字符流</h3><ul><li>在数据传输过程中以字符为单位进行输入和输出。</li><li>根据字符编码表，一个字符占用两个字节，因此字符流只适用于字符类型数据的处理。</li><li>在字符输入流中，Reader 是所有的输入字符流的父类，它是一个抽象类。</li><li>InputStreamReader 是一个连接字节流和字符流的桥梁，它使用指定的字符集读取字节并转换成字符。</li><li>其FileReader子类可以更方便地读取字符文件，也是常用的Reader流对象。</li><li>在字符输出流中，Writer是所有的输出字符流的父类，也是一个抽象类。</li><li>相对输入流的子类，输出流当中也有相应的输出子类，只是数据传输方向相反。</li><li>这些类有OutputStreamWriter及其子类FileWriter、 CharArrayWriter、StringWriter 、BufferedWriter 、PipedWriter等。</li></ul><p><img src="/2020/07/20/io%E6%B5%81/1_3.png" alt="图1.3"></p><h1 id="2、File类"><a href="#2、File类" class="headerlink" title="2、File类"></a>2、File类</h1><h2 id="2-1文件对象与文件属性"><a href="#2-1文件对象与文件属性" class="headerlink" title="2.1文件对象与文件属性"></a>2.1文件对象与文件属性</h2><p>​    文件用文件类的对象表示，有了文件对象就可以获取文件属性。</p><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center">File(String filename)</td><td align="center">在当前路径下，创建一个名字为filename的文件</td></tr><tr><td align="center"></td><td align="center">File(String path,</td><td align="center"></td></tr><tr><td align="center">String filename)</td><td align="center">在给定的path路径下，创建一个名字为filename的文件</td><td align="center"></td></tr><tr><td align="center">String</td><td align="center">getName()</td><td align="center">获取此文件（目录）的名称</td></tr><tr><td align="center">String</td><td align="center">getPath()</td><td align="center">获取路径名字符串</td></tr><tr><td align="center">long</td><td align="center">length()</td><td align="center">获取文件的长度。如果表示目录，则返回值不确定</td></tr><tr><td align="center">boolean</td><td align="center">canRead()</td><td align="center">判断文件是否可读</td></tr><tr><td align="center">String</td><td align="center">getAbsolutePath()</td><td align="center">获取路径名字符串</td></tr><tr><td align="center">boolean</td><td align="center">canWrite()</td><td align="center">判断文件是否可写</td></tr><tr><td align="center">boolean</td><td align="center">canExecute()</td><td align="center">判断文件是否执行</td></tr><tr><td align="center">boolean</td><td align="center">exists()</td><td align="center">判断文件（目录）是否存在</td></tr><tr><td align="center">boolean</td><td align="center">isFile()</td><td align="center">判断文件是否是一个标准文件</td></tr><tr><td align="center">boolean</td><td align="center">isDirectory()</td><td align="center">判断文件是否是一个目录</td></tr><tr><td align="center">boolean</td><td align="center">isHidden()</td><td align="center">判断文件是否是一个隐藏文件</td></tr><tr><td align="center">long</td><td align="center">lastModified()</td><td align="center">判断文件最后一次被修改的时间</td></tr></tbody></table><h2 id="2-2目录"><a href="#2-2目录" class="headerlink" title="2.2目录"></a>2.2目录</h2><p>​    Java把目录作为一种特殊的文件进行处理，它除了具备文件的基本属性如文件名、所在路径等信息以外，同时也提供了专用于目录的一些操作方法。</p><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">mkdir()</td><td align="center">创建一个目录，并返回创建结果。成功返回true，失败（目录已存在）返回false</td></tr><tr><td align="center">boolean</td><td align="center">mkdirs()</td><td align="center">创建一个包括父目录在内的目录。创建所有目录成功返回true，如果失败返回false，但要注意的是有可能部分目录已创建成功</td></tr><tr><td align="center">String[]</td><td align="center">list()</td><td align="center">获取目录下字符串表示形式的文件名和目录名</td></tr><tr><td align="center">String[]</td><td align="center">list(FilenameFilter filter)</td><td align="center">获取满足指定过滤器条件的字符串表示形式的文件名和目录名</td></tr><tr><td align="center">File[]</td><td align="center">listFiles()</td><td align="center">获取目录下文件类型表示形式的文件名和目录名</td></tr><tr><td align="center">File[]</td><td align="center">listFiles(FileFilter filter)</td><td align="center">获取满足指定过滤器文件条件的文件表示形式的文件名和目录名</td></tr><tr><td align="center">File[]</td><td align="center">listFiles(FilenameFliter fliter)</td><td align="center">获取满足指定过滤器路径和文件条件的文件表示形式的文件名和目录名</td></tr></tbody></table><h2 id="2-3文件的操作"><a href="#2-3文件的操作" class="headerlink" title="2.3文件的操作"></a>2.3文件的操作</h2><ol><li><p>创建文件File类的方法：</p><p><code>public boolean createNewFile()</code></p><p><code>File file = new File(“D:\\”,”hello.txt”)</code></p><p><code>file.createNewFile();</code></p></li><li><p>删除文件File类中的方法:</p><p><code>file.delete()</code></p></li><li><p>运行可执行文件</p><p>首先利用Runtime类的静态方法创建一个Runtime对象:</p><p><code>Runtime ec = Runtime.getRuntime();</code></p><p>然后用ec调用方法：</p><p><code>Process exec(String command);</code></p></li></ol><h2 id="2-4-Scanner类与文件"><a href="#2-4-Scanner类与文件" class="headerlink" title="2.4 Scanner类与文件"></a>2.4 Scanner类与文件</h2><p>​    利用Scanner类的对象还可以从文件中读取数据:</p><p>  <code>Scanner input=new Scanner(文件类对象)</code></p><p>​    创建的Scanner类的对象使用read()方法即可从文件中读数据。</p><p>​    读数据时默认以空格作为数据的分隔标记。</p><h1 id="3、字节流和字符流"><a href="#3、字节流和字符流" class="headerlink" title="3、字节流和字符流"></a>3、字节流和字符流</h1><h2 id="3-1字节流"><a href="#3-1字节流" class="headerlink" title="3.1字节流"></a>3.1字节流</h2><p>​    抽象类InputStream和抽象类OutputStream是所有字节流类的根类，其他字节流类都继承自这两个类。</p><h3 id="3-1-1-字节输入流InputStream"><a href="#3-1-1-字节输入流InputStream" class="headerlink" title="3.1.1 字节输入流InputStream"></a>3.1.1 字节输入流InputStream</h3><p>​    字节输入流的作用是从数据输入源（例如从磁盘、网络等）获取字节数据到应用程序（内存）中。</p><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">read()</td><td align="center">从输入流中读取下一个字节，返回读入的字节数据；如果读到末尾，返回-1</td></tr><tr><td align="center">int</td><td align="center">read(byte b[])</td><td align="center">从输入流中读取一定数量的字节保存到字节数组中，并返回实际读取的字节数</td></tr><tr><td align="center">int</td><td align="center">read(byte b[],int off,</td><td align="center"></td></tr><tr><td align="center">int len)</td><td align="center">从输入流中读取最多len个字节，保存到数组b中从off开始的位置，并返回实际读入的字节数；如果off+len 大于b.length，或者off 和len中有一个是负数，那么会抛出IndexOutOfBoundsException异常</td><td align="center"></td></tr><tr><td align="center">long</td><td align="center">skip(long n)</td><td align="center">从输入流中跳过并丢弃n个字节，并返回实际跳过的字节数</td></tr><tr><td align="center">void</td><td align="center">close()</td><td align="center">关闭输入流，释放资源。对流的读取完毕后调用该方法以释放资源</td></tr><tr><td align="center">int</td><td align="center">available()</td><td align="center">返回此输入流可以读取（或跳过）的估计字节数</td></tr><tr><td align="center">void</td><td align="center">mark(int readlimit)</td><td align="center">在输入流中标记当前的位置。参数readlimit为标记失效前最多读取的字节数。如果读取的字节数超出此范围则标记失效</td></tr><tr><td align="center">void</td><td align="center">reset()</td><td align="center">将输入流重新定位到最后一次调用 mark 方法时的位置</td></tr><tr><td align="center">boolean</td><td align="center">markSupported()</td><td align="center">测试此输入流是否支持 mark 和 reset 方法。只有带缓存的输入流支持标记功能</td></tr></tbody></table><h3 id="3-1-2-文件字节输入流类FileInputStream"><a href="#3-1-2-文件字节输入流类FileInputStream" class="headerlink" title="3.1.2 文件字节输入流类FileInputStream"></a>3.1.2 文件字节输入流类FileInputStream</h3><p>​    在进行字节输入流操作时，经常使用的是InputStream类的子类FileInputStream，实现简单的文件数据读取。</p><p>​    FileInputStream类的常用构造方法：</p><p><code>public FileInputStream(File file) throws FileNotFoundException</code></p><p><code>public FileInputStream(String name) throws FileNotFoundException</code></p><p>​    通过给定的File对象和文件创建文件字节输入流对象。</p><p>​    在创建输入流时，如果文件不存在或出现其他问题，会抛出FileNotFoundException异常，所以要注意捕获。</p><p><strong>字节输入流读数据步骤：</strong></p><ol><li>设定输入流的数据源</li><li>创建指向这个数据源的输入流</li><li>从输入流中读取数据</li><li>关闭输入流</li></ol><h3 id="3-1-3-字节输出流OutputStream"><a href="#3-1-3-字节输出流OutputStream" class="headerlink" title="3.1.3 字节输出流OutputStream"></a>3.1.3 字节输出流OutputStream</h3><p>​    字节输出流的作用是将字节数据从应用程序（内存）中传送到输出目的地，如外部设备、网络等。</p><p>​    字节输出流OutputStream的常用方法。</p><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">void</td><td align="center">write(int b)</td><td align="center">将整数b的低8位写到输出流</td></tr><tr><td align="center">void</td><td align="center">write(byte b[])</td><td align="center">将字节数组中数据写到输出流</td></tr><tr><td align="center">void</td><td align="center">write(byte b[ ],</td><td align="center"></td></tr><tr><td align="center">int off,int len)</td><td align="center">从字节数组b的off处写len个字节数据到输出流</td><td align="center"></td></tr><tr><td align="center">void</td><td align="center">flush()</td><td align="center">强制将输出流保存在缓冲区中的数据写到输出流</td></tr><tr><td align="center">void</td><td align="center">close()</td><td align="center">关闭输出流，释放资源</td></tr></tbody></table><h3 id="3-1-4-文件字节输出流类FileOutputStream"><a href="#3-1-4-文件字节输出流类FileOutputStream" class="headerlink" title="3.1.4 文件字节输出流类FileOutputStream"></a>3.1.4 文件字节输出流类FileOutputStream</h3><p>​    在进行字节输出流操作时，经常使用的是OutputStream类的子类FileOutputStream，用于将数据写入File或其他的输出流。</p><p>​    FileOutputStream类的常用构造方法：</p><p><code>public FileOutputStream(File file) throws IOException</code></p><p><code>public FileOutnputStream(String name) throws IOException</code></p><p><code>public FileOutputStream(File file, boolean append) throws IOException</code></p><p><code>public FileOutputStream(String name, boolean append) throws IOException</code></p><p>  <strong>字节输出流写数据步骤</strong>：</p><ol><li>设定输出流的目的地</li><li>创建指向这目的地输出</li><li>向输出流中写入数据</li><li>关闭输出流</li></ol><p>​    在完成写操作过程中，系统会将数据暂存到缓冲区中，缓冲区存满后再一次性写入到输出流中。</p><p>​    执行close()方法时，不管缓冲区是否已满，都会把其中的数据写到输出流。</p><h2 id="3-2-字符流"><a href="#3-2-字符流" class="headerlink" title="3.2 字符流"></a>3.2 字符流</h2><p>​    字符流通常用于文本文件的传输。</p><p>​    抽象类Reader和抽象类Writer是所有字符流类的根类，其他字符流类都继承自这两个类。</p><p>​    其中一些子类还在传输过程中对数据做了进一步处理以方便用户的使用。</p><h3 id="3-2-1-字符输入流Reader"><a href="#3-2-1-字符输入流Reader" class="headerlink" title="3.2.1 字符输入流Reader"></a>3.2.1 字符输入流Reader</h3><p>​    字符输入流Reader是所有字符输入流类的父类，实现从数据源读入字符数据。常用方法有：</p><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">read()</td><td align="center">从输入流读取单个字符</td></tr><tr><td align="center">int</td><td align="center">read(char[] cbuf)</td><td align="center">从输入流读取字符保存到数组cbuf中，返回读取的字符数，如果已到达流的末尾，则返回 -1</td></tr><tr><td align="center">int</td><td align="center">read(char[] cbuf,int off,int len)</td><td align="center">从输入流读取最多len个字符保存到字符数组cbuf中，存放的起始位置在off处。返回：读取的字符数，如果已到达流的末尾，则返回 -1</td></tr><tr><td align="center">long</td><td align="center">skip(long n)</td><td align="center">跳过n个字符。</td></tr><tr><td align="center">返回：实际跳过的字符数</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">void</td><td align="center">mark(int readAheadLimit)</td><td align="center">标记流中的当前位置</td></tr><tr><td align="center">void</td><td align="center">reset()</td><td align="center">重置该流</td></tr><tr><td align="center">boolean</td><td align="center">markSupported()</td><td align="center">判断此流是否支持 mark() 操作</td></tr><tr><td align="center">void</td><td align="center">close()</td><td align="center">关闭该流，释放资源</td></tr></tbody></table><h3 id="3-2-2-文件字符输入流FileReader"><a href="#3-2-2-文件字符输入流FileReader" class="headerlink" title="3.2.2 文件字符输入流FileReader"></a>3.2.2 文件字符输入流FileReader</h3><p>​    进行字符输入流操作时，经常使用的是Reader类的子类FileReader，用于从输入流读取数据。</p><p>​    FileReader类的常用构造方法：</p><p><code>public FileReader(File file) throws FileNotFoundException</code></p><p><code>public FileReader(String name) throws FileNotFoundException</code></p><p>​    通过给定的File对象或文件名创建字符输入流。</p><p>​    在创建输入流时，如果文件不存在或出现其他问题，会抛出FileNotFoundException异常。</p><h3 id="3-2-3-字符输出流Writer"><a href="#3-2-3-字符输出流Writer" class="headerlink" title="3.2.3 字符输出流Writer"></a>3.2.3 字符输出流Writer</h3><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">void</td><td align="center">write(int c)</td><td align="center">将整数c的低16位写到输出流</td></tr><tr><td align="center">void</td><td align="center">write(char[] cbuf)</td><td align="center">将字符数组中数据写到输出流</td></tr><tr><td align="center">void</td><td align="center">write(cbuf[ ],int off,int len)</td><td align="center">从字符数组cbuf的off处开始取len个字符写到输出流</td></tr><tr><td align="center">void</td><td align="center">write(String str)</td><td align="center">将字符串写到输出流</td></tr><tr><td align="center">void</td><td align="center">write(String str,int off,int len)</td><td align="center">从字符串str的off处开始取len个字符数据写到输出流</td></tr><tr><td align="center">void</td><td align="center">flush()</td><td align="center">强制将输出流保存在缓冲区中的数据写到输出</td></tr><tr><td align="center">void</td><td align="center">close()</td><td align="center">关闭输出流，释放资源</td></tr></tbody></table><h3 id="3-2-4-文件字符输出流FileWriter类"><a href="#3-2-4-文件字符输出流FileWriter类" class="headerlink" title="3.2.4 文件字符输出流FileWriter类"></a>3.2.4 文件字符输出流FileWriter类</h3><p>​    FileWriter类和字节流FileOutputStream类相对应，实现字符的输出操作，实现方法也基本相同。FileWriter类的常用构造方法：</p><p><code>public FileWriter(File file) throws IOException</code></p><p><code>public FileWriter(String name) throws IOException</code></p><p><code>public FileWriter(File file, boolean append) throws IOException</code></p><p><code>public FileWriter(String name, boolean append) throws IOException</code></p><p>​    如果第二个参数为 true，则将字符写入文件末尾处，而不是写入文件开始处。</p><p>​    如果文件不存在或出现其他问题，会抛出IOException异常。</p><h1 id="4、数据流"><a href="#4、数据流" class="headerlink" title="4、数据流"></a>4、数据流</h1><p>​    数据流是Java提供的一种装饰类流。</p><p>​    建立在实体流基础上，让程序不需考虑数据所占字节个数的情况下就能够正确地完成读写操作。</p><p>​    DataInputStream类和DataOutputStream类分别为数据输入流类和数据输出流类。</p><h2 id="4-1-数据输入流"><a href="#4-1-数据输入流" class="headerlink" title="4.1 数据输入流"></a>4.1 数据输入流</h2><p>​    数据输入流DataInputStream类允许程序以与机器无关方式从底层输入流中读取基本 Java 数据类型。</p><p>​    DataInputStream类的常用方法：</p><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center">DataInputStream(InputStream in)</td><td align="center">使用指定的实体流 InputStream 创建一个DataInputStream</td></tr><tr><td align="center">boolean</td><td align="center">readBoolean()</td><td align="center">读取一个布尔值</td></tr><tr><td align="center">byte</td><td align="center">readByte()</td><td align="center">读取一个字节</td></tr><tr><td align="center">char</td><td align="center">readChar()</td><td align="center">读取一个字符</td></tr><tr><td align="center">long</td><td align="center">readLong()</td><td align="center">读取一个长整型数</td></tr><tr><td align="center">int</td><td align="center">readInt()</td><td align="center">读取一个整数</td></tr><tr><td align="center">short</td><td align="center">readShort()</td><td align="center">读取一个短整型数</td></tr><tr><td align="center">float</td><td align="center">readFloat()</td><td align="center">读取一个Float数</td></tr><tr><td align="center">double</td><td align="center">readDouble()</td><td align="center">读取一个Double数</td></tr><tr><td align="center">String</td><td align="center">readUTF()</td><td align="center">读取一个UTF字符串</td></tr><tr><td align="center">int</td><td align="center">skipBytes(int n)</td><td align="center">跳过并丢弃n个字节，返回实际跳过的字节数</td></tr></tbody></table><h2 id="4-2-数据输出流"><a href="#4-2-数据输出流" class="headerlink" title="4.2 数据输出流"></a>4.2 数据输出流</h2><p>​    数据输出流DataOutputStream类允许程序以适当方式将基本Java数据类型写入输出流中。DataOutputStream类的常用方法：</p><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center">DataOuputStream</td><td align="center"></td></tr><tr><td align="center">(OutputStream out)</td><td align="center">创建一个新的数据输出流，将数据写入指定基础输出流</td><td align="center"></td></tr><tr><td align="center">void</td><td align="center">writeBoolean(Boolean v)</td><td align="center">将一个布尔值写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeByte(int v)</td><td align="center">将一个字节写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeBytes(String s)</td><td align="center">将字符串按字节（每个字符的高八位丢弃）顺序写出到输出流中</td></tr><tr><td align="center">void</td><td align="center">writeChar(int c)</td><td align="center">将一个 char 值以2字节值形式写入输出流中，先写入高字节</td></tr><tr><td align="center">void</td><td align="center">writeChars(String s)</td><td align="center">将字符串按字符顺序写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeLong(long v)</td><td align="center">将一个长整型数写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeInt(int v)</td><td align="center">将一个整数写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeShort(int v)</td><td align="center">将一个短整型数写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeFloat(float v)</td><td align="center">将一个Float数写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeDouble(double v)</td><td align="center">将一个Double数写出到输出流</td></tr><tr><td align="center">void</td><td align="center">writeUTF(String s)</td><td align="center">将一个字符串用UTF-8编码形式写出到输出流</td></tr><tr><td align="center">int</td><td align="center">size()</td><td align="center">返回写到数据输出流中的字节数</td></tr><tr><td align="center">void</td><td align="center">flush()</td><td align="center">清空输出流，使所有缓冲中的字节被写出到流中</td></tr></tbody></table><h1 id="5、缓冲流"><a href="#5、缓冲流" class="headerlink" title="5、缓冲流"></a>5、缓冲流</h1><p>​    缓冲流是在实体I/O流基础上增加一个缓冲区，应用程序和I/O设备之间的数据传输都要经过缓冲区来进行。</p><p>​    缓冲流分为缓冲输入流和缓冲输出流。</p><p>​    缓冲输入流是将从输入流读入的字节/字符数据先存在缓冲区中，应用程序从缓冲区而不是从输入流读取数据；</p><p>​    缓冲输出流是在进行数据输出时先把数据存在缓冲区中，当缓冲区满时再一次性地写到输出流中。</p><p>​    使用缓冲流可以减少应用程序与I/O设备之间的访问次数，提高传输效率；</p><p>​    可以对缓冲区中的数据进行按需访问和预处理，增加访问的灵活性。</p><h2 id="5-1-缓冲输入流"><a href="#5-1-缓冲输入流" class="headerlink" title="5.1 缓冲输入流"></a>5.1 缓冲输入流</h2><p>​    包括字节缓冲输入流BufferedInputStream类和字符缓冲输入流BufferedReader类。</p><h3 id="5-1-1-字节缓冲输入流BufferedInputStream类"><a href="#5-1-1-字节缓冲输入流BufferedInputStream类" class="headerlink" title="5.1.1 字节缓冲输入流BufferedInputStream类"></a>5.1.1 字节缓冲输入流BufferedInputStream类</h3><p>​    先通过实体输入流（例如FileInputStream类）对象逐一读取字节数据并存入缓冲区，应用程序则从缓冲区中读取数据。<br>​    构造方法：</p><p><code>public BufferedInputStream(InputStream in)</code></p><p><code>public BufferedInputStream(InputStream in,int size)</code></p><p>​    size:指定缓冲区的大小。</p><p>​    BufferedInputStream类继承自InputStream，所以该类的方法与InputStream类的方法相同。</p><h3 id="5-1-2-字符缓冲输入流BufferedReader类"><a href="#5-1-2-字符缓冲输入流BufferedReader类" class="headerlink" title="5.1.2 字符缓冲输入流BufferedReader类"></a>5.1.2 字符缓冲输入流BufferedReader类</h3><p>​    与字节缓冲输入流BufferedInputStream类在功能和实现上基本相同。它只适用于字符读入。</p><p>​    构造方法：</p><p><code>public BufferedReader(Reader in)</code></p><p><code>public BufferedReader(Reader in,int sz)</code></p><p>​    BufferedReader类继承自Reader，所以该类的方法与Reader类的方法相同。</p><p>​    新增按行读取的方法：<code>String readLine()</code></p><p>​    该方法返回值为该行不包含结束符的字符串内容，如果已到达流末尾，则返回 null。</p><h2 id="5-2-缓冲输出流"><a href="#5-2-缓冲输出流" class="headerlink" title="5.2 缓冲输出流"></a>5.2 缓冲输出流</h2><p>​    缓冲输出流包括字节缓冲输出流BufferedOutputStream类和字符缓冲输出流BufferedWriter类。</p><h3 id="5-2-1-字节缓冲输出流BufferedOutputStream类"><a href="#5-2-1-字节缓冲输出流BufferedOutputStream类" class="headerlink" title="5.2.1 字节缓冲输出流BufferedOutputStream类"></a>5.2.1 字节缓冲输出流BufferedOutputStream类</h3><p>​    完成输出操作时，先将字节数据写入缓冲区，当缓冲区满时，再把缓冲区中的所有数据一次性写到底层输出流中。</p><p>​    构造方法： </p><p><code>public BufferedOutputStream(OutputStream out)</code><br><code>public BufferedOutputStream(OutputStream out,int size)</code></p><p>​    BufferedOutputStream类继承自OutputStream，所以该类的方法与OutputStream类的方法相同。</p><h3 id="5-2-2-字符缓冲输出流BufferedWriter类"><a href="#5-2-2-字符缓冲输出流BufferedWriter类" class="headerlink" title="5.2.2 字符缓冲输出流BufferedWriter类"></a>5.2.2 字符缓冲输出流BufferedWriter类</h3><p>​    与字节缓冲输出流BufferedOutputStream类在功能和实现上是相同的。只适用于字符输出。</p><p>​    BufferedWriter类的构造方法：</p><p><code>public BufferedWriter(Writer out)</code><br><code>public BufferedWriterr(Writer out,int sz)</code></p><p>​    BufferedWriter类继承自Writer，所以该类的方法与Writer类的方法相同。</p><p>​    新增写行分隔符的方法：<code>String newLine()</code>行分隔符字符串由系统属性 line.separator 定义。</p><h1 id="6、-随机流"><a href="#6、-随机流" class="headerlink" title="6、 随机流"></a>6、 随机流</h1><p>​    随机流RandomAccessFile类创建的对象既可以作为输入流，也可以作为输出流，因此建立一个随机流就可以完成读写操作。</p><p>​    RandomAccessFile类是java.lang.Object根类的子类。</p><p>​    RandomAccessFile类的实例对象支持对随机访问文件的读取和写入。</p><p>​    随机流可以用于多线程下载或多个线程同时写数据到文件，为快速完成访问提供了便利。</p><h2 id="6-1-RandomAccessFile类"><a href="#6-1-RandomAccessFile类" class="headerlink" title="6.1  RandomAccessFile类"></a>6.1  RandomAccessFile类</h2><table><thead><tr><th align="center">返回类型</th><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"></td><td align="center">RandomAccessFile(String name, String mode)</td><td align="center">参数name为待访问的文件名，file待访问的文件。参数mode为读写模式，常用的值有：“r”以只读方式打开文件，如果进行写操作会产生异常；“rw”：以读写方式打开文件，如果文件不存在，则创建</td></tr><tr><td align="center"></td><td align="center">RandomAccessFile(File file, String mode)</td><td align="center">同上</td></tr><tr><td align="center">int</td><td align="center">read()</td><td align="center">从文件中读取一个数据字节并以整数形式返回此字节</td></tr><tr><td align="center">int</td><td align="center">read(byte[] b)</td><td align="center">从文件中读取最多b.length 个数据字节到b数组中，并返回实际读取的字节数</td></tr><tr><td align="center">int</td><td align="center">read(byte[] b, int off, int len)</td><td align="center">从文件中读取len个字节数据到b数组中。off为字节在数组中存放的地址</td></tr><tr><td align="center">XXX</td><td align="center">readXXX()</td><td align="center">从文件中读取一个XXX类型数据，XXX包括：boolean，byte，char，short，int，lang，float，double</td></tr><tr><td align="center">void</td><td align="center">write(int b)</td><td align="center">写入指定的字节</td></tr><tr><td align="center">void</td><td align="center">write(byte[] b)</td><td align="center">写入字节数组内容到文件</td></tr><tr><td align="center">void</td><td align="center">writeXXX</td><td align="center"></td></tr><tr><td align="center">(XXX v)</td><td align="center">写入指定类型数据到文件，XXX包括：boolean，byte，char，short，int，lang，float，double</td><td align="center"></td></tr><tr><td align="center">void</td><td align="center">writeChars(String s)</td><td align="center">写入字符串到文件</td></tr><tr><td align="center">void</td><td align="center">writeUTF(String s)</td><td align="center">按UTF-8编码形式将字符串写入到文件</td></tr><tr><td align="center">long</td><td align="center">getFilePointer()</td><td align="center">获取文件的当前偏移量</td></tr><tr><td align="center">void</td><td align="center">seek(long pos)</td><td align="center">设置文件的指针偏移量</td></tr><tr><td align="center">long</td><td align="center">length()</td><td align="center">获取文件的长度</td></tr><tr><td align="center">void</td><td align="center">setLength(long newLength)</td><td align="center">设置此文件的长度。 如果 length 方法返回的文件的现有长度大于 newLength 参数，则该文件将被截短。超过则加大文件，多出部分没有内容</td></tr><tr><td align="center">int</td><td align="center">skipBytes(int n)</td><td align="center">跳过输入的 n 个字节并丢弃跳过的字节</td></tr><tr><td align="center">void</td><td align="center">close()</td><td align="center">关闭文件流，释放资源</td></tr></tbody></table><p>​    由于编码格式不同当进行字符串读取的时候，有时会出现“乱码”的现象。</p><p>​    对字符串重新进行编码可以解决乱码问题：</p><ul><li>先读字符串：<br><code>String str = in.readLine();</code></li><li>再将字符串恢复成标准字节数组：<br><code>byte [] b=str.getBytes(“iso-8859-1”);</code></li><li>最后将字节数组按当前机器的默认编码重新转化为字符串：<br><code>String result=new String(b);</code></li><li>显式地指明编码类型，可以直接给出编码类型：<br><code>String result=new String(b,”GB2312”);</code></li></ul><h1 id="7、对象流"><a href="#7、对象流" class="headerlink" title="7、对象流"></a>7、对象流</h1><p>​    对象流是在实体流基础上，通过对对象数据的处理和变换，实现对象的永久保存和读取。</p><p>​    ObjectInputStream和ObjectOutputStream分别是对象输入流类和对象输出流类，它们也是InputStream和OutputStream类的子类。</p><p>​    通过对象输出流，可以把对象写入到文件或进行网络传输。</p><p>​    对象输入流类可以从文件或网络上，把读取的数据还原成对象。</p><p>​    要想实现对象的传输，待传输的对象要先进行序列化处理，才能保证对象能准确地保存和读取。</p><h2 id="7-1-对象的序列化"><a href="#7-1-对象的序列化" class="headerlink" title="7.1 对象的序列化"></a>7.1 对象的序列化</h2><p>​    对象的序列化是指把对象转换成字节序列的过程，而把字节序列恢复为对象的过程称为对象的反序列化。</p><p>​    一个类如果实现了java.io.Serializable接口，这个类的实例（对象）就是一个序列化的对象。</p><p>​    Serializable接口中没有方法。实现了该接口的对象进行输出时，JVM将按照一定的格式（序列化信息）转换成字节进行传输和存储到目的地。</p><p>​    对象输入流从文件或网络上读取对象时，会先读取对象的序列化信息，并根据这一信息创建对象。</p><h2 id="7-2-对象输入流与对象输出流"><a href="#7-2-对象输入流与对象输出流" class="headerlink" title="7.2 对象输入流与对象输出流"></a>7.2 对象输入流与对象输出流</h2><h3 id="7-2-1-对象输入流ObjectInputStream类"><a href="#7-2-1-对象输入流ObjectInputStream类" class="headerlink" title="7.2.1 对象输入流ObjectInputStream类"></a>7.2.1 对象输入流ObjectInputStream类</h3><p>​    实现对象的输入操作。构造方法：</p><p>   <code> public ObjectInputStream(InputStream in)</code></p><p>​    类中的方法：<code>Object readObject()</code>从ObjectInputStream流中读取对象。</p><h3 id="7-2-2-对象输出流ObjectOutputStream类"><a href="#7-2-2-对象输出流ObjectOutputStream类" class="headerlink" title="7.2.2 对象输出流ObjectOutputStream类"></a>7.2.2 对象输出流ObjectOutputStream类</h3><p>​    实现对象的输出操作。构造方法：</p><p>​    <code>public ObjectOutputStream(OutputStream out)</code></p><p>​    类中的方法：<code>void writeObject(Object o)</code>将指定对象o写入ObjectOutputStream流中。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA基本知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring事务管理</title>
      <link href="/2020/07/10/spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
      <url>/2020/07/10/spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1、什么是Spring事务管理？"><a href="#1、什么是Spring事务管理？" class="headerlink" title="1、什么是Spring事务管理？"></a>1、什么是Spring事务管理？</h1><p>​        在实际开发中，操作数据库时都会涉及到事务管理问题，为此Spring提供了专门用于事务处理的API。Spring的事务管理简化了传统的事务管理流程，并且在一定程度上减少了开发者的工作量。</p><h1 id="2、事务管理的核心接口"><a href="#2、事务管理的核心接口" class="headerlink" title="2、事务管理的核心接口"></a>2、事务管理的核心接口</h1><p>​        3个接口文件PlatformTransactionManager、TransactionDefinition和TransactionStatus。</p><h2 id="2-1-PlatformTransactionManager"><a href="#2-1-PlatformTransactionManager" class="headerlink" title="2.1 PlatformTransactionManager"></a>2.1 PlatformTransactionManager</h2><p>​        PlatformTransactionManager接口是Spring提供的平台事务管理器，主要用于管理事务。</p><p>​        该接口中提供了三个事务操作的方法，具体如下：</p><p><img src="/2020/07/10/spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20200804193658738.png" alt="图1"></p><p>​        PlatformTransactionManager接口只是代表事务管理的接口，并不知道底层是如何管理事务的，具体如何管理事务则由它的实现类来完成。</p><p>​        该接口常见的几个实现类如下：</p><p><img src="/2020/07/10/spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20200804193806701.png" alt="图2"></p><p>​        当底层使用不同的持久层技术时，只需改变接口的实现类即可。</p><h2 id="2-2-TransactionDefinition"><a href="#2-2-TransactionDefinition" class="headerlink" title="2.2 TransactionDefinition"></a>2.2 TransactionDefinition</h2><p>​        TransactionDefinition接口是事务定义（描述）的对象，该对象中定义了事务规则，并提供了获取事务相关信息的方法，具体如下：</p><p>​        <img src="/2020/07/10/spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20200804194010103.png" alt="图3"></p><p>​        上述方法中，事务的传播行为是指在同一个方法中，不同操作前后所使用的事务。传播行为有很多种，具体如下表所示：</p><p><img src="/2020/07/10/spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20200804194103241.png" alt="传播行为"></p><p>​        在事务管理过程中，传播行为可以控制是否需要创建事务以及如何创建事务，通常情况下，数据的查询不会影响原数据的改变，所以不需要进行事务管理，而对于数据的插入、更新和删除操作，必须进行事务管理。如果没有指定事务的传播行为，Spring默认传播行为是REQUIRED。</p><h2 id="2-3-TransactionStatus"><a href="#2-3-TransactionStatus" class="headerlink" title="2.3 TransactionStatus"></a>2.3 TransactionStatus</h2><p>​        TransactionStatus接口是事务的状态，它描述了某一时间点上事务的状态信息。该接口中包含6个方法，具体如下：</p><p><img src="/2020/07/10/spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20200804194240436.png" alt="图4"></p><h1 id="3、事务管理的方式"><a href="#3、事务管理的方式" class="headerlink" title="3、事务管理的方式"></a>3、事务管理的方式</h1><ol><li><p>编程式事务管理：通过编写代码实现的事务管理，包括定义事务的开始、正常执行后的事务提交和异常时的事务回滚。</p></li><li><p>声明式事务管理：通过AOP技术实现的事务管理，主要思想是将事务作为一个“切面”代码单独编写，然后通过AOP技术将事务管理的“切面”植入到业务目标类中。</p></li></ol><p>​        声明式事务管理最大的优点在于开发者无需通过编程的方式来管理事务，只需在配置文件中进行相关的事务规则声明，就可以将事务应用到业务逻辑中。这使得开发人员可以更加专注于核心业务逻辑代码的编写，在一定程度上减少了工作量，提高了开发效率，所以在实际开发中，通常都推荐使用声明式事务管理。</p><h1 id="4、声明式事务管理"><a href="#4、声明式事务管理" class="headerlink" title="4、声明式事务管理"></a>4、声明式事务管理</h1><p>​        Spring的声明式事务管理可以通过两种方式来实现，一种是基于XML的方式（手动配置），另一种是基于Annotation的方式（注解）。</p><h2 id="4-1-XML的方式"><a href="#4-1-XML的方式" class="headerlink" title="4.1 XML的方式"></a>4.1 XML的方式</h2><p>​        基于XML方式的声明式事务是在配置文件中通过<code>&lt;tx:advice&gt;</code>元素配置事务规则来实现的。当配置了事务的增强处理后，就可以通过编写的AOP配置，让Spring自动对目标生成代理。</p><p><code>&lt;tx:advice&gt;</code>元素及其子元素如下图所示：</p><p><img src="/2020/07/10/spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/image-20200804201131721.png" alt="图5"></p><p>​        配置<code>&lt;tx:advice&gt;</code>元素的重点是配置<code>&lt;tx:method&gt;</code>子元素，上图中使用灰色标注的几个属性是<code>&lt;tx:method&gt;</code>元素中的常用属性。</p><p>​        配置文件：</p><pre class=" language-XML"><code class="language-XML"><?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"     xmlns:aop="http://www.springframework.org/schema/aop"    xmlns:tx="http://www.springframework.org/schema/tx"     xmlns:context="http://www.springframework.org/schema/context"    xsi:schemaLocation="http://www.springframework.org/schema/beans     http://www.springframework.org/schema/beans/spring-beans-4.3.xsd    http://www.springframework.org/schema/tx     http://www.springframework.org/schema/tx/spring-tx-4.3.xsd    http://www.springframework.org/schema/context     http://www.springframework.org/schema/context/spring-context-4.3.xsd    http://www.springframework.org/schema/aop     http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">    <!-- 1.配置数据源 -->    <bean id="dataSource"        class="org.springframework.jdbc.datasource.DriverManagerDataSource">        <!--数据库驱动 -->        <property name="driverClassName" value="com.mysql.jdbc.Driver" />        <!--连接数据库的url -->        <property name="url" value="jdbc:mysql://localhost:3306/my2020" />        <!--连接数据库的用户名 -->        <property name="username" value="root" />        <!--连接数据库的密码 -->        <property name="password" value="" />   </bean>   <!-- 2.配置JDBC模板 -->   <bean id="jdbcTemplate"           class="org.springframework.jdbc.core.JdbcTemplate">         <!-- 默认必须使用数据源 -->         <property name="dataSource" ref="dataSource" />   </bean>   <!--3.定义id为accountDao的Bean -->   <bean id="accountDao" class="com.hugeyurt.jdbc.AccountDaoImpl">         <!-- 将jdbcTemplate注入到AccountDao实例中 -->         <property name="jdbcTemplate" ref="jdbcTemplate" />   </bean>       <!-- 4.事务管理器，依赖于数据源  针对JDBC-->   <bean id="transactionManager" class=   "org.springframework.jdbc.datasource.DataSourceTransactionManager">        <property name="dataSource" ref="dataSource" />   </bean>       <!-- 5.编写通知：对事务进行增强(通知),需要编写对切入点和具体执行事务细节 -->    <tx:advice id="txAdvice" transaction-manager="transactionManager">        <tx:attributes>        <!--     name：*表示任意方法名称 -->            <tx:method name="*" propagation="REQUIRED"                            isolation="DEFAULT" read-only="false" />        </tx:attributes>    </tx:advice>      <!-- 6.编写aop，让spring自动对目标生成代理，需要使用AspectJ的表达式 -->  <aop:config>        <aop:pointcut expression="execution(* com.hugeyurt.jdbc.*.*(..))"            id="txPointCut" />        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut" />   </aop:config>      </beans></code></pre><h2 id="4-2-Annotation的方式"><a href="#4-2-Annotation的方式" class="headerlink" title="4.2 Annotation的方式"></a>4.2 Annotation的方式</h2><p>​        xml配置文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans     http://www.springframework.org/schema/beans/spring-beans-4.3.xsd    http://www.springframework.org/schema/tx     http://www.springframework.org/schema/tx/spring-tx-4.3.xsd    http://www.springframework.org/schema/context     http://www.springframework.org/schema/context/spring-context-4.3.xsd    http://www.springframework.org/schema/aop     http://www.springframework.org/schema/aop/spring-aop-4.3.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.jdbc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 1.配置数据源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span>     <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--数据库驱动 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--连接数据库的url --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/my2020<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--连接数据库的用户名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--连接数据库的密码 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.配置JDBC模板 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span>             <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 默认必须使用数据源 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 4.事务管理器，依赖于数据源 --></span>    &lt;bean id="transactionManager2" class=     "org.springframework.jdbc.datasource.DataSourceTransactionManager">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 5.注册事务管理器驱动 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>​        使用该种方式只需在方法前加入@Transactional就可以了。</p><p>​        如果将注解添加在Bean类上，则表示事务的设置对整个Bean类的所有方法都起作用；如果将注解添加在Bean类中的某个方法上，则表示事务的设置只对该方法有效。</p>]]></content>
      
      
      <categories>
          
          <category> spring框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 框架 </tag>
            
            <tag> JAVA </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springCore</title>
      <link href="/2020/07/03/springCore/"/>
      <url>/2020/07/03/springCore/</url>
      
        <content type="html"><![CDATA[<h1 id="1、SpringCore介绍"><a href="#1、SpringCore介绍" class="headerlink" title="1、SpringCore介绍"></a>1、SpringCore介绍</h1><p>​        实现过Spring框架中的DI，AOP等技术后，我对这些技术的实现过程有了浓厚的兴趣，比如：Spring怎么做到将对象创建到容器中？自动装配问题？等等。</p><p>​        通过自己对底层代码的实现，我明白了这些问题都是通过解析xml文件，反射机制做到的。以下就是我对底层代码的实现逻辑。（附源码）</p><h1 id="2、实现逻辑"><a href="#2、实现逻辑" class="headerlink" title="2、实现逻辑"></a>2、实现逻辑</h1><p>​        我们知道，xml文件中是由很多<code>&lt;bean&gt;&lt;/bean&gt;</code>标签组成的，每一个bean标签中都包含着一个类的全限定名。通过解析XML文件，得到该全限定名的对象，然后用反射机制，得到类的全部信息，将xml文件里的各种属性，装配到对象中，并将该对象放到容器中，等待用户的使用。</p><p>​        我实现的SpringCore中，定义了三个类，分别是：BeanInfo，HandleBeansInfo，SpringCore。</p><p>​        <strong>BeanInfo类：</strong>相当于Bean对象的PO类，用于储存一个完整的Bean对象。</p><p>​        <strong>HandleBeansInfo类：</strong>在该类中，我定义了两个HashMap。</p><p>​        第一个HashMap用于存储从XML文件中解析出来的所有Bean对象的信息。</p><p>​        第二个HashMap用于存储容器已经创建好的对象，供外界调用。</p><p>​        <strong>SpringCore类：</strong>将Bean对象转化为Object对象，将该Object存入第二个HashMap中，并通过getBean返回出Object对象。</p><h1 id="3、实现过程"><a href="#3、实现过程" class="headerlink" title="3、实现过程"></a>3、实现过程</h1><p>​        先看一下XML配置文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.Demo<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>session<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.Login<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>request<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>check<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.Check<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>single<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>china<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao<span class="token punctuation">"</span></span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mydao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.test.Hello<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>single<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>china<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mydemo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.hugeyurt.springioc.Demo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     &lt;bean name = "stu" class="com.hugeyurt.springioc.Student">         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mydemo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>​        我们要做的工作就是把这些beans创建为Object对象放入容器中。</p><p>BeanInfo类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanInfo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String className<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 类全限定名</span>    <span class="token keyword">private</span> String objectName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对象名</span>    <span class="token keyword">private</span> String scope<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 作用域</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> properties<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 需要赋值的属性</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> values<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 对应的属性值</span>    <span class="token keyword">public</span> String <span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> className<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setClassName</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> className<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getObjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> objectName<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setObjectName</span><span class="token punctuation">(</span>String objectName<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>objectName <span class="token operator">=</span> objectName<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> scope<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScope</span><span class="token punctuation">(</span>String scope<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scope <span class="token operator">=</span> scope<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> properties<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> properties<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> values<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValues</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> values<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>values <span class="token operator">=</span> values<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"BeanInfo [className="</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">", objectName="</span> <span class="token operator">+</span> objectName <span class="token operator">+</span> <span class="token string">", scope="</span> <span class="token operator">+</span> scope <span class="token operator">+</span> <span class="token string">", properties="</span> <span class="token operator">+</span> properties <span class="token operator">+</span> <span class="token string">", values="</span> <span class="token operator">+</span> values <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>重点看下面这个类，HandleBeansInfo：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HandleBeansInfo</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">HandleBeansInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* beansInfoMaps是来存储配置文件中列出的所有创建对象的信息；     * 每一个&lt;bean>标签对应一个BeanInfo 对象     */</span>   <span class="token keyword">public</span>  <span class="token keyword">static</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanInfo<span class="token operator">></span>  beansInfoMaps<span class="token operator">=</span>           <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*   * activebeansMaps是来存储容器已经创建好的对象，供外界调用；   */</span>   <span class="token keyword">public</span>  <span class="token keyword">static</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span>  activebeansMaps<span class="token operator">=</span>           <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              String path<span class="token operator">=</span>HandleBeansInfo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>                     <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               SAXBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               Document doc <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>                     <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">"com/hugeyurt/springcore/beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               Element foo <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到根节点  </span>             List allChildren <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>allChildren<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>               <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   Element  element<span class="token operator">=</span><span class="token punctuation">(</span>Element<span class="token punctuation">)</span>allChildren<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span>                 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                     BeanInfo bean<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BeanInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bean<span class="token punctuation">.</span><span class="token function">setClassName</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"scope"</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span>                       bean<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span><span class="token string">"scope"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">else</span> bean<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span><span class="token string">"single"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span>                        bean<span class="token punctuation">.</span><span class="token function">setObjectName</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">else</span>                        bean<span class="token punctuation">.</span><span class="token function">setObjectName</span><span class="token punctuation">(</span><span class="token function">getObjectName</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//检测是否需要给属性装配值</span>                    List subchild<span class="token operator">=</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span>element<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>subchild<span class="token operator">==</span>null<span class="token operator">||</span>subchild<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                      beansInfoMaps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getObjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">else</span>                   <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                       List<span class="token operator">&lt;</span>String<span class="token operator">></span> propertiesName<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       List<span class="token operator">&lt;</span>String<span class="token operator">></span> propertiesValue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>subchild<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>                       <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 这里处理 &lt;property></span>                           Element  element2<span class="token operator">=</span><span class="token punctuation">(</span>Element<span class="token punctuation">)</span>subchild<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                           String name<span class="token operator">=</span>element2<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           propertiesName<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                           String value<span class="token operator">=</span>element2<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token operator">!=</span>null<span class="token punctuation">)</span>                             propertiesValue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token keyword">else</span>                           <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                               String ref<span class="token operator">=</span>element2<span class="token punctuation">.</span><span class="token function">getAttributeValue</span><span class="token punctuation">(</span><span class="token string">"ref"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               propertiesValue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ref:"</span><span class="token operator">+</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                       bean<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>propertiesName<span class="token punctuation">)</span><span class="token punctuation">;</span>                       bean<span class="token punctuation">.</span><span class="token function">setValues</span><span class="token punctuation">(</span>propertiesValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                       beansInfoMaps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getObjectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>         <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//com.hugeyurt.Demo</span>   <span class="token comment" spellcheck="true">// return demo</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> String  <span class="token function">getObjectName</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> index<span class="token operator">=</span>className<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">char</span> result<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>className<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'Z'</span><span class="token operator">&amp;&amp;</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'A'</span><span class="token punctuation">)</span>          result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//String className="com.hugeyurt.hello";</span>    <span class="token comment" spellcheck="true">//  System.out.print(HandleBeansInfo.getObjectName(className));</span>      Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys<span class="token operator">=</span>HandleBeansInfo<span class="token punctuation">.</span>beansInfoMaps<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> keys<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> keys<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>HandleBeansInfo<span class="token punctuation">.</span>beansInfoMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        这个类的具体工作流程如下：</p><ol><li><p>首先定义两个静态HashMap，分别为beansInfoMaps，activebeansMaps。</p></li><li><p>静态代码块，当程序运行时该代码块就被加载到内存中。</p></li><li><p>解析XML配置文件，得到根节点Beans的子节点Bean，将Bean中的参数写到BeanInfo对象中。</p></li><li><p>构建完一个完整的BeanInfo对象后，将该对象放入beansInfoMaps中。</p></li><li><p>循环进行3，4两条操作，当所有Bean标签被读完后，结束工作。</p><p>​    </p><p>下面是SpringCore类，代码如下：</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringCore</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span>  <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>   <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       BeanInfo beanInfo<span class="token operator">=</span>HandleBeansInfo<span class="token punctuation">.</span>beansInfoMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>beanInfo<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>       Object object<span class="token operator">=</span>HandleBeansInfo<span class="token punctuation">.</span>activebeansMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//第一步：若对象已存在</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>object<span class="token operator">!=</span>null<span class="token punctuation">)</span>       <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>beanInfo<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"single"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> object<span class="token punctuation">;</span>           Object temp<span class="token operator">=</span><span class="token function">createObject</span><span class="token punctuation">(</span>beanInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>           HandleBeansInfo<span class="token punctuation">.</span>activebeansMaps<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> temp<span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       Object temp<span class="token operator">=</span><span class="token function">createObject</span><span class="token punctuation">(</span>beanInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>       HandleBeansInfo<span class="token punctuation">.</span>activebeansMaps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> temp<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> Object <span class="token function">createObject</span><span class="token punctuation">(</span>BeanInfo beanInfo<span class="token punctuation">)</span>   <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       String className<span class="token operator">=</span>beanInfo<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Object object<span class="token operator">=</span>null<span class="token punctuation">;</span>       <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          Class <span class="token class-name">clz</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>          object<span class="token operator">=</span>clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>String<span class="token operator">></span> propertiesName<span class="token operator">=</span>beanInfo<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>propertiesName<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> object<span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>propertiesName<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             String fieldName<span class="token operator">=</span>propertiesName<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//获取字节码世界中的属性对象</span>             Field field<span class="token operator">=</span>clz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>             field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             String value<span class="token operator">=</span>beanInfo<span class="token punctuation">.</span><span class="token function">getValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"ref"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//装配的是引用类型ref:mydao</span>                 String refObjectName<span class="token operator">=</span>value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 Object refObject<span class="token operator">=</span><span class="token function">getBean</span><span class="token punctuation">(</span>refObjectName<span class="token punctuation">)</span><span class="token punctuation">;</span>                 field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> refObject<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>             <span class="token keyword">else</span>             <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">||</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>Integer<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>Double<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">||</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>Double<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> Double<span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>Float<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">||</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>Float<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> Float<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>Boolean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">||</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>Boolean<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>       <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> object<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        首先来看第一个函数<code>public static Object getBean(String name)</code>，这个函数的作用是通过传入的name，在beansInfoMaps中得到相应的BeanInfo对象，并通过</p><p><code> private static Object createObject(BeanInfo beanInfo)</code>函数将BeanInfo对象转为Object对象，将该Object对象存入activebeansMaps中，返回这个对象供外界调用。</p><p>​        再来看看第二个函数<code> private static Object createObject(BeanInfo beanInfo)</code>，这个函数是怎么做到BeanInfo变成Object的呢？ 具体逻辑如下：</p><ol><li><p>通过BeanInfo中存储的全限定名，得到字节码对象，并实例化为一个空的Object对象。</p></li><li><p>通过字节码对象clz，将object中的属性，参数类型，传入参数值等一一对应，并写到object对象中。</p></li><li><p>返回出object对象。</p></li></ol><p>​      至此，SpringCore的工作全部结束。</p><h1 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h1><p>​        在手写这些底层代码之前，我觉得Spring的自动注入功能十分神奇。但是自己实现之后，发现逻辑其实十分简单，只是用到了xml解析，反射机制这些技术。</p><p>​        但是在实现这些功能时，有着很多需要注意的细节。例如：</p><ol><li><p>bean标签中没有指定name时，需要通过函数，根据默认规则给BeanInfo对象写入name。</p></li><li><p>bean标签中的属性有可能是ref引用，如果出现ref引用，则需要将其递归调用，再添加到object对象中。</p></li><li><p>在判断参数的类型时，要做到全面，如果缺一种类型就会有可能报错。</p></li></ol><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> spring框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 框架 </tag>
            
            <tag> 底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/2020/06/15/MySQL%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/06/15/MySQL%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>#　１、索引的语法</p><p>​        <strong>创建索引：</strong></p><ol><li>建表的时候添加索引</li></ol><p><img src="/2020/06/15/MySQL%E7%B4%A2%E5%BC%95/image-20200816094915661.png" alt="img1"></p><ol start="2"><li>建表之后添加索引</li></ol><p><img src="/2020/06/15/MySQL%E7%B4%A2%E5%BC%95/image-20200816094959891.png" alt="img2"></p><p>tips：</p><ul><li><p>索引需要占用磁盘空间，所以在创建索引时要考虑磁盘空间是否足够。</p></li><li><p>创建索引时要对表加锁，所以实际操作中需要在业务空闲期进行。</p></li></ul><p><img src="/2020/06/15/MySQL%E7%B4%A2%E5%BC%95/image-20200816095323082.png" alt="img3"></p><h1 id="2、索引的优缺点"><a href="#2、索引的优缺点" class="headerlink" title="2、索引的优缺点"></a>2、索引的优缺点</h1><p>​        优点：可以快速检索；根据索引分组和排序，可以快速分组和排序。</p><p>​        缺点：</p><ul><li><p>索引本身也是表，所以会占用存储空间。索引表是数据表的1.5倍。</p></li><li><p>索引表的维护和创建也需要时间。</p></li><li><p>构建索引表会降低数据表修改的效率，因为修改数据表的同时还要修改索引表。</p></li></ul><h1 id="3、索引的分类"><a href="#3、索引的分类" class="headerlink" title="3、索引的分类"></a>3、索引的分类</h1><p>​        <strong>主键索引、唯一索引、普通索引、全文索引、组合索引</strong></p><ol><li>主键索引：根据主键做索引，不允许重复，不允许空值。</li><li>唯一索引：用来建立索引的列的值必须是唯一的，允许空值。</li><li>普通索引：用表中的普通列来建索引，没有任何限制。</li><li>全文索引：用大文本对象的列构建的索引。</li><li>组合索引：用多个列组合成的索引，这些列都不能有空值。</li></ol><h1 id="4、索引的实现原理"><a href="#4、索引的实现原理" class="headerlink" title="4、索引的实现原理"></a>4、索引的实现原理</h1><p>​        MySQL支持的索引类型：<strong>哈希索引，全文索引，BTree索引，B+Tree索引</strong>。</p><ol><li><strong>哈希索引</strong></li></ol><p>​      只有memory（内存）存储引擎支持哈希索引。哈希索引用索引列的值计算该值的hashCode，然后在hashCode相应的位置存储该值所在行数据的物理位置。因为使用散列算法，所以访问速度非常快。但是一个值只能对应一个HashCode，而且是散列的分布方式，所以不支持范围查询和排序。</p><ol start="2"><li><strong>全文索引</strong></li></ol><p>​      可适用与MyISAM和InnoDB两种引擎。对于大对象或较大的CHAR型数据，普通索引会消耗很长的时间。使用全文索引，会对文本生成一份单词的清单，在索引时根据这个单词清单来完成索引。</p><ol start="3"><li><strong>BTree索引</strong></li></ol><p>​      BTree是平衡搜索多叉树。每个非叶子结点由n-1个key和n个指针组成，d(度)&lt;=n&lt;=2d，非叶子结点的key都是由[key，data]二元组，key表示作为索引的键，data为键值所在行的数据。</p><p><img src="/2020/06/15/MySQL%E7%B4%A2%E5%BC%95/blog\source_posts\MySQL索引\image-20200816102138915.png" alt="BTree"></p><p>​      在BTree的机构下，可以使用二分查找的查找方式，查找复杂度为h*log(n)，一般来说树的高度是很小的，一般为3左右，因此BTree是一种非常高效的查找结构。</p><ol start="4"><li><p><strong>B+Tree索引</strong></p><p>B+Tree是BTree的一个变种。</p></li></ol><p><img src="/2020/06/15/MySQL%E7%B4%A2%E5%BC%95/image-20200816102043025.png" alt="B+Tree"></p><p>Q/A：B+Tree对比BTree的优点？</p><ol><li><p>磁盘读写代价更低</p><p>​    因为提升查找速度的关键在于尽可能少的磁盘I/O，所以每个结点的key越多，树的高度越小，需要I/O的次数越少。因此B+Tree更快，因为B+Tree的非叶子结点不存储data，可以存储更多的key。</p></li><li><p>查询速度更稳定</p><p>​    因为B+Tree的非叶子结点不存储数据，所以所有的数据都在叶子结点中查询，所有数据的查询速度是一样的。</p></li></ol><ul><li><p><strong>带顺序索引的B+Tree</strong></p><p>​        很多存储引擎对B+Tree做了优化，添加了指向相邻叶结点的指针，形成了带有顺序访问指针的B+Tree，这样做是为了提高区间查询的效率，只要找到第一个值那么就可以顺序的查找后面的值。</p></li></ul><p>聚簇索引和非聚簇索引：</p><p>​        存储引擎是怎么实现索引结构的？</p><p>​        MySQL中最常见的两种引擎是MyISAM，InnoDB，分别实现了非聚簇索引和聚簇索引。</p><p>​        聚簇索引：聚簇索引的顺序就是数据的物理存储顺序。</p><p>​        非聚簇索引：索引顺序与数据物理排列顺序无关。</p><p>​        在索引的分类中，可以按照索引的键来分为“主索引”和“辅助索引”，使用主键键值建立的索引称为“主索引”，其他的称为“辅助索引”。因此主索引只有一个，辅助索引有很多个。</p><p><img src="/2020/06/15/MySQL%E7%B4%A2%E5%BC%95/image-20200817091830324.png" alt="MyISAM"></p><p><img src="/2020/06/15/MySQL%E7%B4%A2%E5%BC%95/image-20200817091903204.png" alt="InnoDB"></p><p><img src="/2020/06/15/MySQL%E7%B4%A2%E5%BC%95/image-20200817092141073.png" alt="比较"></p><p>​        聚簇索引的辅助索引的叶子节点的data存储的是主键的值，主索引的叶子节点的data 存储的是数据本身，也就是说数据和索引存储在一起，并且索引查询到的地方就是数据（data）本身，那么索引的顺序和数据本身的顺序就是相同的；</p><p>​        而非聚簇索引的主索引和辅助索引的叶子节点的data都是存储的数据的物理地址，也就是说索引和数据并不是存储在一起的，数据的顺序和索引的顺序并没有任何关系， 也就是索引顺序与数据物理排列顺序无关。</p><p><img src="/2020/06/15/MySQL%E7%B4%A2%E5%BC%95/image-20200817092519829.png" alt="两种引擎"></p><p>小结：</p><p>​        InnoDB支持事务，支持行级别锁定，支持B-tree、Full-text等索引，不支持hash索引。</p><p>​        MyISAM不支持事务，支持表级别锁定，支持B-tree、Full-text等索引，不支持hash索引。</p><p>​        Memory不支持事务，支持表级别锁定，支持B-tree、hash等索引，不支持full-text索引。</p><h1 id="5、索引的使用策略"><a href="#5、索引的使用策略" class="headerlink" title="5、索引的使用策略"></a>5、索引的使用策略</h1><p><strong>什么时候使用索引？</strong></p><ul><li>主键自动建立唯一索引；</li><li>经常作为查询条件在WHERE或者ORDER BY语句中出现的列要建立索引。</li><li>作为排序的列要建立索引。</li><li>查询中与其他表关联的字段，外键关系建立索引。</li><li>高并发下倾向组合索引。</li><li>用于聚合函数的列可以建立索引，例如使用了max(column_1)或count(column_1)就需建立索引。</li></ul><p><strong>什么时候不要使用索引？</strong></p><ul><li>经常增删改</li><li>有大量重复的列</li><li>表记录太少</li></ul><p><strong>索引失效的情况？</strong></p><ul><li><p>组合索引中不能有列的值为null，如果有，那么这一列对组合索引就是失效的。</p></li><li><p>在一个SELECT语句中，索引只能使用一个，如果在WHERE中使用了，那么ORDER BY就不能使用了。</p></li><li><p>LIKE操作中，“%aa%”会失效，“aa%”可以使用。</p></li><li><p>在索引的列上使用表达式或者函数会使索引失效。也就是说，在查询条件中使用正则表达式时，只有在搜索模版的第一个字符不是通配符的情况下才能使用索引。</p></li><li><p>查询条件下使用IS NULL，IS NOT NULL</p></li><li><p>字符串不加单引号会导致索引失效，更准确的说是类型不一致会导致失效。</p></li></ul><h1 id="6、索引的优化"><a href="#6、索引的优化" class="headerlink" title="6、索引的优化"></a>6、索引的优化</h1><p><img src="/2020/06/15/MySQL%E7%B4%A2%E5%BC%95/image-20200817094914574.png" alt="优化1"></p><p><img src="/2020/06/15/MySQL%E7%B4%A2%E5%BC%95/image-20200817094939243.png" alt="优化2"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springMVC</title>
      <link href="/2020/06/13/springMVC/"/>
      <url>/2020/06/13/springMVC/</url>
      
        <content type="html"><![CDATA[<h1 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h1><p>​        MVC是一种软件架构模式，它把软件系统分为三个部分：模型（Model）、View（视图）、Controller（控制器）。</p><p>​        优势：</p><ol><li>能够做到代码重用。</li><li>分层设计，利于维护和扩展。</li><li>可以更好的分工。</li></ol><hr><p>​        SpringMVC优势：</p><ol><li><p>天生与spring框架集成（Ioc，AOP）</p></li><li><p>支持灵活的url到页面控制器的映射。</p><p>等等。</p></li></ol><h1 id="2、实现逻辑"><a href="#2、实现逻辑" class="headerlink" title="2、实现逻辑"></a>2、实现逻辑</h1><p>​        当控制器接受到一次请求时，它会把得到的URL拿到handleMapping映射器去查找。</p><p>​        handleMapping中有两种映射方式。</p><p>​        第一种是beanNameMapping，一个url对应一个类的全限定名。如果请求来的url在这里找到了，那么就获得字节码，创建对象，通过接口回调技术调用doGet或者doPost方法。</p><p>​        第二种是annotationMethodMapping，一个url对应一个方法。根据全限定名得到字节码，然后创建对象。根据对象知道方法，如果方法无参数，就可以直接通过invoke动态调用方法。如果方法有参数，就需要先给参数装配值，然后动态调用该方法。调用完方法之后，需要看看如何处理数据，如果action是json，就返回json，基本类型就直接返回，jsp就返回jsp。</p>]]></content>
      
      
      <categories>
          
          <category> web项目 </category>
          
          <category> JAVA学习 </category>
          
          <category> spring框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 框架 </tag>
            
            <tag> JAVA </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring</title>
      <link href="/2020/06/12/spring/"/>
      <url>/2020/06/12/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Spring是什么？"><a href="#1、Spring是什么？" class="headerlink" title="1、Spring是什么？"></a>1、Spring是什么？</h1><ul><li>Spring 是分层的 Java SE/EE 应用 full-stack 轻量级开源框架</li><li>以 IoC（Inverse Of Control： 反转控制）和 AOP（Aspect Oriented  Programming：面向切面编程）为内核，提供了展现层 Spring MVC 和持久层 Spring JDBC  以及业务层事务管理等众多的企业级应用技术</li><li>还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE 企业应用开源框架</li></ul><h1 id="2、Spring的两大核心"><a href="#2、Spring的两大核心" class="headerlink" title="2、Spring的两大核心"></a>2、Spring的两大核心</h1><ul><li><p>IOC (反转控制)</p></li><li><p>AOP (面向切面编程)</p></li></ul><h1 id="3、Spring的优势"><a href="#3、Spring的优势" class="headerlink" title="3、Spring的优势"></a>3、Spring的优势</h1><ol><li><strong>方便解耦，简化开发</strong>    </li></ol><p>​        通过 Spring 提供的 IoC 容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可 以更专注于上层的应用。</p><ol start="2"><li><strong>AOP编程的支持</strong></li></ol><p>​        通过 Spring 的 AOP 功能，方便进行面向切面的编程，许多不容易用传统 OOP 实现的功能可以通过 AOP 轻松应付。</p><ol start="3"><li><strong>声明式事务的支持</strong></li></ol><p>​        可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理， 提高开发效率和质量。</p><ol start="4"><li><strong>方便程序的测试</strong>  </li></ol><p>​        可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</p><ol start="5"><li><strong>方便集成各种优秀框架</strong></li></ol><p>​        Spring 可以降低各种框架的使用难度，提供了对各种优秀框架（Struts、Hibernate、Hessian、Quartz 等）的直接支持。</p><ol start="6"><li><strong>降低 JavaEE API 的使用难度</strong></li></ol><p>​        Spring 对 JavaEE API（如 JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些 API 的 使用难度大为降低。</p><ol start="7"><li><strong>Java 源码是经典学习范例</strong></li></ol><p>​        Spring 的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对 Java 设计模式灵活运用以 及对 Java 技术的高深造诣。它的源代码无意是 Java 技术的最佳实践的范例。</p><h1 id="4、Spring的体系结构"><a href="#4、Spring的体系结构" class="headerlink" title="4、Spring的体系结构"></a>4、Spring的体系结构</h1><p><img src="/2020/06/12/spring/image-20200802183718972.png" alt="spring体系结构"></p>]]></content>
      
      
      <categories>
          
          <category> spring框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xml解析</title>
      <link href="/2020/05/23/xml%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/05/23/xml%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="1、XML概念"><a href="#1、XML概念" class="headerlink" title="1、XML概念"></a>1、XML概念</h1><p>一个完整的XML文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>George<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Don't forget the meeting!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span></code></pre><ul><li><strong>xml概念</strong>：</li></ul><ol><li><p>XML指可扩展标记语言（Extensible Markup Language）； </p></li><li><p>XML是一种标记语言，很类似HTML； </p></li><li><p>XML的设计宗旨是传输数据，而非显示数据； </p></li><li><p>XML标签没有被预定义，您需要自行定义标签； </p></li><li><p>XML被设计为具有自我描述性； </p></li><li><p>XML是W3C的推荐标准</p></li></ol><ul><li><strong>xml特点：</strong></li></ul><ol><li><p>XML是SGML的简化版本 </p></li><li><p>XML提示了数据本身的意义 </p></li><li><p>XML是可扩展的 </p></li><li><p>XML是跨平台的 </p></li><li><p>XML是结构化的 </p></li><li><p>XML是基于文本的 </p></li><li><p>XML的数据与其显示格式是分离的 </p></li><li><p>XML文档比HTML文档更容易访问</p></li><li><p>XML是一种树形存储结构</p></li></ol><ul><li><strong>xml与HTML的差异：</strong></li></ul><p>XML不是HTML的替代。XML和HTML为不同的目的而设计： </p><ol><li><p>XML被设计为传输和存储数据，其焦点是数据的内容； </p></li><li><p>HTML被设计用来显示数据，其焦点是数据的外观； </p></li><li><p>HTML旨在显示信息，而XML旨在传输信息。 </p></li><li><p>HTML是一个大小写不敏感的，XML是大小写敏感的。 </p></li><li><p>HTML有着固定的显示标准，XML显示是依赖应用灵活定义</p></li></ol><ul><li><strong>xml应用场景</strong></li></ul><ol><li><p>作为系统或应用的配置文件使用，如tomcat中的web.xml </p></li><li><p>作为应用程序的数据存储文件或日志存储文件 </p></li><li><p>数据库的功能之一，支持XML存储 </p></li><li><p>WebService协议用语言，soap协议 </p></li><li><p>IM通信协议标准，如XMPP协议 </p></li><li><p>部分矢量图像存储格式，如果SVG图片 </p></li><li><p>部分流媒体协议，如果CML </p></li></ol><h1 id="2、XML语法"><a href="#2、XML语法" class="headerlink" title="2、XML语法"></a>2、XML语法</h1><ol><li><p><strong>所有XML元素都须有关闭标签 ，而不像部分的HTML标签</strong></p></li><li><p><strong>声明语句也可以不要</strong></p></li><li><p><strong>XML 标签对大小写敏感</strong></p></li><li><p><strong>必须正确嵌套</strong></p></li><li><p><strong>文档必须有根元素</strong></p></li><li><p><strong>属性值须加引号</strong></p></li><li><p><strong>转义字符</strong></p></li><li><p><strong>PCDATA</strong> <strong>是会被解析器解析的文本。这些文本将被解析器检查实体以及标记</strong></p></li><li><p><strong>CDATA</strong> <strong>是不会被解析器解析的文本</strong></p></li><li><p><strong>元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。</strong></p></li></ol><h1 id="3、XML解析方式"><a href="#3、XML解析方式" class="headerlink" title="3、XML解析方式"></a>3、XML解析方式</h1><p>两种方式：SAX,DOM</p><p><img src="/2020/05/23/xml%E8%A7%A3%E6%9E%90/image-20200801192417221.png" alt="SAX VS DOM"></p><p>SAX适于处理下面的问题： </p><ul><li>对大型文档进行处理。 </li><li>只需要文档的部分内容，或者只需要从文档中得到特定信息。 </li><li>想创建自己的对象模型的时候。 </li></ul><p>DOM适于处理下面的问题： </p><ul><li><p>需要对文档进行修改 </p></li><li><p>需要随机对文档进行访问，例如XSLT解析器。 </p></li><li><p>需要校验XML的合法性，完整性</p></li></ul><h1 id="4、Java解析XML"><a href="#4、Java解析XML" class="headerlink" title="4、Java解析XML"></a>4、Java解析XML</h1><ol><li><strong>DOM解析器</strong></li></ol><p>​        由W3C提供的接口，它将整个XML文档读入内存，构建一个DOM树来对各个节点(Node)进行操作。（参见代码） </p><ol start="2"><li><strong>SAX解析器</strong></li></ol><p>​        SAX不用将整个文档加载到内存，基于事件驱动的API(Observer模式)，用户只需要注册自己感兴趣的事件即可。SAX提供EntityResolver, DTDHandler, ContentHandler, ErrorHandler接口，分别用于监听解析实体 事件、DTD处理事件、正文处理事件和处理出错事件，与AWT类似， SAX还提供了一个对这4个接口默认的类DefaultHandler（这里的默认实 现，其实就是一个空方法），一般只要继承DefaultHandler，重写自己感兴趣的事件即可。 </p><ol start="3"><li><strong>JDOM解析器</strong></li></ol><p>​        JDOM与DOM非常类似，它是处理XML的纯JAVA API，API大量使用了Collections类，且JDOM仅使用具体类而不使用接口。 JDOM 它自身不包含解析器。它通常使用 SAX2 解析器来解析和验证输入 XML 文档 （尽管它还可以将以前构造的 DOM 表示作为输入）。它包含一些转换器以将 JDOM 表示输出成 SAX2 事件流、DOM 模型或 XML 文本文档  </p><ol start="4"><li><strong>DOM4J解析器</strong> </li></ol><p>​        DOM4J是目前在xml解析方面是最优秀的(Hibernate、Sun的 JAXM也都使用dom4j来解析XML)，它合并了许多超出基本 XML 文档表示的功能，包括集成的 XPath 支持、XML Schema 支持以及用于大文档或流化文档的基于事件的处理。</p><h1 id="5、JDOM，DOM4J解析实例"><a href="#5、JDOM，DOM4J解析实例" class="headerlink" title="5、JDOM，DOM4J解析实例"></a>5、JDOM，DOM4J解析实例</h1><h2 id="5-1-JDOM"><a href="#5-1-JDOM" class="headerlink" title="5.1 JDOM"></a>5.1 JDOM</h2><p>被解析的xml文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>database</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/studentinfo?characterEncoding=UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pwd</span><span class="token punctuation">></span></span>123123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pwd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>driver</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>driver</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>database</span><span class="token punctuation">></span></span></code></pre><p>JDOM解析：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDOM</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> lasting <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String path<span class="token operator">=</span>DOM4Java<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SAXBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Document doc <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">"database.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获得xml文件的位置</span>       Element foo <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到根节点  </span>      List allChildren <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>allChildren<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//遍历子节点</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Element<span class="token punctuation">)</span>allChildren<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lasting<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出：</p><p><img src="/2020/05/23/xml%E8%A7%A3%E6%9E%90/image-20200801194346071.png" alt="JDOM解析"></p><h2 id="5-2-DOM4J"><a href="#5-2-DOM4J" class="headerlink" title="5.2 DOM4J"></a>5.2 DOM4J</h2><p>xml文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Result</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VALUE</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NO</span> <span class="token attr-name">DATE</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2005<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NO</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ADDR</span><span class="token punctuation">></span></span>GZ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ADDR</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VALUE</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>VALUE</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NO</span> <span class="token attr-name">DATE</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2004<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NO</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ADDR</span><span class="token punctuation">></span></span>XG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ADDR</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>VALUE</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NO</span> <span class="token attr-name">DATE</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2014<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NO</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ADDR</span><span class="token punctuation">></span></span>XGgggg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ADDR</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Result</span><span class="token punctuation">></span></span></code></pre><p>DOM4J:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DOM4Java</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>   <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> lasting <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           String path<span class="token operator">=</span>DOM4Java<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获得绝对路径</span>         File f<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">"demo.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          SAXReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Document doc <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>          Element root <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//得到根节点</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Iterator it <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">elementIterator</span><span class="token punctuation">(</span><span class="token string">"VALUE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//迭代器，获取root下所有value 子标签</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              Element foo <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//得到value</span>             Element subfoo<span class="token operator">=</span>foo<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取value 下NO 子标签</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"车牌号码:"</span> <span class="token operator">+</span> foo<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 属性："</span>             <span class="token operator">+</span>subfoo<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"DATE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"车主地址:"</span> <span class="token operator">+</span> foo<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"ADDR"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Element e<span class="token operator">=</span>root<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"note"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">elementText</span><span class="token punctuation">(</span><span class="token string">"ADDR"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Element sube <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sube<span class="token punctuation">.</span><span class="token function">attributeValue</span><span class="token punctuation">(</span><span class="token string">"DATE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>          <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lasting<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出：</p><p><img src="/2020/05/23/xml%E8%A7%A3%E6%9E%90/image-20200801194458135.png" alt="DOM4J解析"></p>]]></content>
      
      
      <categories>
          
          <category> XML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络重点知识</title>
      <link href="/2019/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h1><p>​        计算机网络学习的核心内容就是网络协议的学习。网络协议是为计算机网络中进行数据交换而建立的规则、标准或者说是约定的集合。因为不同用户的数据终端可能采取的字符集是不同的，两者需要进行通信，必须要在一定的标准上进行。一个很形象地比喻就是我们的语言，我们大天朝地广人多，地方性语言也非常丰富，而且方言之间差距巨大。A地区的方言可能B地区的人根本无法接受，所以我们要为全国人名进行沟通建立一个语言标准，这就是我们的普通话的作用。同样，放眼全球，我们与外国友人沟通的标准语言是英语，所以我们才要苦逼的学习英语。</p><p>​        计算机网络协议同我们的语言一样，多种多样。而ARPA公司与1977年到1979年推出了一种名为ARPANET的网络协议受到了广泛的热捧，其中最主要的原因就是它推出了人尽皆知的TCP/IP标准网络协议。目前TCP/IP协议已经成为Internet中的”通用语言”，下图为不同计算机群之间利用TCP/IP进行通信的示意图。</p><p><img src="/2019/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/image-20200801153138493.png" alt="TCP/IP通信示意图"></p><h1 id="2、网络层次划分"><a href="#2、网络层次划分" class="headerlink" title="2、网络层次划分"></a>2、网络层次划分</h1><p>​        <strong>为了使不同计算机厂家生产的计算机能够相互通信，以便在更大的范围内建立计算机网络</strong>，国际标准化组织(ISO)在1978年提出了”开放系统互联参考模型”，即著名的OSI/RM模型(Open System Interconnection/Reference  Model)。它将计算机网络体系结构的通信协议划分为七层，自下而上依次为：物理层（Physics Layer）、数据链路层（Data Link  Layer）、网络层（Network Layer）、传输层（Transport Layer）、会话层（Session  Layer）、表示层（Presentation Layer）、应用层（Application  Layer）。其中第四层完成数据传送服务，上面三层面向用户。</p><p>​        除了标准的OSI七层模型以外，常见的网络层次划分还有TCP/IP四层协议以及TCP/IP五层协议，它们之间的对应关系如下图所示：</p><p><img src="/2019/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/image-20200801155800298.png" alt="三种协议模型"></p><h1 id="3、OSI七层网络模型"><a href="#3、OSI七层网络模型" class="headerlink" title="3、OSI七层网络模型"></a>3、OSI七层网络模型</h1><p>​        TCP/IP协议毫无疑问是互联网的基础协议，没有它就根本不可能上网，任何和互联网有关的操作都离不开TCP/IP协议。不管是OSI七层模型还是TCP/IP的四层、五层模型，每一层中都要自己的专属协议，完成自己相应的工作以及与上下层级之间进行沟通。由于OSI七层模型为网络的标准层次划分，所以我们以OSI七层模型为例从下向上进行一一介绍。</p><p><img src="/2019/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/image-20200801160142103.png" alt="具体协议"></p><p><strong>（1）物理层（Physical Layer）</strong></p><p>​        激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性。<strong>该层为上层协议提供了一个传输数据的可靠的物理媒体。简单的说，物理层确保原始的数据可在各种物理媒体上传输。</strong>物理层记住两个重要的设备名称，中继器（Repeater，也叫放大器）和集线器。</p><p><strong>（2）数据链路层（Data Link Layer）</strong></p><p>​        数据链路层在物理层提供的服务的基础上向网络层提供服务，其最基本的服务是<strong>将源自网络层来的数据可靠地传输到相邻节点的目标机网络层</strong>。为达到这一目的，数据链路必须具备一系列相应的功能，主要有：如何将数据组合成数据块，在数据链路层中称这种数据块为帧（frame），<strong>帧是数据链路层的传送单位</strong>；如何控制帧在物理信道上的传输，包括如何处理传输差错，如何调节发送速率以使与接收方相匹配；以及在两个网络实体之间提供数据链路通路的建立、维持和释放的管理。数据链路层在不可靠的物理介质上提供可靠的传输。该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。</p><p>有关数据链路层的重要知识点：</p><ul><li><strong>1&gt; 数据链路层为网络层提供可靠的数据传输；</strong></li><li><strong>2&gt; 基本数据单位为帧；</strong></li><li><strong>3&gt; 主要的协议：以太网协议；</strong></li><li><strong>4&gt; 两个重要设备名称：网桥和交换机。</strong></li></ul><p><strong>（3）网络层（Network Layer）</strong></p><p>​        网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。它提供的服务使传输层不需要了解网络中的数据传输和交换技术。如果您想用尽量少的词来记住网络层，那就是”<strong>路径选择、路由及逻辑寻址</strong>“。</p><p>​        网络层中涉及众多的协议，其中包括最重要的协议，也是TCP/IP的核心协议——IP协议。IP协议非常简单，仅仅提供不可靠、无连接的传送服务。IP协议的主要功能有：无连接数据报传输、数据报路由选择和差错控制。与IP协议配套使用实现其功能的还有地址解析协议ARP、逆地址解析协议RARP、因特网报文协议ICMP、因特网组管理协议IGMP。具体的协议我们会在接下来的部分进行总结，有关网络层的重点为：</p><ul><li><strong>1&gt; 网络层负责对子网间的数据包进行路由选择。此外，网络层还可以实现拥塞控制、网际互连等功能；</strong></li><li><strong>2&gt; 基本数据单位为IP数据报；</strong></li><li><strong>3&gt; 包含的主要协议：</strong></li><li>　　<strong>IP协议（Internet Protocol，因特网互联协议）;</strong></li><li>　　<strong>ICMP协议（Internet Control Message Protocol，因特网控制报文协议）;</strong></li><li>　　<strong>ARP协议（Address Resolution Protocol，地址解析协议）;</strong></li><li>　　<strong>RARP协议（Reverse Address Resolution Protocol，逆地址解析协议）。</strong></li><li><strong>4&gt; 重要的设备：路由器。</strong></li></ul><p><strong>（4）传输层（Transport Layer）</strong></p><p>​        第一个端到端，即主机到主机的层次。传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输。此外，传输层还要处理端到端的差错控制和流量控制问题。 传输层的任务是根据通信子网的特性，最佳的利用网络资源，为两个端系统的会话层之间，提供建立、维护和取消传输连接的功能，负责端到端的可靠数据传输。在这一层，信息传送的协议数据单元称为段或报文。 网络层只是根据网络地址将源结点发出的数据包传送到目的结点，而传输层则负责将数据可靠地传送到相应的端口。 有关网络层的重点：</p><ul><li><strong>1&gt; 传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输以及端到端的差错控制和流量控制问题；</strong></li><li><strong>2&gt; 包含的主要协议：TCP协议（Transmission Control Protocol，传输控制协议）、UDP协议（User Datagram Protocol，用户数据报协议）；</strong></li><li><strong>3&gt; 重要设备：网关。</strong></li></ul><p><strong>（5）会话层</strong></p><p>​        会话层管理主机之间的会话进程，即负责建立、管理、终止进程之间的会话。会话层还利用在数据中插入校验点来实现数据的同步。</p><p><strong>（6）表示层</strong></p><p>​        表示层对上层数据或信息进行变换以保证一个主机应用层信息可以被另一个主机的应用程序理解。表示层的数据转换包括数据的加密、压缩、格式转换等。</p><p><strong>（7）应用层</strong></p><p>​        为操作系统或网络应用程序提供访问网络服务的接口。</p><p>会话层、表示层和应用层重点：</p><ul><li><strong>1&gt; 数据传输基本单位为报文；</strong></li><li><strong>2&gt; 包含的主要协议：FTP（文件传送协议）、Telnet（远程登录协议）、DNS（域名解析协议）、SMTP（邮件传送协议），POP3协议（邮局协议），HTTP协议（Hyper Text Transfer Protocol）。</strong></li></ul><p><img src="/2019/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/image-20200801171812302.png" alt="MIME和SMTP的区别"></p><p><img src="/2019/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/image-20200801171356073.png" alt="图1"></p><h1 id="4、IP地址"><a href="#4、IP地址" class="headerlink" title="4、IP地址"></a>4、IP地址</h1><p><strong>（1）网络地址</strong></p><p>​        IP地址由网络号（包括子网号）和主机号组成，网络地址的主机号为全0，网络地址代表着整个网络。</p><p><strong>（2）广播地址</strong></p><p>​        广播地址通常称为直接广播地址，是为了区分受限广播地址。</p><p>​        广播地址与网络地址的主机号正好相反，广播地址中，主机号为全1。当向某个网络的广播地址发送消息时，该网络内的所有主机都能收到该广播消息。</p><p><strong>（3）组播地址</strong></p><p>D类地址就是组播地址。</p><p>先回忆下A，B，C，D类地址吧：</p><p>A类地址以0开头，第一个字节作为网络号，地址范围为：0.0.0.0~127.255.255.255；</p><p>B类地址以10开头，前两个字节作为网络号，地址范围是：128.0.0.0~191.255.255.255;</p><p>C类地址以110开头，前三个字节作为网络号，地址范围是：192.0.0.0~223.255.255.255。</p><p>D类地址以1110开头，地址范围是224.0.0.0~239.255.255.255，D类地址作为组播地址（一对多的通信）；</p><p>E类地址以1111开头，地址范围是240.0.0.0~255.255.255.255，E类地址为保留地址，供以后使用。</p><p>注：只有A,B,C有网络号和主机号之分，D类地址和E类地址没有划分网络号和主机号。</p><p><strong>（4）255.255.255.255</strong></p><p>​        该IP地址指的是受限的广播地址。受限广播地址与一般广播地址（直接广播地址）的区别在于，受限广播地址只能用于本地网络，路由器不会转发以受限广播地址为目的地址的分组；一般广播地址既可在本地广播，也可跨网段广播。例如：主机192.168.1.1/30上的直接广播数据包后，另外一个网段192.168.1.5/30也能收到该数据报；若发送受限广播数据报，则不能收到。</p><p>​        注：一般的广播地址（直接广播地址）能够通过某些路由器（当然不是所有的路由器），而受限的广播地址不能通过路由器。</p><p><strong>（5）0.0.0.0</strong></p><p>​        常用于寻找自己的IP地址，例如在我们的RARP，BOOTP和DHCP协议中，若某个未知IP地址的无盘机想要知道自己的IP地址，它就以255.255.255.255为目的地址，向本地范围（具体而言是被各个路由器屏蔽的范围内）的服务器发送IP请求分组。</p><p><strong>（6）回环地址</strong></p><p>​        127.0.0.0/8被用作回环地址，回环地址表示本机的地址，常用于对本机的测试，用的最多的是127.0.0.1。</p><p><strong>（7）A、B、C类私有地址</strong></p><p>私有地址(private address)也叫专用地址，它们不会在全球使用，只具有本地意义。</p><p>A类私有地址：10.0.0.0/8，范围是：10.0.0.0~10.255.255.255</p><p>B类私有地址：172.16.0.0/12，范围是：172.16.0.0~172.31.255.255</p><p>C类私有地址：192.168.0.0/16，范围是：192.168.0.0~192.168.255.255</p><h1 id="5、ARP-RARP协议"><a href="#5、ARP-RARP协议" class="headerlink" title="5、ARP/RARP协议"></a>5、ARP/RARP协议</h1><p>​        <strong>地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。</strong>主机发送信息时将包含目标IP地址的ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。地址解析协议是建立在网络中各个主机互相信任的基础上的，网络上的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；由此攻击者就可以向某一主机发送伪ARP应答报文，使其发送的信息无法到达预期的主机或到达错误的主机，这就构成了一个ARP欺骗。<strong>ARP命令可用于查询本机ARP缓存中IP地址和MAC地址的对应关系、添加或删除静态对应关系等。</strong></p><p>ARP工作流程举例： </p><p>主机A的IP地址为192.168.1.1，MAC地址为0A-11-22-33-44-01；</p><p>主机B的IP地址为192.168.1.2，MAC地址为0A-11-22-33-44-02；</p><p>​        当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程：</p><ul><li>（1）根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。</li><li>（2）如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。</li><li>（3）主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。</li><li>（4）主机B将包含其MAC地址的ARP回复消息直接发送回主机A。</li><li>（5）当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。</li></ul><p><strong>逆地址解析协议，即RARP，功能和ARP协议相对，其将局域网中某个主机的物理地址转换为IP地址</strong>，比如局域网中有一台主机只知道物理地址而不知道IP地址，那么可以通过RARP协议发出征求自身IP地址的广播请求，然后由RARP服务器负责回答。</p><p>RARP协议工作流程：</p><ul><li>（1）给主机发送一个本地的RARP广播，在此广播包中，声明自己的MAC地址并且请求任何收到此请求的RARP服务器分配一个IP地址；</li><li>（2）本地网段上的RARP服务器收到此请求后，检查其RARP列表，查找该MAC地址对应的IP地址；</li><li>（3）如果存在，RARP服务器就给源主机发送一个响应数据包并将此IP地址提供给对方主机使用；</li><li>（4）如果不存在，RARP服务器对此不做任何的响应；</li></ul><h1 id="6、路由选择协议"><a href="#6、路由选择协议" class="headerlink" title="6、路由选择协议"></a>6、路由选择协议</h1><p>常见的路由选择协议有：RIP协议、OSPF协议。</p><p><strong>RIP协议</strong> ：底层是贝尔曼福特算法，它选择路由的度量标准（metric)是跳数，最大跳数是15跳，如果大于15跳，它就会丢弃数据包。</p><p><strong>OSPF协议</strong> ：Open Shortest Path First开放式最短路径优先，底层是迪杰斯特拉算法，是链路状态路由选择协议，它选择路由的度量标准是带宽，延迟。</p><h1 id="7、TCP-IP协议"><a href="#7、TCP-IP协议" class="headerlink" title="7、TCP/IP协议"></a>7、TCP/IP协议</h1><p>​        <strong>TCP/IP协议是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。通俗而言：TCP负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台联网设备规定一个地址。</strong></p><p>​        IP层接收由更低层（网络接口层例如以太网设备驱动程序）发来的数据包，并把该数据包发送到更高层—TCP或UDP层；相反，IP层也把从TCP或UDP层接收来的数据包传送到更低层。IP数据包是不可靠的，因为IP并没有做任何事情来确认数据包是否按顺序发送的或者有没有被破坏，IP数据包中含有发送它的主机的地址（源地址）和接收它的主机的地址（目的地址）。</p><p>​        TCP是面向连接的通信协议，通过三次握手建立连接，通讯完成时要拆除连接，由于TCP是面向连接的所以只能用于端到端的通讯。TCP提供的是一种可靠的数据流服务，采用”带重传的肯定确认”技术来实现传输的可靠性。TCP还采用一种称为”滑动窗口”的方式进行流量控制，所谓窗口实际表示接收能力，用以限制发送方的发送速度。</p><p><img src="/2019/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/image-20200801163038831.png" alt="TCP报文段的首部格式"></p><p>TCP运输连接的三个阶段：</p><p><img src="/2019/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/image-20200801171523311.png" alt="TCP运输连接的三个阶段"></p><p>TCP协议的三次握手和四次挥手：</p><p><img src="/2019/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/image-20200801163601333.png" alt="三次握手"></p><p><img src="/2019/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/image-20200801163632070.png" alt="四次挥手"></p><p><img src="/2019/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/image-20200801163707079.png" alt="代号"></p><p>​        <strong>TCP连接建立过程：</strong>首先Client端发送连接请求报文，Server段接受连接后回复ACK报文，并为这次连接分配资源。Client端接收到ACK报文后也向Server段发生ACK报文，并分配资源，这样TCP连接就建立了。</p><p>​        <strong>TCP连接断开过程：</strong>假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说”我Client端没有数据要发给你了”，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，”告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息”。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，”告诉Client端，好了，我这边数据发完了，准备好关闭连接了”。Client端收到FIN报文后，”就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。”，Server端收到ACK后，”就知道可以断开连接了”。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</p><p><img src="/2019/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/image-20200909204252851.png" alt="四次挥手"></p><p>​        <strong>为什么要三次握手？</strong></p><p>​        在只有两次”握手”的情形下，假设Client想跟Server建立连接，但是却因为中途连接请求的数据报丢失了，故Client端不得不重新发送一遍；这个时候Server端仅收到一个连接请求，因此可以正常的建立连接。但是，有时候Client端重新发送请求不是因为数据报丢失了，而是有可能数据传输过程因为网络并发量很大在某结点被阻塞了，这种情形下Server端将先后收到2次请求，并持续等待两个Client请求向他发送数据…问题就在这里，Cient端实际上只有一次请求，而Server端却有2个响应，极端的情况可能由于Client端多次重新发送请求数据而导致Server端最后建立了N多个响应在等待，因而造成极大的资源浪费！所以，”三次握手”很有必要！</p><ul><li><p>首要原因是防止旧的重复连接造成初始化混乱。</p></li><li><p>同步双方初始化序列号。（四次握手也可以，但是可以简化为3次握手）</p></li><li><p>避免资源浪费  客户端发送的SYN被阻塞，收不到ACK，就又会发出SYN，造成资源浪费。</p><p>​    <strong>SYN FLOOD？</strong></p><p>​    是发生在三次握手期间的攻击。用户向服务器发送SYN后，服务器要返回SYN+ACK，但是如果用户下线，那么服务器就无法收到ACK，就会一直维持这个连接一段时间。如果有大量这样的操作，服务器的CPU就会被占满，导致崩溃。</p><p>​    设置断开这种半连接的时间。</p></li></ul><p>​        <strong>为什么要四次挥手？</strong></p><p>​        主动关闭连接的，才有TIME_WAIT状态。</p><p>​        TIME_WAIT的时间是2MSL，Linux系统中固定为60s。</p><p>​        试想一下，假如现在你是客户端你想断开跟Server的所有连接该怎么做？第一步，你自己先停止向Server端发送数据，并等待Server的回复。但事情还没有完，虽然你自身不往Server发送数据了，但是因为你们之前已经建立好平等的连接了，所以此时他也有主动权向你发送数据；故Server端还得终止主动向你发送数据，并等待你的确认。其实，说白了就是保证双方的一个合约的完整执行！</p><p>​        使用TCP的协议：FTP（文件传输协议）、Telnet（远程登录协议）、SMTP（简单邮件传输协议）、POP3（和SMTP相对，用于接收邮件）、HTTP协议等。</p><p>​        <strong>为什么需要TIME_WAIT?</strong></p><p>​        保证双方都可以安全的断开连接，并且不会造成数据丢失。</p><h1 id="8、UDP协议"><a href="#8、UDP协议" class="headerlink" title="8、UDP协议"></a>8、UDP协议</h1><p>​        <strong>UDP用户数据报协议，是面向无连接的通讯协议，UDP数据包括目的端口号和源端口号信息，由于通讯不需要连接，所以可以实现广播发送。</strong></p><p>​        UDP通讯时不需要接收方确认，属于不可靠的传输，可能会出现丢包现象，实际应用中要求程序员编程验证。</p><p>​        UDP与TCP位于同一层，但它不管数据包的顺序、错误或重发。因此，UDP不被应用于那些使用虚电路的面向连接的服务，UDP主要用于那些面向查询—应答的服务，例如NFS。相对于FTP或Telnet，这些服务需要交换的信息量较小。</p><p>​        每个UDP报文分UDP报头和UDP数据区两部分。报头由四个16位长（2字节）字段组成，分别说明该报文的源端口、目的端口、报文长度以及校验值。UDP报头由4个域组成，其中每个域各占用2个字节，具体如下：</p><ul><li><p>（1）源端口号；</p></li><li><p>（2）目标端口号；</p></li><li><p>（3）数据报长度；</p></li><li><p>（4）校验值。</p><p>​    使用UDP协议包括：TFTP（简单文件传输协议）、SNMP（简单网络管理协议）、DNS（域名解析协议）、NFS、BOOTP。</p></li></ul><p><strong>TCP</strong> <strong>与</strong> <strong>UDP</strong> <strong>的区别：</strong>TCP是面向连接的，可靠的字节流服务；UDP是面向无连接的，不可靠的数据报服务。</p><p><img src="/2019/12/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/image-20200801164734119.png" alt="TCP和UDP的区别"></p><h1 id="9、DNS协议"><a href="#9、DNS协议" class="headerlink" title="9、DNS协议"></a>9、DNS协议</h1><p>​        DNS是域名系统(DomainNameSystem)的缩写，该系统用于命名组织到域层次结构中的计算机和网络服务，<strong>可以简单地理解为将URL转换为IP地址</strong>。域名是由圆点分开一串单词或缩写组成的，每一个域名都对应一个惟一的IP地址，在Internet上域名与IP地址之间是一一对应的，DNS就是进行域名解析的服务器。DNS命名用于Internet等TCP/IP网络中，通过用户友好的名称查找计算机和服务。</p><h1 id="10、NAT协议"><a href="#10、NAT协议" class="headerlink" title="10、NAT协议"></a>10、NAT协议</h1><p>​        　NAT网络地址转换(Network Address  Translation)属接入广域网(WAN)技术，是一种将私有（保留）地址转化为合法IP地址的转换技术，它被广泛应用于各种类型Internet接入方式和各种类型的网络中。原因很简单，NAT不仅完美地解决了lP地址不足的问题，而且还能够有效地避免来自网络外部的攻击，隐藏并保护网络内部的计算机。</p><h1 id="11、DHCP协议"><a href="#11、DHCP协议" class="headerlink" title="11、DHCP协议"></a>11、DHCP协议</h1><p>​        DHCP动态主机设置协议（Dynamic Host Configuration  Protocol）是一个局域网的网络协议，使用UDP协议工作，主要有两个用途：给内部网络或网络服务供应商自动分配IP地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。</p><h1 id="12、HTTP协议"><a href="#12、HTTP协议" class="headerlink" title="12、HTTP协议"></a>12、HTTP协议</h1><p>​        超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的WWW文件都必须遵守这个标准。　</p><p>　<strong>HTTP</strong> <strong>协议包括哪些请求？</strong></p><p>GET：请求读取由URL所标志的信息。</p><p>POST：给服务器添加信息（如注释）。</p><p>PUT：在给定的URL下存储一个文档。</p><p>DELETE：删除给定的URL所标志的资源。</p><p>　　<strong>HTTP</strong> <strong>中，</strong> <strong>POST</strong> <strong>与</strong> <strong>GET</strong> <strong>的区别</strong></p><ul><li><p>1）Get是从服务器上获取数据，Post是向服务器传送数据。</p></li><li><p>2）Get是把参数数据队列加到提交表单的Action属性所指向的URL中，值和表单内各个字段一一对应，在URL中可以看到。</p></li><li><p>3）Get传送的数据量小，不能大于2KB；Post传送的数据量较大，一般被默认为不受限制。</p></li><li><p>4）根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。</p></li><li><p>I. 所谓 <strong>安全的</strong> 意味着该操作用于获取信息而非修改信息。换句话说，GET请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p></li><li><p>II. <strong>幂等</strong> 的意味着对同一URL的多个请求应该返回同样的结果。</p></li></ul><h1 id="13、一些细节"><a href="#13、一些细节" class="headerlink" title="13、一些细节"></a>13、一些细节</h1><h2 id="13-1-拥塞控制和流量控制"><a href="#13-1-拥塞控制和流量控制" class="headerlink" title="13.1 拥塞控制和流量控制"></a>13.1 拥塞控制和流量控制</h2><p>流量控制：如果发送方把数据发送得过快，接收方可能会来不及接收，这就会造成数据的丢失。</p><p>​        TCP的流量控制是利用滑动窗口机制实现的，接收方在返回的数据中会包含自己的接收窗口的大小，以控制发送方的数据发送。</p><p>拥塞控制：拥塞控制就是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。</p><p>​        实现方法： 慢开始、拥塞避免、快重传和快恢复。发送端的发送数据量减少，路由器转发量增大。</p><p>​        两者的区别：流量控制是为了预防拥塞。如：在马路上行车，交警跟红绿灯是流量控制，当发生拥塞时，如何进行疏散，是拥塞控制。流量控制指点对点通信量的控制。而拥塞控制是全局性的，涉及到所有的主机和降低网络性能的因素。</p><h2 id="13-2-粘包，拆包问题"><a href="#13-2-粘包，拆包问题" class="headerlink" title="13.2 粘包，拆包问题"></a>13.2 粘包，拆包问题</h2><ul><li><strong>发生原因</strong></li></ul><p>​      发生TCP粘包或拆包有很多原因，现列出常见的几点，可能不全面，欢迎补充，</p><p>1、要发送的数据大于TCP发送缓冲区剩余空间大小，将会发生拆包。</p><p>2、待发送数据大于MSS（最大报文长度），TCP在传输前将进行拆包。</p><p>3、要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去(采用Nagle算法，是TCP为了提高效率)，将会发生粘包。</p><p>4、接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。</p><p>等等。</p><hr><p>​        由于tcp中没有信息规定整个tcp报文的长度，没办法划分，造成粘包。</p><ul><li><strong>解决办法</strong></li></ul><p>​      通过以上分析，我们清楚了粘包或拆包发生的原因，那么如何解决这个问题呢？解决问题的关键在于如何给每个数据包添加边界信息，常用的方法有如下几个：</p><p>1、发送端给每个数据包添加包首部，首部中应该至少包含数据包的长度，这样接收端在接收到数据后，通过读取包首部的长度字段，便知道每一个数据包的实际长度了。</p><p>2、发送端将每个数据包封装为固定长度（不够的可以通过补0填充），这样接收端每次从接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。</p><p>3、可以在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开。</p><p>等等。</p><h2 id="13-3-TCP如何保证可靠传输"><a href="#13-3-TCP如何保证可靠传输" class="headerlink" title="13.3 TCP如何保证可靠传输"></a>13.3 TCP如何保证可靠传输</h2><p>​        <strong>超时重传，累加确认。</strong></p><h1 id="14、举例"><a href="#14、举例" class="headerlink" title="14、举例"></a>14、举例</h1><p>​        在浏览器中输入 <strong><a href="http://www.baidu.com/">http://www.baidu.com/</a></strong> 后执行的全部过程。</p><p>​        现在假设如果我们在客户端（客户端）浏览器中输入 <a href="http://www.baidu.com,/">http://www.baidu.com，</a> 而 baidu.com 为要访问的服务器（服务器），下面详细分析客户端为了访问服务器而执行的一系列关于协议的操作：</p><ul><li>1）客户端浏览器通过DNS解析到<a href="http://www.baidu.com的ip地址220.181.27.48,通过这个ip地址找到客户端到服务器的路径.客户端浏览器发起一个http会话到220.161.27.48,然后通过tcp进行封装数据包,输入到网络层./">www.baidu.com的IP地址220.181.27.48，通过这个IP地址找到客户端到服务器的路径。客户端浏览器发起一个HTTP会话到220.161.27.48，然后通过TCP进行封装数据包，输入到网络层。</a></li><li>2）在客户端的传输层，把HTTP会话请求分成报文段，添加源和目的端口，如服务器使用80端口监听客户端的请求，客户端由系统随机选择一个端口如5000，与服务器进行交换，服务器把相应的请求返回给客户端的5000端口。然后使用IP层的IP地址查找目的端。</li><li>3）客户端的网络层不用关系应用层或者传输层的东西，主要做的是通过查找路由表确定如何到达服务器，期间可能经过多个路由器，这些都是由路由器来完成的工作，不作过多的描述，无非就是通过查找路由表决定通过那个路径到达服务器。</li><li>4）客户端的链路层，包通过链路层发送到路由器，通过邻居协议查找给定IP地址的MAC地址，然后发送ARP请求查找目的地址，如果得到回应后就可以使用ARP的请求应答交换的IP数据包现在就可以传输了，然后发送IP数据包到达服务器的地址。</li></ul><hr><ol><li>浏览器先查缓存，操作系统查缓存，本地域名服务器查缓存，如果有，从下到上传递ip地址并记录缓存，没有，本地域名服务器迭代查询，发送请求查询ip地址。</li><li>通过ip地址三次握手建立连接</li><li>发送HTTP请求，服务器响应，返回页面</li><li>四次挥手</li></ol><h1 id="15、参考资料"><a href="#15、参考资料" class="headerlink" title="15、参考资料"></a>15、参考资料</h1><p><a href="http://www.cnblogs.com/maybe2030/p/4781555.html">http://www.cnblogs.com/maybe2030/p/4781555.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/2019/10/25/%E9%9B%86%E5%90%88/"/>
      <url>/2019/10/25/%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Java集合简介"><a href="#1、Java集合简介" class="headerlink" title="1、Java集合简介"></a>1、Java集合简介</h1><p>​        为了方便对多个对象的操作，就要对对象进行存储。使用Array（数组）存储对象方面具有一些弊端，如：长度问题，而Java 集合就像一种容器，可以动态地把多个对象的引用放入容器中。</p><p>​        Java 集合类可以用于存储数量不等的多个对象，还可用于保存具有映射关系的关联数组。</p><p>​        Java集合可以分为两类：Collection，Map。</p><p>​        <strong>Cllection接口：</strong></p><ol><li><p>Set：元素无序、不可重复的集合。</p></li><li><p>List：元素有序、可重复的集合。</p><p>​    <strong>Map接口：</strong></p><p>​    具有映射关系“key-value”的集合。</p></li></ol><p><img src="/2019/10/25/%E9%9B%86%E5%90%88/image-20200805201227926.png" alt="Collection接口"></p><p><img src="/2019/10/25/%E9%9B%86%E5%90%88/image-20200805201308712.png" alt="Map接口"></p><h1 id="2、Collection接口"><a href="#2、Collection接口" class="headerlink" title="2、Collection接口"></a>2、Collection接口</h1><h2 id="2-1-ArrayList"><a href="#2-1-ArrayList" class="headerlink" title="2.1 ArrayList"></a>2.1 ArrayList</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> lists<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lists<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListIterator<span class="token operator">&lt;</span>String<span class="token operator">></span> lit <span class="token operator">=</span> lists<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//游标移动到第一个元素和第二个元素之间</span>        lit<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除第一个元素</span>        lit<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//向第一个元素的位置添加元素</span>        lit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//二和三之间</span>        lit<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改第二个元素</span>        lit<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将游标向前退一个</span>        lit<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>lit<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        MyComparator comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lists<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after sorted....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String o1<span class="token punctuation">,</span> String o2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token comment" spellcheck="true">//return o1.length()-o2.length();</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        小结：</p><ol><li><p>通过add(添加元素的位置,数据)方法添加数据</p></li><li><p>ListIterator迭代器，用来遍历lists</p></li><li><p>自己定义的Comparator实现类，构造排序方法</p></li><li><p><strong>ArrayList是线程不安全的</strong></p></li></ol><h2 id="2-2-LinkedList"><a href="#2-2-LinkedList" class="headerlink" title="2.2 LinkedList"></a>2.2 LinkedList</h2><p>​        <img src="/2019/10/25/%E9%9B%86%E5%90%88/image-20200805204048628.png" alt="LinkedList"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"ee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"CC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="2-3-Vector"><a href="#2-3-Vector" class="headerlink" title="2.3 Vector"></a>2.3 Vector</h2><p>​        Vector 是一个古老的集合，JDK1.0就有了。大多数操作与ArrayList相同，区别之处在于Vector是<strong>线程安全</strong>的。<br>​        在各种list中，最好把ArrayList作为缺省选择。当插入、删除频繁时，使用LinkedList；Vector总是比ArrayList慢，所以尽量避免使用。</p><p>新增方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">addElement</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">insertElementAt</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">setElementAt</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">removeAllElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="2-4-HashSet"><a href="#2-4-HashSet" class="headerlink" title="2.4 HashSet"></a>2.4 HashSet</h2><p>​        Set接口是Collection的子接口，set接口没有提供额外的方法<br>​        Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个 Set 集合中，则添加操作失败。<br>​        Set 判断两个对象是否相同不是使用 == 运算符，而是根据 equals 方法</p><hr><p>​        HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。<br>​        HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取和查找性能。</p><p>HashSet 具有以下特点：</p><p>​      不能保证元素的排列顺序<br>​      HashSet <strong>不是线程安全的</strong><br>​      集合元素可以是 null</p><p>​        当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法来得到该对象的 hashCode 值，然后根据 hashCode 值决定该对象在 HashSet 中的存储位置。<br>​        HashSet 集合判断两个元素相等的标准：两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。</p><hr><p>​        如果两个元素的 equals() 方法返回 true，但它们的 hashCode() 返回值不相等，hashSet 将会把它们存储在不同的位置，但依然可以添加成功。<br>​        对于存放在Set容器中的对象，对应的类一定要重写equals()和hashCode(Object obj)方法，以实现对象相等规则。</p><p>重写 hashCode() 方法的基本原则:<br>        在程序运行时，同一个对象多次调用 hashCode() 方法应该返回相同的值<br>        当两个对象的 equals() 方法比较返回 true 时，这两个对象的 hashCode() 方法的返回值也应相等<br>        对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值</p><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        HashSet<span class="token operator">&lt;</span>Student<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"ff"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"ag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"f1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator lit <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>lit<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lit<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="2-5-LinkedHashSet"><a href="#2-5-LinkedHashSet" class="headerlink" title="2.5 LinkedHashSet"></a>2.5 LinkedHashSet</h2><p>​        LinkedHashSet 是 HashSet 的子类<br>​        LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用链表维护元素的次序，这使得元素看起来是以插入顺序保存的。<br>​        LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能。<br>​        LinkedHashSet 不允许集合元素重复。</p><h2 id="2-6-TreeSet"><a href="#2-6-TreeSet" class="headerlink" title="2.6 TreeSet"></a>2.6 TreeSet</h2><p>​        TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。</p><pre class=" language-java"><code class="language-java">Comparator <span class="token function">comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Object <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Object <span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Object <span class="token function">lower</span><span class="token punctuation">(</span>Object e<span class="token punctuation">)</span>Object <span class="token function">higher</span><span class="token punctuation">(</span>Object e<span class="token punctuation">)</span>SortedSet <span class="token function">subSet</span><span class="token punctuation">(</span>fromElement<span class="token punctuation">,</span> toElement<span class="token punctuation">)</span>SortedSet <span class="token function">headSet</span><span class="token punctuation">(</span>toElement<span class="token punctuation">)</span>SortedSet <span class="token function">tailSet</span><span class="token punctuation">(</span>fromElement<span class="token punctuation">)</span></code></pre><p>​        TreeSet 两种排序方法：自然排序和定制排序。默认情况下，TreeSet 采用自然排序。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        TreeSet set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//参数构造，默认采用自然排序</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//整数默认的自然排序规则</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeSet set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//字符串默认的自然排序规则</span>        set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存储自定义Student，采用自然排序规则，要让Student实现Comparable接口，制定排序规则</span>        TreeSet set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Jerry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"Tim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//采用定制排序，在构造TreeSet对象时将排序器传入</span>        TreeSet set3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StudentComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        set3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        set3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">StudentComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        Student s1 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>o1<span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>o2<span class="token punctuation">;</span>        <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>Student类重写Comparable接口：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        Student o1 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>o<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="3、Map接口"><a href="#3、Map接口" class="headerlink" title="3、Map接口"></a>3、Map接口</h1><p>​        Map与Collection并列存在。用于保存具有映射关系的数据:Key-Value<br>​        Map 中的 key 和  value 都可以是任何引用类型的数据<br>​        Map 中的 key 用Set来存放，不允许重复，即同一个 Map 对象所对应的类，须重写hashCode()和equals()方法。<br>​        常用String类作为Map的“键”。<br>​        key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到唯一的、确定的 value。</p><p><img src="/2019/10/25/%E9%9B%86%E5%90%88/image-20200805205951913.png" alt="Map常用方法"></p><h2 id="3-1-HashMap"><a href="#3-1-HashMap" class="headerlink" title="3.1 HashMap"></a>3.1 HashMap</h2><p>​        Map接口的常用实现类：HashMap、TreeMap和Properties。<br>​        HashMap是 Map 接口使用频率最高的实现类。<br>​        允许使用null键和null值，与HashSet一样，不保证映射的顺序。<br>​        HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。<br>​        HashMap 判断两个 value相等的标准是：两个 value 通过 equals() 方法返回 true。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"101"</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"99"</span><span class="token punctuation">,</span> <span class="token number">345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String key<span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Integer value <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>Integer<span class="token operator">></span> values <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="3-2-LinkedHashMap"><a href="#3-2-LinkedHashMap" class="headerlink" title="3.2 LinkedHashMap"></a>3.2 LinkedHashMap</h2><p>​        LinkedHashMap 是 HashMap 的子类<br>​        与LinkedHashSet类似，LinkedHashMap 可以维护 Map 的迭代顺序：迭代顺序与 Key-Value 对的插入顺序一致</p><h2 id="3-3-TreeMap"><a href="#3-3-TreeMap" class="headerlink" title="3.3 TreeMap"></a>3.3 TreeMap</h2><p>​        TreeMap存储 Key-Value 对时，需要根据 key-value 对进行排序。TreeMap 可以保证所有的 Key-Value 对处于有序状态。<br>​        TreeMap 的 Key 的排序：<br>​        自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException<br>​        定制排序：创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现 Comparable 接口</p><p>​        TreeMap判断两个key相等的标准：两个key通过compareTo()方法或者compare()方法返回0。<br>​        若使用自定义类作为TreeMap的key，所属类需要重写equals()和hashCode()方法，且equals()方法返回true时，compareTo()方法应返回0。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        TreeMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//默认为key的自然排序方式</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1003"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1002"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1005"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定制排序（key)，在构造对象的时候传入排序器</span>        TreeMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String o1<span class="token punctuation">,</span> String o2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>                <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1003"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1002"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1005"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeMap<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> String<span class="token operator">></span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Student类的自然排序方式</span>        Student s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"Tim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"Jerry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"NJ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token string">"SH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s3<span class="token punctuation">,</span> <span class="token string">"BJ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="3-4-Hashtable"><a href="#3-4-Hashtable" class="headerlink" title="3.4 Hashtable"></a>3.4 Hashtable</h2><p>​        Hashtable是个古老的 Map 实现类，线程安全。<br>​        与HashMap不同，Hashtable 不允许使用 null 作为 key 和 value<br>​        与HashMap一样，Hashtable 也不能保证其中 Key-Value 对的顺序<br>​        Hashtable判断两个key相等、两个value相等的标准，与hashMap一致。</p><h2 id="3-5-Properties"><a href="#3-5-Properties" class="headerlink" title="3.5 Properties"></a>3.5 Properties</h2><p>​        Properties 类是 Hashtable 的子类，该对象用于处理属性文件<br>​        由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的 key 和 value 都是字符串类型<br>​        存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法</p><p>​        读取属性文件：</p><pre class=" language-java"><code class="language-java">Properties pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String user <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="4、操作集合的工具类：Collections"><a href="#4、操作集合的工具类：Collections" class="headerlink" title="4、操作集合的工具类：Collections"></a>4、操作集合的工具类：Collections</h1><ul><li>Collections是一个操作Set，List，Map等集合的工具类。</li><li>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等静态方法。</li></ul><p>排序：</p><pre class=" language-java"><code class="language-java"><span class="token function">reverse</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span>：反转 List 中元素的顺序<span class="token function">shuffle</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span>：对 List 集合元素进行随机排序<span class="token function">sort</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span>：根据元素的自然顺序对指定 List 集合元素按升序排序<span class="token function">sort</span><span class="token punctuation">(</span>List，Comparator<span class="token punctuation">)</span>：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序<span class="token function">swap</span><span class="token punctuation">(</span>List，<span class="token keyword">int</span>， <span class="token keyword">int</span><span class="token punctuation">)</span>：将指定 list 集合中的 i 处元素和 j 处元素进行交换</code></pre><p>查找、替换：</p><pre class=" language-java"><code class="language-java">Object <span class="token function">max</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span>：根据元素的自然顺序，返回给定集合中的最大元素Object <span class="token function">max</span><span class="token punctuation">(</span>Collection，Comparator<span class="token punctuation">)</span>：根据 Comparator 指定的顺序，返回给定集合中的最大元素Object <span class="token function">min</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span>Object <span class="token function">min</span><span class="token punctuation">(</span>Collection，Comparator<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">frequency</span><span class="token punctuation">(</span>Collection，Object<span class="token punctuation">)</span>：返回指定集合中指定元素的出现次数<span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>List dest<span class="token punctuation">,</span>List src<span class="token punctuation">)</span>：将src中的内容复制到dest中<span class="token keyword">boolean</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span>List list，Object oldVal，Object newVal<span class="token punctuation">)</span>：使用新值替换 List 对象的所有旧值</code></pre><p>同步控制：</p><p>​        Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题。</p><p><img src="/2019/10/25/%E9%9B%86%E5%90%88/image-20200805211126131.png" alt="同步控制"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA基本知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 存储 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务</title>
      <link href="/2019/10/20/%E4%BA%8B%E5%8A%A1/"/>
      <url>/2019/10/20/%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h1><p>​        事务指逻辑上的一组操作，组成这组操作的各个单元，要不全部成功，要不全部不成功。</p><h1 id="2、为什么需要JAVA事务？"><a href="#2、为什么需要JAVA事务？" class="headerlink" title="2、为什么需要JAVA事务？"></a>2、为什么需要JAVA事务？</h1><p>​        事务是为解决数据安全操作提出的，事务控制实际上就是控制数据的安全访问。</p><p>​    举一个简单例子：</p><p>​        比如银行转帐业务，账户A要将自己账户上的1000元转到B账 户下面，A账户余额首先要减去1000元，然后B账户要增加1000元。假如在中间网络出现了问题，A账户减去1000元已经结束，B因为网络中断而操作 失败，那么整个业务失败，必须做出控制，要求A账户转帐业务撤销。这才能保证业务的正确性，完成这个操作就需要事务，将A账户资金减少和B账户资金增加方 到一个事务里面，要么全部执行成功，要么操作全部撤销，这样就保持了数据的安全性。</p><h1 id="3、基本要素"><a href="#3、基本要素" class="headerlink" title="3、基本要素"></a>3、基本要素</h1><p>​        事务共有四个特性（ACID）。</p><ol><li><p><strong>原子性</strong>（Atomicity）：事务开始后所有操作，要么全部做完，要么 全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务 开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单位。</p></li><li><p><strong>一致性</strong>（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏 。比如A向B转账，不可能A扣了钱，B却没收到。</p></li><li><p><strong>隔离性</strong>（Isolation）：同一时间，只允许一个事务请求同一数据，不同的 事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。 </p></li><li><p><strong>持久性</strong>（Durability）：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</p></li></ol><p>Q/A:</p><pre><code>既然事务的概念从数据库而来，那Java事务是什么？之间有什么联系？实际上，一个Java应用系统，如果要操作数据库，则通过JDBC来实现的。增加、修改、删除都是通过相应方法间接来实现的，事务的控制也相应转移到Java程序代码中。因此，数据库操作的事务习惯上就称为Java事务。</code></pre><h1 id="4、并发问题"><a href="#4、并发问题" class="headerlink" title="4、并发问题"></a>4、并发问题</h1><p>1、脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据 。</p><p>2、不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。 </p><p>3、幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</p><h1 id="5、Mysql事务隔离级别"><a href="#5、Mysql事务隔离级别" class="headerlink" title="5、Mysql事务隔离级别"></a>5、Mysql事务隔离级别</h1><p><img src="/2019/10/20/%E4%BA%8B%E5%8A%A1/image-20200804190628667.png" alt="隔离级别"></p><p>​        从上往下，隔离强度逐渐增强，性能逐渐变差。采用哪种隔离级别要根据系统需求权衡决定，其中，<strong>可重复读</strong>是 MySQL 的默认级别。</p><p>​        读未提交就是一个事务可以读到所有数据，性能最好，但是隔离强度最差。</p><p>​        读提交就是一个事务只能读到其他事务已经提交过的数据，也就是其他事务调用 commit 命令之后的数据。</p><p>​        可重复读就是事务不会读到其他事务对已有数据的修改，即使其他事务已提交，也就是说，事务开始时读到的已有数据是什么，在事务提交前的任意时刻，这些数据的值都是一样的。</p><p>​        串行化是4种事务隔离级别中隔离效果最好的，解决了脏读、可重复读、幻读的问题，但是效果最差，它将事务的执行变为顺序执行，与其他三个隔离级别相比，它就相当于单线程，后一个事务的执行必须等待前一个事务结束。</p><h1 id="6、JAVA事务的类型"><a href="#6、JAVA事务的类型" class="headerlink" title="6、JAVA事务的类型"></a>6、JAVA事务的类型</h1><p>​        Java事务的类型有三种：<strong>JDBC事务、JTA（Java Transaction API）事务、容器事务。</strong></p><h2 id="6-1-JDBC事务"><a href="#6-1-JDBC事务" class="headerlink" title="6.1 JDBC事务"></a>6.1 JDBC事务</h2><p>​         JDBC 事务是用 Connection 对象控制的。JDBC Connection 接口（ java.sql.Connection ）提供了两种事务模式：自动提交和手工提交。</p><pre class=" language-JAVA"><code class="language-JAVA">java.sql.Connection 提供了以下控制事务的方法：public void setAutoCommit(boolean)public boolean getAutoCommit()public void commit()public void rollback()</code></pre><p>​        使用 JDBC 事务界定时，可以将多个 SQL 语句结合到一个事务中。 </p><p>​         JDBC 事务的一个缺点是事务的范围局限于一个数据库连接。一个 JDBC 事务不能跨越多个数据库。</p><h2 id="6-2-JTA事务"><a href="#6-2-JTA事务" class="headerlink" title="6.2 JTA事务"></a>6.2 JTA事务</h2><p>​        JTA是一种高层的，<strong>与实现无关的，与协议无关的API</strong>，应用程序和应用服务器可以使用JTA来访问事务。</p><p>​        JTA允许应用程序执行分布式事务处理——在两个或多个网络计算机资源上访问并且更新数据，这些数据可以分布在多个数据库上。JDBC驱动程序的JTA支持极大地增强了数据访问能力。</p><p>​        如果计划用 JTA 界定事务，那么就需要有一个实现 <strong>javax.sql.XADataSource 、 javax.sql.XAConnection</strong> 和 <strong>javax.sql.XAResource</strong> 接口的 JDBC 驱动程序。一个实现了这些接口的驱动程序将可以参与 JTA 事务。一个 XADataSource 对象就是一个 XAConnection 对象的工厂。 XAConnection s 是参与 JTA 事务的 JDBC 连接。 </p><h2 id="6-3-容器事务"><a href="#6-3-容器事务" class="headerlink" title="6.3 容器事务"></a>6.3 容器事务</h2><p>​        容器事务主要是J2EE应用服务器提供的，容器事务大多是基于JTA完成，这是一个基于JNDI的，相当复杂的API实现。相对编码实现JTA事务管理，  我们可以通过EJB容器提供的容器事务管理机制（CMT）完成同一个功能，这项功能由J2EE应用服务器提供。这使得我们可以简单的指定将哪个方法加入事  务，一旦指定，容器将负责事务管理任务。这是我们土建的解决方式，因为通过这种方式我们可以将事务代码排除在逻辑编码之外，同时将所有困难交给J2EE容 器去解决。使用EJB CMT的另外一个好处就是程序员无需关心JTA API的编码，不过，理论上我们必须使用EJB.</p><h2 id="6-4-三种事务的差异"><a href="#6-4-三种事务的差异" class="headerlink" title="6.4 三种事务的差异"></a>6.4 三种事务的差异</h2><p><strong>1、JDBC事务控制的局限性在一个数据库连接内，但是其使用简单。</strong><br> <strong>2、JTA事务的功能强大，事务可以跨越多个数据库或多个DAO，使用也比较复杂。</strong><br> <strong>3、容器事务，主要指的是J2EE应用服务器提供的事务管理，局限于EJB应用使用。</strong></p>]]></content>
      
      
      <categories>
          
          <category> JAVA基本知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 基础知识 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类匿名类</title>
      <link href="/2019/09/13/%E5%86%85%E9%83%A8%E7%B1%BB%E5%8C%BF%E5%90%8D%E7%B1%BB/"/>
      <url>/2019/09/13/%E5%86%85%E9%83%A8%E7%B1%BB%E5%8C%BF%E5%90%8D%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="1、内部类"><a href="#1、内部类" class="headerlink" title="1、内部类"></a>1、内部类</h1><h2 id="1-1-内部类是什么？"><a href="#1-1-内部类是什么？" class="headerlink" title="1.1 内部类是什么？"></a>1.1 内部类是什么？</h2><p>​        所谓内部类，就是在一个类的内部还有一个类的嵌套操作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">InnerTest</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"inner say:  "</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        InnerTest innerTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test say: "</span><span class="token operator">+</span> innerTest<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InnerTest innerTest <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerTest<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InnerTest innerTest2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerTest2<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="1-2-内部类的优点"><a href="#1-2-内部类的优点" class="headerlink" title="1.2 内部类的优点"></a>1.2 内部类的优点</h2><p>​        内部类与外部类可以方便的访问彼此的私有域（包括私有方法、私有属性）。 </p><p>​        内部类是另外一种封装，对外部的其他类隐藏。 </p><p>​        内部类可以实现java的单继承局限。</p><p><img src="/2019/09/13/%E5%86%85%E9%83%A8%E7%B1%BB%E5%8C%BF%E5%90%8D%E7%B1%BB/image-20200806183418185.png" alt="image1"></p><p><img src="/2019/09/13/%E5%86%85%E9%83%A8%E7%B1%BB%E5%8C%BF%E5%90%8D%E7%B1%BB/image-20200806183500331.png" alt="image2"></p><h2 id="1-3-成员内部类"><a href="#1-3-成员内部类" class="headerlink" title="1.3 成员内部类"></a>1.3 成员内部类</h2><p>​        成员内部类内部不允许存在任何static变量或方法 正如成员方法中不能 </p><p>有任何静态属性 （成员方法与对象相关、静态属性与类有关）。</p><p><img src="/2019/09/13/%E5%86%85%E9%83%A8%E7%B1%BB%E5%8C%BF%E5%90%8D%E7%B1%BB/image-20200806183846755.png" alt="image3"></p><h2 id="1-3-静态内部类"><a href="#1-3-静态内部类" class="headerlink" title="1.3 静态内部类"></a>1.3 静态内部类</h2><p>​        关键字static可以修饰成员变量、方法、代码块、其实还可以修饰内部类，使 用static修饰的内部类我们称之为静态内部类，静态内部类和非静态内部类之间存 在一个最大的区别，非静态内部类在编译完成之后会隐含的保存着一个引用，该 引用是指向创建它的外围类，但是静态类没有。没有这个引用就意味着： </p><p>​        1.静态内部类的创建不需要依赖外部类可以直接创建。 </p><p>​        2.静态内部类不可以使用任何外部类的非static类（包括属性和方法），但可以存在自己的成员变量。</p><h2 id="1-4-方法内部类"><a href="#1-4-方法内部类" class="headerlink" title="1.4 方法内部类"></a>1.4 方法内部类</h2><p>​        方法内部类顾名思义就是定义在方法里的类 。</p><p>   1.方法内部类不允许使用访问权限修饰符（public、private、protected）均不允许。 </p><ol start="2"><li><p>方法内部类对外部完全隐藏，除了创建这个类的方法可以访问它以外，其他地方均不能访问(换句话说其他方法或者类都不知道有这个类的存在)方法内部类对外部完全隐藏，出了创建这个类的方法可以访问它，其他地方均不能访问。 </p></li><li><p>方法内部类如果想要使用方法形参，该形参必须使用final声明（JDK8形参变为隐式final声明）        </p></li></ol><p><img src="/2019/09/13/%E5%86%85%E9%83%A8%E7%B1%BB%E5%8C%BF%E5%90%8D%E7%B1%BB/image-20200806184649428.png" alt="image4"></p><h1 id="2、匿名内部类"><a href="#2、匿名内部类" class="headerlink" title="2、匿名内部类"></a>2、匿名内部类</h1><p>​        匿名内部类就是一个没有名字的方法内部类，因此特点和方法与方法内部类完全一致，除此之外，还有自己的特点： </p><p>​    1.匿名内部类必须继承一个抽象类或者实现一个接口。 </p><p>​    2.匿名内部类没有类名，因此没有构造方法。    </p><p><img src="/2019/09/13/%E5%86%85%E9%83%A8%E7%B1%BB%E5%8C%BF%E5%90%8D%E7%B1%BB/image-20200806184849060.png" alt="image5"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA基本知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> JAVA </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java细节</title>
      <link href="/2019/08/06/java%E7%BB%86%E8%8A%82/"/>
      <url>/2019/08/06/java%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h1 id="1、对象的clone"><a href="#1、对象的clone" class="headerlink" title="1、对象的clone"></a>1、对象的clone</h1><h2 id="1-1-实现Cloneable接口"><a href="#1-1-实现Cloneable接口" class="headerlink" title="1.1 实现Cloneable接口"></a>1.1 实现Cloneable接口</h2><p>​        继承Cloneable接口，覆盖<code>public Object clone()</code>方法。若类中还有其他类的引用，则其他类中也必须覆盖clone方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Point</span>  <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token operator">=</span>y<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setX</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> y<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setY</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Point [x="</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">", y="</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              Point p <span class="token operator">=</span> null<span class="token punctuation">;</span>              <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  p <span class="token operator">=</span> <span class="token punctuation">(</span>Point<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>CloneNotSupportedException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> p<span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> String add<span class="token punctuation">;</span>     Point center<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>add<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>center<span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Address</span><span class="token punctuation">(</span>String ss<span class="token punctuation">,</span>Point center<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>add<span class="token operator">=</span>ss<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>center<span class="token operator">=</span>center<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> add<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAdd</span><span class="token punctuation">(</span>String add<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>add <span class="token operator">=</span> add<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          Address addr <span class="token operator">=</span> null<span class="token punctuation">;</span>          <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              addr <span class="token operator">=</span> <span class="token punctuation">(</span>Address<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              addr<span class="token punctuation">.</span>center<span class="token operator">=</span><span class="token punctuation">(</span>Point<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>center<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>CloneNotSupportedException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> addr<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Address o<span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>add<span class="token operator">==</span>o<span class="token punctuation">.</span>add<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">testCenter</span><span class="token punctuation">(</span>Address o<span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>center<span class="token operator">==</span>o<span class="token punctuation">.</span>center<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Address [add="</span> <span class="token operator">+</span> add <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppAddress</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Address add<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Address add2<span class="token operator">=</span><span class="token punctuation">(</span>Address<span class="token punctuation">)</span>add<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>add2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//true</span>        add2<span class="token punctuation">.</span><span class="token function">setAdd</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>add2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">getAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//aaa</span>        add2<span class="token punctuation">.</span>center<span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">testCenter</span><span class="token punctuation">(</span>add2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//false    </span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        当add2=add.clone（）后，add2引用add的地址。当add2改变自己的属性值时，将不再引用add的地址，而是重新指向一块地址，为深拷贝。</p><hr><p><strong>clone方式深拷贝小结：</strong></p><p>​        1.如果有一个非原生成员，如自定义对象的成员，那么就需要：</p><ul><li>该成员实现Cloneable接口并覆盖clone()方法，不要忘记提升为public可见。</li><li>同时，修改被复制类的clone()方法，增加成员的克隆逻辑。</li></ul><p>​      2. 如果被复制对象不是直接继承Object，中间还有其它继承层次，每一层super类都需要实现Cloneable接口并覆盖clone()方法。</p><p>​        与对象成员不同，继承关系中的clone不需要被复制类的clone()做多余的工作。</p><p>​      一句话来说，如果实现完整的深拷贝，需要被复制对象的继承链、引用链上的每一个对象都实现克隆机制。</p><p>前面的实例还可以接受，如果有N个对象成员，有M层继承关系，就会很麻烦。</p><h2 id="1-2-BeanUtils"><a href="#1-2-BeanUtils" class="headerlink" title="1.2 BeanUtils"></a>1.2 BeanUtils</h2><p>​        BeanUtils是一个工具类，类中提供了cloneBean（Object object）方法。</p><p>自己实现BeanUtils（反射机制）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanUtils</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">copyObject</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span>   <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>       Class <span class="token class-name">clz</span><span class="token operator">=</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Object temp<span class="token operator">=</span>null<span class="token punctuation">;</span>       <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           temp<span class="token operator">=</span>clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields<span class="token operator">=</span>clz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               Object value<span class="token operator">=</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>               <span class="token keyword">else</span>               <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   Object t<span class="token operator">=</span><span class="token function">copyObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                   field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>       <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> temp<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span>Class <span class="token class-name">clz</span><span class="token punctuation">)</span>   <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>clz<span class="token operator">==</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">||</span>clz<span class="token operator">==</span>Integer<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>clz<span class="token operator">==</span>Double<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">||</span>clz<span class="token operator">==</span>Double<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>clz<span class="token operator">==</span>Float<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">||</span>clz<span class="token operator">==</span>Float<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>clz<span class="token operator">==</span>Boolean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">||</span>clz<span class="token operator">==</span>Boolean<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>clz<span class="token operator">==</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">||</span>clz<span class="token operator">==</span>Long<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>clz<span class="token operator">==</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> NoSuchMethodException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        Address add<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Address add2<span class="token operator">=</span><span class="token punctuation">(</span>Address<span class="token punctuation">)</span>BeanUtils<span class="token punctuation">.</span><span class="token function">copyObject</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">testCenter</span><span class="token punctuation">(</span>add2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//false</span>        Address add3  <span class="token operator">=</span><span class="token punctuation">(</span>Address<span class="token punctuation">)</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span>BeanUtils<span class="token punctuation">.</span><span class="token function">cloneBean</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>add3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">testCenter</span><span class="token punctuation">(</span>add3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//false</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="1-3-序列化"><a href="#1-3-序列化" class="headerlink" title="1.3 序列化"></a>1.3 序列化</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Address address<span class="token punctuation">;</span>    <span class="token keyword">public</span> Person <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person p2<span class="token operator">=</span>null<span class="token punctuation">;</span>        Person p1<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>        PipedOutputStream out<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PipedOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PipedInputStream in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PipedInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            in<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>ObjectOutputStream bo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>                ObjectInputStream bi<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            bo<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>            p2<span class="token operator">=</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span> bi<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p2<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>​        clone机制不是强类型的限制，比如实现了Cloneable并没有强制继承链上的对象也实现；也没有强制要求覆盖clone()方法。因此编码过程中比较容易忽略其中一个环节，对于复杂的项目排查就是困难了。</p><p>​        要寻找可靠的，简单的方法，序列化就是一种途径。</p><ul><li>被复制对象的继承链、引用链上的每一个对象都实现java.io.Serializable接口。这个比较简单，不需要实现任何方法，serialVersionID的要求不强制，对深拷贝来说没毛病。</li><li>实现自己的deepClone方法，将this写入流，再读出来。俗称：冷冻-解冻。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA基本知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> JAVA </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于CNN+ATTENTION的漏洞检测系统</title>
      <link href="/2019/05/14/%E5%9F%BA%E4%BA%8ECNN-ATTENTION%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/05/14/%E5%9F%BA%E4%BA%8ECNN-ATTENTION%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="1、项目简介"><a href="#1、项目简介" class="headerlink" title="1、项目简介"></a>1、项目简介</h1><p>​        在网络日益发展的今天，软件安全成为了从业人员必须要注意的一块。在国际上，软件漏洞静态检测是一种有效的方式去检测程序中静态存在的错误。在检测方法中，相较于二进制漏洞检测法，源代码漏洞检测法更简便更快速。<br>​        本项目核心思想是源代码漏洞检测法中基于深度学习的检测方法。由于CNN+ATTENTION机制的优秀表现，所以我们使用这个核心神经网络结构来训练模型，从而达到源代码静态错误的检测效果。</p><p>​        具体流程：</p><ol><li>平台从用户本地读入文件</li><li>一系列模型处理操作</li><li>将结果写入本地</li></ol><h1 id="2、项目特色"><a href="#2、项目特色" class="headerlink" title="2、项目特色"></a>2、项目特色</h1><p><img src="/2019/05/14/%E5%9F%BA%E4%BA%8ECNN-ATTENTION%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20200805194011539.png" alt="特色展示"></p><p>​        总结：采用CNN+Attention模型进行工作我们可以得到学习效率的模型，相对于RNN+LSTM更加的准确、快速。在漏洞检测这块，二进制漏洞检测由于其缺乏上层的代码结构信息和类型信息，分析难度大；源代码漏洞检测中的基于中间表示的漏洞检测，对大规模的程序进行形式化表示很困难。综合以上考虑，我们使用的基于逻辑推理的漏洞检测再结合计算机强大的算力会更加准确。</p><h1 id="3、项目成果展示"><a href="#3、项目成果展示" class="headerlink" title="3、项目成果展示"></a>3、项目成果展示</h1><h2 id="3-1-成果简介"><a href="#3-1-成果简介" class="headerlink" title="3.1 成果简介"></a>3.1 成果简介</h2><p>​        项目实现一种基于CNN+ATTENTION 这两种神经网络以及已公布漏洞库中的代码数据所训练出来的具有能够检测到程序漏洞能力的模型。在服务器上配置好所需要的环境后，我们将所要检测的项目文件放入指定目录，然后通过执行脚本文件来进行载入模型，从而检测。最终检测结果将写入指定目录。这些目录参数均在本项目文件的特定类中。</p><h2 id="3-2-技术及功能"><a href="#3-2-技术及功能" class="headerlink" title="3.2 技术及功能"></a>3.2 技术及功能</h2><p>项目中应用的关键技术：<br>        CNN神经网络结构、<br>        ATTENTION神经网络结构、<br>        alter3工具进行词法语法语义解析、<br>        LSTM神经网络。<br>主要功能：<br>        对所给项目文件代码进行可能存在漏洞的检测。</p><h2 id="3-3-界面"><a href="#3-3-界面" class="headerlink" title="3.3 界面"></a>3.3 界面</h2><p><img src="/2019/05/14/%E5%9F%BA%E4%BA%8ECNN-ATTENTION%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20200805194435704.png" alt="界面展示"></p><h2 id="3-4-数据分析"><a href="#3-4-数据分析" class="headerlink" title="3.4 数据分析"></a>3.4 数据分析</h2><p><img src="/2019/05/14/%E5%9F%BA%E4%BA%8ECNN-ATTENTION%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/image-20200805194520310.png" alt="数据分析"></p><h1 id="4、项目意义与收获"><a href="#4、项目意义与收获" class="headerlink" title="4、项目意义与收获"></a>4、项目意义与收获</h1><p>​        项目研究意义：这个项目的完成，以及模型评估后，CNN+ATTENTION机制的确比LSTM+RNN在“语言比对”方面要优秀。而且试验的准确度以及Bleu算法的得分曲线，我们是可以确定基于深度学习的漏洞检测是相对高效和准确的方式去检测源代码的漏洞。</p><p>​        项目收获：我们学会了很多实用的知识，如熟练LINUX系统使用，学会使用深度学习框架，数据搜集和分析等，同时培养了我们团队合作解决难题的能力与意识，学会与人交流合作，发挥彼此的长处。每一步的前进，让我们逐渐体会其中的辛苦和意义，学到科学与人文知识，获得属于我们大学生的成长。</p>]]></content>
      
      
      <categories>
          
          <category> 学校项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大创 </tag>
            
            <tag> 软件安全 </tag>
            
            <tag> 源代码漏洞检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown学习</title>
      <link href="/2019/05/13/MarkDown%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/05/13/MarkDown%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h1><p>#一级标题</p><p>##二级标题</p><p>。。。</p><p>######六级标题</p><p>最多支持六级标题</p><h1 id="2、文字"><a href="#2、文字" class="headerlink" title="2、文字"></a>2、文字</h1><h2 id="2-1删除线"><a href="#2-1删除线" class="headerlink" title="2.1删除线"></a>2.1删除线</h2><p>使用“~~”：</p><p><code>~~删除线~~</code></p><p>实际效果：<del>删除线</del></p><h2 id="2-2斜体"><a href="#2-2斜体" class="headerlink" title="2.2斜体"></a>2.2斜体</h2><p>使用“*”：</p><p><code>*斜体*</code></p><p>实际效果：<em>斜体</em></p><h2 id="2-3加粗"><a href="#2-3加粗" class="headerlink" title="2.3加粗"></a>2.3加粗</h2><p>使用”**”</p><p><code>**加粗**</code></p><p>实际效果：<strong>加粗</strong></p><h2 id="2-4引用"><a href="#2-4引用" class="headerlink" title="2.4引用"></a>2.4引用</h2><p>使用“&gt;”：</p><p><code>&gt;&quot;方方不是小方方&quot;</code></p><p>实际效果：</p><blockquote><p>“方方不是小方方”</p></blockquote><p>可以使用多个“&gt;”完成多级引用，也可以嵌套使用</p><h2 id="2-5下划线"><a href="#2-5下划线" class="headerlink" title="2.5下划线"></a>2.5下划线</h2><h3 id="2-5-1-手动输入"><a href="#2-5-1-手动输入" class="headerlink" title="2.5.1 手动输入"></a>2.5.1 手动输入</h3><p><code>&lt;u&gt;文字&lt;/u&gt;</code></p><p>实际效果：<u>文字</u></p><h3 id="2-5-2-快捷键输入"><a href="#2-5-2-快捷键输入" class="headerlink" title="2.5.2 快捷键输入"></a>2.5.2 快捷键输入</h3><p>使用“ctrl+u”输入</p><p>实际效果：<u>文字</u></p><h2 id="2-6高亮（需勾选扩展语法）"><a href="#2-6高亮（需勾选扩展语法）" class="headerlink" title="2.6高亮（需勾选扩展语法）"></a>2.6高亮（需勾选扩展语法）</h2><p><code>==文字==</code></p><p>实际效果：==文字==</p><h2 id="2-7上下标（需勾选扩展语法）"><a href="#2-7上下标（需勾选扩展语法）" class="headerlink" title="2.7上下标（需勾选扩展语法）"></a>2.7上下标（需勾选扩展语法）</h2><p>上标：<code>m^2^</code></p><p>实际效果：m^2^</p><p>下标：<code>H~2~</code></p><p>实际效果：H<del>2</del></p><h1 id="3、表格"><a href="#3、表格" class="headerlink" title="3、表格"></a>3、表格</h1><p>创建表格有两种方式：</p><h2 id="3-1手动创建"><a href="#3-1手动创建" class="headerlink" title="3.1手动创建"></a>3.1手动创建</h2><p>使用“|”创建</p><pre><code>| name | price|| -----|------|| beef |  8   |</code></pre><p>实际效果如下：</p><table><thead><tr><th>name</th><th>price</th></tr></thead><tbody><tr><td>beef</td><td>8</td></tr></tbody></table><h2 id="3-2快捷键创建"><a href="#3-2快捷键创建" class="headerlink" title="3.2快捷键创建"></a>3.2快捷键创建</h2><p>使用“ctrl+t”快速创建表格</p><table><thead><tr><th>name</th><th align="center">price</th></tr></thead><tbody><tr><td>chicken</td><td align="center">8</td></tr></tbody></table><h1 id="4、列表"><a href="#4、列表" class="headerlink" title="4、列表"></a>4、列表</h1><h2 id="4-1无序列表"><a href="#4-1无序列表" class="headerlink" title="4.1无序列表"></a>4.1无序列表</h2><p>可以使用“*”、“+”、“-”创建无序列表</p><p>实际效果：</p><ul><li>aaa</li><li>bbb</li><li>ccc</li></ul><h2 id="4-2有序列表"><a href="#4-2有序列表" class="headerlink" title="4.2有序列表"></a>4.2有序列表</h2><p>可以使用数字和’.’创建有序列表</p><p>实际效果：</p><ol><li>aaa</li><li>bbb</li><li>ccc</li></ol><h1 id="5、代码"><a href="#5、代码" class="headerlink" title="5、代码"></a>5、代码</h1><h2 id="5-1代码块"><a href="#5-1代码块" class="headerlink" title="5.1代码块"></a>5.1代码块</h2><p>使用三个`创建代码块</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="5-2单行代码"><a href="#5-2单行代码" class="headerlink" title="5.2单行代码"></a>5.2单行代码</h2><p>使用一个`创建一条代码</p><p><code>java</code>,<code>c</code></p><h1 id="6、分隔符"><a href="#6、分隔符" class="headerlink" title="6、分隔符"></a>6、分隔符</h1><p>使用’***’，’—-‘，回车即可显示</p><p>实际效果：</p><hr><hr><h1 id="7、跳转"><a href="#7、跳转" class="headerlink" title="7、跳转"></a>7、跳转</h1><h2 id="7-1外部跳转"><a href="#7-1外部跳转" class="headerlink" title="7.1外部跳转"></a>7.1外部跳转</h2><p>使用<code>[提示文字](网页url)</code></p><p>实际效果：<a href="https://www.acfun.cn/">ACFUN</a></p><h2 id="7-2内部跳转（文档内跳转）"><a href="#7-2内部跳转（文档内跳转）" class="headerlink" title="7.2内部跳转（文档内跳转）"></a>7.2内部跳转（文档内跳转）</h2><p>使用<code>[提示文字](#文档标题)</code></p><p>实际效果：<a href="#1%E3%80%81%E6%A0%87%E9%A2%98">跳转到标题</a></p><h1 id="8、自动链接"><a href="#8、自动链接" class="headerlink" title="8、自动链接"></a>8、自动链接</h1><p>使用&lt;&gt;</p><p>实际效果：&lt;<a href="http://www.acfun.cn&gt;/">www.acfun.cn&gt;</a></p><h1 id="9、图片"><a href="#9、图片" class="headerlink" title="9、图片"></a>9、图片</h1><p>使用<code>![自己起的名字]（图片的位置）</code></p><p>或者直接复制到文档内就行</p><p>实际效果：<img src="/2019/05/13/MarkDown%E5%AD%A6%E4%B9%A0/blog\source_posts\MarkDown学习\image-20200729205730398.png" alt="image-20200729205730398"></p><h1 id="10、参考文档"><a href="#10、参考文档" class="headerlink" title="10、参考文档"></a>10、参考文档</h1><p><a href="https://www.bilibili.com/video/BV1d741147k2">https://www.bilibili.com/video/BV1d741147k2</a></p>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
